{"version":3,"sources":["webpack:///bundle.1470078875719.min.js","webpack:///webpack/bootstrap 5497dca8470d7c2281b0","webpack:///./index.js","webpack:///./m3/m3engine.js","webpack:///./core/engine.js","webpack:///../~/three/build/three.js","webpack:///./core/service-locator.js","webpack:///./m3/m3game.js","webpack:///./core/game.js","webpack:///../~/stats.js/build/stats.min.js","webpack:///./core/mouse.js","webpack:///./core/mouse-event.js","webpack:///./core/touch.js","webpack:///./core/touch-event.js","webpack:///./m3/m3scene.js","webpack:///./core/scene.js","webpack:///./core/mvc/model.js","webpack:///./m3/models/grid-model.js","webpack:///./m3/models/cell-model.js","webpack:///./m3/models/tile-model.js","webpack:///./m3/views/tile-view.js","webpack:///../~/tween.js/src/Tween.js","webpack:///./core/mvc/view.js","webpack:///./assets/textures/tile_blue.png","webpack:///./assets/textures/tile_green.png","webpack:///./assets/textures/tile_purple.png","webpack:///./assets/textures/tile_red.png","webpack:///./assets/textures/tile_yellow.png","webpack:///./m3/views/grid-view.js","webpack:///./m3/controllers/grid-controller.js","webpack:///../~/feature.js/feature.js","webpack:///./core/mvc/controller.js","webpack:///./index.css?092c","webpack:///./index.css","webpack:///../~/css-loader/lib/css-base.js","webpack:///../~/style-loader/addStyles.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_m3engine","_m3engine2","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_engine","_engine2","_m3game","_m3game2","M3Engine","_Engine","this","_this","getPrototypeOf","start","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_three","_three2","_serviceLocator","_serviceLocator2","Engine","gameClass","_gameClass","_renderer","WebGLRenderer","isStarted","_width","window","innerWidth","_height","innerHeight","provide","setSize","_game","resize","document","body","appendChild","domElement","addEventListener","bind","get","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","THREE","REVISION","undefined","Number","EPSILON","Math","pow","sign","x","Function","name","toString","match","assign","output","index","arguments","source","nextKey","hasOwnProperty","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","Color","r","g","b","set","setRGB","copy","setHex","setStyle","setScalar","scalar","hex","floor","setHSL","hue2rgb","q","t","h","s","l","euclideanModulo","clamp","style","handleAlpha","string","parseFloat","console","warn","exec","color","components","min","parseInt","size","charAt","ColorKeywords","clone","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","sqrt","getHex","getHexString","slice","getHSL","optionalTarget","hue","saturation","hsl","max","lightness","delta","getStyle","offsetHSL","add","addColors","color1","color2","addScalar","sub","multiply","multiplyScalar","lerp","alpha","equals","fromArray","array","offset","toArray","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Quaternion","y","z","w","_x","_y","_z","_w","onChangeCallback","quaternion","setFromEuler","euler","update","Euler","Error","c1","cos","c2","c3","s1","sin","s2","s3","order","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","v1","EPS","vFrom","vTo","Vector3","dot","abs","crossVectors","normalize","inverse","conjugate","v","lengthSq","multiplyQuaternions","premultiply","a","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","slerp","qb","cosHalfTheta","sinHalfTheta","halfTheta","atan2","ratioA","ratioB","onChange","callback","qa","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","f","Vector2","width","height","setX","setY","setComponent","getComponent","addVectors","addScaledVector","subVectors","subScalar","isFinite","divide","divideScalar","clampScalar","minVal","maxVal","clampLength","ceil","round","roundToZero","negate","lengthManhattan","PI","distanceTo","distanceToSquared","dx","dy","distanceToManhattan","setLength","lerpVectors","v2","fromAttribute","attribute","itemSize","rotateAround","center","setZ","multiplyVectors","applyEuler","error","applyQuaternion","applyAxisAngle","applyMatrix3","e","applyMatrix4","applyProjection","d","qx","qy","qz","qw","ix","iy","iz","iw","project","matrix","camera","Matrix4","multiplyMatrices","projectionMatrix","getInverse","matrixWorld","unproject","transformDirection","cross","ax","ay","az","bx","by","bz","projectOnVector","vector","projectOnPlane","planeNormal","reflect","normal","angleTo","theta","acos","dz","setFromSpherical","sinPhiRadius","phi","radius","setFromMatrixPosition","setFromMatrixColumn","setFromMatrixScale","sx","sy","sz","temp","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","epsilon","epsilon2","xx","yy","zz","xy","xz","yz","_order","DefaultOrder","RotationOrders","asin","setFromQuaternion","makeRotationFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","Line3","end","line","result","distanceSq","distance","at","closestPointToPointParameter","startP","startEnd","point","clampToLine","startEnd2","startEnd_startP","closestPointToPoint","Box2","Infinity","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","halfSize","box","isEmpty","expandByVector","expandByScalar","containsPoint","containsBox","getParameter","intersectsBox","clampPoint","distanceToPoint","clampedPoint","intersect","union","translate","Box3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromObject","object","scope","updateMatrixWorld","traverse","node","geometry","Geometry","vertices","BufferGeometry","attributes","position","stride","InterleavedBufferAttribute","data","intersectsSphere","closestPoint","sphere","intersectsPlane","plane","constant","getBoundingSphere","Sphere","Matrix3","Float32Array","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","setFromMatrix4","applyToVector3Array","j","applyToBuffer","buffer","getX","getY","getZ","setXYZ","determinant","throwOnDegenerate","t11","t12","t13","det","msg","detInv","transpose","tmp","flattenToArrayOffset","getNormalMatrix","matrix4","transposeIntoArray","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","x2","y2","z2","wx","wy","wz","lookAt","eye","up","n","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","getPosition","setPosition","t14","scale","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","compose","decompose","invSX","invSY","invSZ","makeFrustum","left","right","bottom","top","near","far","makePerspective","fov","aspect","ymax","DEG2RAD","ymin","xmin","xmax","makeOrthographic","Ray","origin","direction","ray","recast","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","diff","v0","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","b1","invDet","intersectSphere","tca","d2","radius2","thc","t0","t1","distanceToPlane","denominator","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","Frustum","p0","p1","p2","p3","p4","p5","planes","Plane","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","boundingSphere","computeBoundingSphere","intersectsSprite","sprite","negRadius","d1","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","referencePoint","normalMatrix","Spherical","other","makeSafe","vec3","RAD2DEG","generateUUID","chars","split","uuid","Array","rnd","random","join","mapLinear","a1","a2","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","nearestPowerOfTwo","log","LN2","nextPowerOfTwo","Spline","interpolate","t2","t3","intPoint","weight","w2","w3","pa","pb","pc","pd","v3","initFromArray","getPoint","k","getControlPointsArray","coords","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","chunks","total","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","push","Triangle","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","edgeList","projectedPoint","minDistance","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","values","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","DiscreteInterpolant","LinearInterpolant","offset1","offset0","weight1","weight0","QuaternionLinearInterpolant","Clock","autoStart","startTime","oldTime","elapsedTime","running","performance","Date","now","stop","getElapsedTime","getDelta","newTime","EventDispatcher","type","listener","_listeners","listeners","indexOf","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","Layers","mask","channel","enable","toggle","disable","test","layers","ascSort","intersectObject","raycaster","intersects","recursive","visible","raycast","children","Raycaster","params","Mesh","Line","LOD","Points","threshold","Sprite","PointCloud","linePrecision","setFromCamera","PerspectiveCamera","OrthographicCamera","sort","intersectObjects","objects","isArray","Object3D","onRotationChange","rotation","onQuaternionChange","Object3DIdCount","parent","DefaultUp","modelViewMatrix","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","castShadow","receiveShadow","frustumCulled","renderOrder","userData","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","q1","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","getObjectById","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","updateMatrix","force","toJSON","meta","extractFromCache","cache","metadata","isRootObject","geometries","materials","textures","images","version","generator","JSON","stringify","material","parse","Face3","materialIndex","vertexNormals","vertexColors","BufferAttribute","normalized","dynamic","updateRange","count","needsUpdate","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyIndicesArray","indices","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXY","setXYZW","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Uint16Array","Int32Attribute","Int32Array","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","InstancedBufferAttribute","meshPerAttribute","InterleavedBuffer","InstancedInterleavedBuffer","interleavedBuffer","GeometryIdCount","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","vertex","face","jl","computeBoundingBox","fromBufferGeometry","addFace","normals","tempNormals","uvs","tempUVs","uvs2","tempUVs2","positions","uv","uv2","groups","group","computeFaceNormals","cb","ab","fl","vA","vB","vC","computeVertexNormals","areaWeighted","vl","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","computeTangents","computeLineDistances","merge","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","precisionPoints","precision","faceIndicesToRemove","dupIndex","idx","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","enabled","getNormalIndex","hash","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","parameters","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","kl","dispose","DirectGeometry","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","morphAttributes","drawRange","getIndex","setIndex","addAttribute","getAttribute","removeAttribute","addGroup","clearGroups","setDrawRange","updateFromObject","direct","__directGeometry","lineDistance","fromDirectGeometry","TypeArray","isNaN","pA","pB","pC","normalizeNormals","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","toNonIndexed","geometry2","array2","MaxIndex","InstancedBufferGeometry","maxInstancedCount","instances","Uniform","onUpdate","onUpdateCallback","AnimationAction","_new","mixer","clip","localRoot","_mixer","_clip","_localRoot","tracks","nTracks","interpolants","interpolantSettings","interpolant","createInterpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","loop","_loopCount","_startTime","time","timeScale","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","play","_activateAction","_deactivateAction","reset","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setLoop","mode","setEffectiveWeight","getEffectiveWeight","fadeIn","duration","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","times","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","accuIndex","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","accumulate","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationClip","resetDuration","trim","optimize","track","json","jsonTracks","frameTime","fps","KeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","AnimationUtils","getKeyframeOrder","sortedArray","NumberKeyframeTrack","findByName","objectOrClipArray","clipArray","o","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","animation","bones","nodeName","addNonemptyTrack","trackType","trackName","animationKeys","propertyName","destTracks","flattenJSON","clipName","hierarchyTracks","hierarchy","keys","morphTargetNames","morphTargetName","animationKey","boneName","VectorKeyframeTrack","QuaternionKeyframeTrack","AnimationMixer","root","_initMemoryManager","_accuIndex","clipAction","optionalRoot","rootUuid","clipObject","clipUuid","actionsForClip","_actionsByClip","prototypeAction","existingAction","actionByRoot","knownActions","newAction","_Action","_bindAction","_addInactiveAction","stopAllAction","actions","_actions","nActions","_nActiveActions","bindings","_bindings","nBindings","_nActiveBindings","useCount","apply","uncacheClip","actionsByClip","actionsToRemove","cacheIndex","lastInactiveAction","pop","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","bindingsByRoot","_bindingsByRootAndName","bindingByName","binding","restoreOriginalState","_removeInactiveBinding","uncacheAction","bindingsByName","referenceCount","_addInactiveBinding","path","parsedPath","PropertyMixer","PropertyBinding","ValueTypeName","getValueSize","_lendBinding","saveOriginalState","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","stats","inUse","controlInterpolants","knownActionsForClip","lastKnownAction","byClipCacheIndex","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","propBinding","rootNode","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","AnimationObjectGroup","var_args","_objects","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","bindingsPerObject","nObjects","nCachedObjects","indicesByUUID","paths","parsedPaths","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastIndex","lastObject","last","subscribe_","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","arraySlice","from","to","isTypedArray","subarray","convertArray","forceClone","BYTES_PER_ELEMENT","ArrayBuffer","isView","DataView","compareTime","nValues","srcOffset","jsonKeys","valuePropertyName","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","validate","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","getInterpolation","shift","timeOffset","endTime","nKeys","valid","prevTime","currTime","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","_getTrackTypeForValueTypeName","typeName","toLowerCase","ColorKeyframeTrack","BooleanKeyframeTrack","StringKeyframeTrack","parseTrackName","findNode","getValue","targetArray","setValue","sourceArray","targetObject","objectName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","skeleton","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","dest","Composite","targetGroup","optionalParsedPath","_targetGroup","firstValidIndex","re","matches","results","searchSkeleton","bone","searchNodeSubtree","childNode","subTreeNode","mixFunction","bufferType","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","currentWeight","mix","originalValueOffset","Audio","context","createBufferSource","onended","onEnded","gain","createGain","connect","getInput","autoplay","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","getOutput","setNodeSource","audioNode","setBuffer","audioBuffer","pause","currentTime","disconnect","getFilters","setFilters","getFilter","setFilter","filter","setPlaybackRate","getPlaybackRate","getLoop","getVolume","setVolume","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","AudioContext","webkitAudioContext","PositionalAudio","panner","createPanner","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","AudioListener","destination","removeFilter","getMasterVolume","setMasterVolume","orientation","setOrientation","Camera","matrixWorldInverse","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","options","format","magFilter","minFilter","renderTarget","WebGLRenderTargetCube","updateCubeMap","renderer","scene","generateMipmaps","texture","activeCubeFace","render","setRenderTarget","zoom","view","updateProjectionMatrix","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","cx","cy","zoomW","zoomH","scaleW","scaleH","focus","filmGauge","filmOffset","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","skew","StereoCamera","cameraL","cameraR","eyeRight","eyeLeft","eyeSep","eyeSepOnProjection","Light","intensity","groundColor","decay","penumbra","LightShadow","bias","mapSize","map","AmbientLight","DirectionalLight","shadow","DirectionalLightShadow","light","HemisphereLight","skyColor","PointLight","power","SpotLight","SpotLightShadow","AudioLoader","manager","DefaultLoadingManager","load","url","onLoad","onProgress","onError","loader","XHRLoader","setResponseType","decodeAudioData","Cache","files","file","clear","Loader","onLoadStart","onLoadProgress","onLoadComplete","crossOrigin","extractUrlBase","initMaterials","texturePath","createMaterial","textureLoader","materialLoader","loadTexture","repeat","wrap","anisotropy","fullPath","Handlers","setCrossOrigin","wrapS","wrapT","TextureLoader","MaterialLoader","blending","specular","emissive","shininess","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","emissiveMap","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","lightMap","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","aoMap","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","bumpMap","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","bumpScale","normalMap","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","normalScale","specularMap","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","metalnessMap","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","roughnessMap","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","alphaMap","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","side","opacity","transparent","setTextures","handlers","regex","cached","itemStart","setTimeout","itemEnd","request","XMLHttpRequest","overrideMimeType","open","response","status","itemError","responseType","withCredentials","send","setPath","setWithCredentials","FontLoader","text","substring","font","Font","ImageLoader","image","createElementNS","onload","URL","revokeObjectURL","src","blob","createObjectURL","JSONLoader","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","concat","morphAnimationClips","LoadingManager","isLoading","itemsLoaded","itemsTotal","onStart","BufferGeometryLoader","TYPED_ARRAYS","typedArray","drawcalls","offsets","getTexture","roughness","metalness","uniforms","vertexShader","fragmentShader","shading","alphaTest","depthTest","depthWrite","colorWrite","wireframe","wireframeLinewidth","sizeAttenuation","displacementMap","displacementScale","displacementBias","emissiveIntensity","envMap","combine","reflectivity","lightMapIntensity","aoMapIntensity","ObjectLoader","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","widthSegments","heightSegments","depth","depthSegments","segments","thetaStart","thetaLength","radiusTop","radiusBottom","radialSegments","openEnded","phiStart","phiLength","detail","innerRadius","outerRadius","thetaSegments","phiSegments","tube","tubularSegments","arc","loadImage","parseConstant","Texture","mapping","flipY","getGeometry","getMaterial","Scene","SkinnedMesh","Group","levels","level","addLevel","isJPEG","search","CubeTextureLoader","urls","CubeTexture","DataTextureLoader","BinaryTextureLoader","_parser","DataTexture","texData","mipmaps","mipmapCount","CompressedTextureLoader","texDatas","CompressedTexture","isCubemap","Material","MaterialIdCount","fog","lights","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","clippingPlanes","clipShadows","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","overdraw","_needsUpdate","setValues","newValue","currentValue","isRoot","srcPlanes","dstPlanes","LineBasicMaterial","linewidth","linecap","linejoin","LineDashedMaterial","dashSize","gapSize","MeshBasicMaterial","refractionRatio","wireframeLinecap","wireframeLinejoin","skinning","MeshDepthMaterial","depthPacking","MeshLambertMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","defines","STANDARD","envMapIntensity","MeshPhysicalMaterial","PHYSICAL","clearCoat","clearCoatRoughness","MultiMaterial","PointsMaterial","ShaderMaterial","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","UniformsUtils","RawShaderMaterial","SpriteMaterial","ShadowMaterial","UniformsLib","ShaderChunk","encoding","TextureIdCount","sourceFile","DEFAULT_IMAGE","DEFAULT_MAPPING","premultiplyAlpha","unpackAlignment","getDataURL","canvas","toDataURL","getContext","drawImage","transformUv","DepthTexture","CanvasTexture","VideoTexture","video","requestAnimationFrame","readyState","HAVE_CURRENT_DATA","inverseMatrix","testPoint","rayPointDistanceSq","localThresholdSq","intersectPoint","distanceToRay","localThreshold","LineSegments","precisionSq","vStart","vEnd","interSegment","interRay","step","distSq","faceIndex","nbVertices","drawMode","updateMorphTargets","setDrawMode","morphTargetBase","morphTargetInfluences","morphTargetDictionary","ml","getMorphTargetIndexByName","uvIntersection","uv1","uv3","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","uvA","uvB","uvC","tempA","tempB","tempC","fvA","fvB","fvC","isFaceMaterial","faceMaterial","morphInfluences","tl","influence","targets","uvs_f","Bone","skin","Skeleton","boneInverses","useVertexTexture","identityMatrix","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","pose","offsetMatrix","bindMode","bindMatrix","bindMatrixInverse","gbone","pos","rotq","scl","normalizeSkinWeights","sw","vec","skinWeight","getObjectForDistance","matrixPosition","guessSizeSq","LensFlare","lensFlares","positionScreen","customUpdateCallback","updateLensFlares","flare","vecX","vecY","wantedRotation","background","overrideMaterial","autoUpdate","Fog","FogExp2","density","merged","uniforms_src","uniforms_dst","parameter_src","common","diffuse","offsetRepeat","flipEnvMap","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLights","properties","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","spotShadowMap","spotShadowMatrix","pointLights","pointShadowMap","pointShadowMatrix","hemisphereLights","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","lightPos","getTargetPixelRatio","_currentRenderTarget","_pixelRatio","glClearColor","_premultipliedAlpha","state","clearColor","setDefaultGLState","init","scissor","_currentScissor","_scissor","viewport","_currentViewport","_viewport","_clearColor","_clearAlpha","resetGLState","_currentProgram","_currentCamera","_currentGeometryProgram","_currentMaterialId","onContextLost","preventDefault","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReference","programInfo","program","programCache","releaseProgram","setupVertexAttributes","startIndex","extension","initAttributes","geometryAttributes","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","_gl","FLOAT","UNSIGNED_SHORT","SHORT","UNSIGNED_INT","INT","BYTE","UNSIGNED_BYTE","getAttributeBuffer","enableAttributeAndDivisor","enableAttribute","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","disableUnusedAttributes","absNumericalSort","painterSortStable","reversePainterSortStable","pushRenderItem","transparentObjects","transparentObjectsLastIndex","opaqueObjects","opaqueObjectsLastIndex","renderItem","_vector3","isObjectViewable","_sphere","isSphereViewable","isSpriteViewable","_frustum","numPlanes","_clipping","negRad","projectObject","sprites","ImmediateRenderObject","sortObjects","_projScreenMatrix","groupMaterial","renderObjects","renderList","setMaterial","setProgram","renderBufferImmediate","renderBufferDirect","initMaterial","materialProperties","getParameters","_lights","code","getProgramCode","programChange","shaderID","shader","__webglShader","acquireProgram","numSupportedMorphTargets","maxMorphTargets","numSupportedMorphNormals","maxMorphNormals","numClippingPlanes","uniform","lightsHash","ambient","directional","spot","hemi","progUniforms","getUniforms","uniformsList","WebGLUniforms","seqWithValue","seq","dynamicUniforms","splitDynamic","CULL_FACE","setFlipSided","setBlending","setDepthFunc","setDepthTest","setDepthWrite","setColorWrite","setPolygonOffset","_usedTextureUnits","_clippingEnabled","_localClippingEnabled","useCache","setState","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","useProgram","capabilities","logarithmicDepthBuffer","uCamPos","cameraPosition","setOptional","floatVertexTextures","markUniformsLightsNeedsUpdate","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLine","refreshUniformsDash","refreshUniformsPoints","refreshUniformsLambert","refreshUniformsPhong","refreshUniformsPhysical","refreshUniformsStandard","upload","dynUniforms","evalDynamic","uvScaleMap","WebGLRenderTarget","_canvas","clientHeight","setupShadows","lightShadowsLength","shadows","setupLights","ll","shadowMap","viewMatrix","directionalLength","pointLength","spotLength","hemiLength","lightCache","allocTextureUnit","textureUnit","maxTextures","paramThreeToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","NEAREST","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","DEPTH_COMPONENT","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","_context","_alpha","_depth","_stencil","stencil","_antialias","antialias","_preserveDrawingBuffer","preserveDrawingBuffer","autoClear","autoClearColor","autoClearDepth","autoClearStencil","localClippingEnabled","gammaInput","gammaOutput","physicallyCorrectLights","toneMapping","toneMappingExposure","toneMappingWhitePoint","_currentFramebuffer","_currentScissorTest","_scissorTest","WebGLClipping","_infoRender","calls","info","memory","programs","getShaderPrecisionFormat","rangeMin","rangeMax","WebGLExtensions","WebGLCapabilities","WebGLState","WebGLProperties","WebGLTextures","WebGLObjects","WebGLPrograms","WebGLLights","bufferRenderer","WebGLBufferRenderer","indexedBufferRenderer","WebGLIndexedBufferRenderer","backgroundCamera","backgroundCamera2","backgroundPlaneMesh","PlaneBufferGeometry","backgroundBoxShader","backgroundBoxMesh","BoxBufferGeometry","WebGLShadowMap","spritePlugin","SpritePlugin","lensFlarePlugin","LensFlarePlugin","getContextAttributes","forceContextLoss","loseContext","getMaxAnisotropy","getPrecision","getPixelRatio","setPixelRatio","getSize","updateStyle","setViewport","setScissor","setScissorTest","boolean","getClearColor","setClearColor","getClearAlpha","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearDepth","clearStencil","clearTarget","buffers","hasPositions","createBuffer","hasNormals","hasUvs","hasColors","bufferData","positionArray","DYNAMIC_DRAW","normalArray","nx","ny","nz","uvArray","colorArray","drawArrays","TRIANGLES","updateBuffers","geometryProgram","activeInfluences","getWireframeAttribute","ELEMENT_ARRAY_BUFFER","dataStart","dataCount","rangeStart","rangeCount","groupStart","groupCount","drawStart","drawEnd","drawCount","setLineWidth","setMode","LINES","TRIANGLE_STRIP","TRIANGLE_FAN","lineWidth","LINE_STRIP","POINTS","renderInstances","forceClear","beginShadows","endShadows","updateRenderTargetMipmap","setFaceCulling","cullFace","frontFaceDirection","setCullFace","setTexture2D","warned","slot","setTexture","setTextureCube","setTextureCubeDynamic","getCurrentRenderTarget","__webglFramebuffer","setupRenderTarget","framebuffer","isCube","renderTargetProperties","scissorTest","bindFramebuffer","FRAMEBUFFER","textureProperties","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_CUBE_MAP_POSITIVE_X","__webglTexture","activeMipMapLevel","readRenderTargetPixels","restore","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","depthBuffer","stencilBuffer","depthTexture","drawArraysInstancedANGLE","resetGlobalState","globalState","numGlobalPlanes","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewNormalMatrix","i4","renderingShadows","enableLocalClipping","fromCache","nGlobal","lGlobal","clippingState","drawElements","drawElementsInstancedANGLE","gl","getExtension","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getMaxPrecision","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","_maxPrecision","WebGLGeometries","onGeometryDispose","buffergeometry","_bufferGeometry","deleteAttribute","deleteAttributes","property","bufferproperty","__webglBuffer","deleteBuffer","removeAttributeBuffer","updateAttribute","attributeProperties","updateBuffer","usage","STATIC_DRAW","bufferSubData","edges","checkEdge","list","WebGLProgram","getEncodingComponents","getTexelDecodingFunction","functionName","getTexelEncodingFunction","getToneMappingFunction","toneMappingName","generateExtensions","rendererExtensions","envMapCubeUV","flatShading","filterEmptyLine","generateDefines","fetchAttributeLocations","identifiers","getProgramParameter","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","replaceLightNums","replace","numDirLights","numSpotLights","numPointLights","numHemiLights","parseIncludes","include","unrollLoops","snippet","unroll","programIdCount","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","prefixVertex","prefixFragment","gammaFactorDefine","customExtensions","customDefines","createProgram","supportsVertexTextures","maxBones","doubleSided","flipSided","shadowMapEnabled","useFog","fogExp","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","programLog","getProgramInfoLog","vertexLog","getShaderInfoLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","cachedUniforms","cachedAttributes","destroy","deleteProgram","usedTimes","allocateBones","nVertexUniforms","nVertexMatrices","getTextureEncodingFromMap","gammaOverrideLinear","shaderIDs","parameterNames","nClipPlanes","currentRenderTarget","envMapMode","pl","addLineNumbers","lines","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getDepthMaterial","isPointLight","lightPositionWorld","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","useSkinning","variantIndex","_MorphingFlag","_SkinningFlag","keyA","keyB","materialsForVariant","_materialCache","cachedMaterial","renderSingleSided","renderReverseSided","shadowCamera","_renderList","_state","_lightShadows","_shadowMapSize","_maxShadowMapSize","_lookTarget","_lightPositionWorld","_NumberOfMaterialVariants","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","distanceShader","distanceUniforms","depthMaterial","distanceMaterial","USE_SHADOWMAP","BLEND","faceCount","vpWidth","vpHeight","pars","shadowMatrix","vpDimensions","clearAlpha","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","texImage2D","WebGLColorBuffer","WebGLDepthBuffer","WebGLStencilBuffer","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","compressedTextureFormats","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","currentScissorTest","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","DEPTH_TEST","enableVertexAttribArray","vertexAttribDivisorANGLE","disableVertexAttribArray","getCompressedTextureFormats","formats","COMPRESSED_TEXTURE_FORMATS","blendEquationSeparate","blendFuncSeparate","blendFunc","setMask","setTest","setFunc","setStencilTest","stencilTest","setStencilWrite","stencilWrite","setStencilFunc","stencilFunc","stencilRef","stencilMask","setStencilOp","stencilFail","stencilZFail","stencilZPass","setOp","frontFace","CW","CCW","BACK","FRONT","FRONT_AND_BACK","factor","units","POLYGON_OFFSET_FILL","getScissorTest","SCISSOR_TEST","activeTexture","webglSlot","TEXTURE0","webglType","webglTexture","boundTexture","compressedTexImage2D","setClear","locked","currentColorMask","currentColorClear","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","STENCIL_TEST","stencilOp","clampToMaxSize","maxSize","makePowerOfTwo","HTMLImageElement","HTMLCanvasElement","textureNeedsPowerOfTwo","filterFallback","onTextureDispose","deallocateTexture","_infoMemory","onRenderTargetDispose","deallocateRenderTarget","__image__webglTextureCube","deleteTexture","__webglInit","deleteFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__version","complete","uploadTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","isCompressed","isDataTexture","cubeImage","isPowerOfTwoImage","glFormat","glType","setTextureParameters","mipmap","generateMipmap","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","internalFormat","_isWebGL2","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","setupFrameBufferTexture","attachment","textureTarget","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthTexture","webglDepthTexture","setupDepthRenderbuffer","createRenderbuffer","isTargetPowerOfTwo","createFramebuffer","WebGL2RenderingContext","emptyTexture","emptyCubeTexture","UniformContainer","arrayCacheF32","arrayCacheI32","flatten","nBlocks","blockSize","firstElem","allocTexUnits","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setValueT6","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","getSingularSetter","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","setValueT6a","getPureArraySetter","SingleUniform","activeInfo","PureArrayUniform","StructuredUniform","RePathPart","addUniform","container","uniformObject","parseUniform","pathLength","matchEnd","idIsIndex","subscript","next","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","flares","vertexBuffer","elementBuffer","tempTexture","occlusionTexture","renderType","occlusionMap","screenPosition","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","TEXTURE1","copyTexImage2D","uvOffset","uvScale","fogType","fillStyle","fillRect","spritePosition","spriteRotation","spriteScale","oldFogType","sceneFogType","Face4","LineStrip","LinePieces","MeshFaceMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","addIndex","addDrawCall","indexOffset","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","metal","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","audioLoader","getData","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","Projector","projectVector","unprojectVector","pickingRay","CanvasRenderer","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","h00","h10","h01","h11","SceneUtils","createMultiMaterialObject","detach","attach","ShapeUtils","contour","triangulate","snip","verts","px","py","aX","aY","bX","bY","cX","cY","apx","apy","bpx","bpy","cpx","cpy","cCROSSap","bCROSScp","aCROSSbp","vertIndices","nv","triangulateShape","holes","removeDupEndPts","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","removeHoles","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","shape","prevShapeIdx","nextShapeIdx","insideAngle","hole","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","intersectsHoleEdge","ihIdx","chkHole","hIdx","indepHoles","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","hl","minShapeIndex","counter","h2","forEach","allPointsMap","allpoints","shapeWithoutHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","Curve","getPointAt","getUtoTmapping","getPoints","divisions","getSpacedPoints","lengths","getLengths","cacheArcLengths","current","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","getPointFunc","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","LineCurve","curveLengths","getCurveLengths","lens","cacheLengths","sums","resolution","EllipseCurve","SplineCurve","createPointsGeometry","createGeometry","createSpacedPointsGeometry","generateShapes","createPaths","String","ret","createPath","glyph","glyphs","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","ShapePath","outline","_cachedOutline","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha","shapes","toShapes","Path","currentPoint","fromPoints","aCPx","aCPy","QuadraticBezierCurve","aCP1x","aCP1y","aCP2x","aCP2y","CubicBezierCurve","splineThru","npts","aRadius","aStartAngle","aEndAngle","aClockwise","absarc","absellipse","ellipse","xRadius","yRadius","aRotation","firstPoint","lastPoint","subPaths","currentPath","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","Shape","isPointInsidePolygon","inPt","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","extrude","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","holesPts","extractAllPoints","extractPoints","tangent","point0","point1","point2","point3","twoPi","deltaAngle","samePoints","ArcCurve","LineCurve3","QuadraticBezierCurve3","CubicBezierCurve3","SplineCurve3","CatmullRomCurve3","CubicPoly","pz","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","closed","ClosedSplineCurve3","BoxGeometry","CubeGeometry","calculateVertexCount","calculateIndexCount","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","vertexBufferOffset","uvBufferOffset","numberOfVertices","indexBufferOffset","vertexCount","indexCount","CircleGeometry","CircleBufferGeometry","ii","segment","CylinderBufferGeometry","nbCap","generateTorso","tanTheta","indexRow","halfHeight","indexArray","i3","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","CylinderGeometry","ConeBufferGeometry","ConeGeometry","EdgesGeometry","thresholdAngle","sortFunction","thresholdDot","edge","vert1","vert2","face1","face2","addShapeList","addShape","scalePt2","pt","getBevelVec","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","buildLidFaces","bevelEnabled","layer","vlen","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","ahole","slen1","slen2","f4","shapesOffset","uvgen","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","extrudePts","splineTube","binormal","position2","amount","bevelThickness","bevelSize","curveSegments","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","frames","TubeGeometry","FrenetFrames","shapePoints","reverse","bs","vert","contourMovements","oneHoleMovements","holesMovements","verticesMovements","binormals","indexA","indexB","indexC","indexD","LatheBufferGeometry","base","inverseSegments","n1","n2","LatheGeometry","PlaneGeometry","width_half","height_half","segment_width","segment_height","offset2","RingBufferGeometry","radiusStep","thetaSegmentLevel","RingGeometry","SphereGeometry","SphereBufferGeometry","thetaEnd","verticesRow","v4","TextGeometry","TorusBufferGeometry","TorusGeometry","TorusKnotBufferGeometry","calculatePositionOnCurve","cu","su","quOverP","cs","P1","P2","B","T","N","TorusKnotGeometry","heightScale","taper","NoTaper","ip","jp","uva","uvb","uvc","uvd","grid","numpoints","pos2","tangents","SinusoidalTaper","initialNormal3","smallest","MAX_VALUE","tz","mat","PolyhedronGeometry","prepare","that","azimuth","inclination","make","centroid","azi","correctUV","subdivide","cols","aj","bj","rows","DodecahedronGeometry","IcosahedronGeometry","OctahedronGeometry","TetrahedronGeometry","ParametricGeometry","func","slices","stacks","sliceCount","WireframeGeometry","numEdges","ol","numTris","AxisHelper","ArrowHelper","lineGeometry","coneGeometry","headLength","headWidth","cone","setDirection","setColor","BoxHelper","BoundingBoxHelper","CameraHelper","addLine","addPoint","pointMap","hexFrustum","hexCone","hexUp","hexTarget","hexCross","setPoint","DirectionalLightHelper","lightPlane","targetLine","EdgesHelper","FaceNormalsHelper","nNormals","objGeometry","GridHelper","setColors","HemisphereLightHelper","sphereSize","lightSphere","PointLightHelper","SkeletonHelper","getBoneList","boneList","matrixWorldInv","boneMatrix","SpotLightHelper","vector2","coneLength","coneWidth","VertexNormalsHelper","objPos","objNorm","WireframeHelper","renderCallback","MorphBlendMesh","animationsMap","animationsList","numFrames","startFrame","endFrame","createAnimation","setAnimationWeight","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","morph","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe","ServiceLocator","service","_services","Map","has","_get","receiver","desc","getOwnPropertyDescriptor","getter","_game2","_mouse","_mouse2","_touch","_touch2","_m3scene","_m3scene2","_tween","_tween2","M3Game","_Game","_stats","_stats2","Game","engine","_camera","_animate","_scene","begin","_render","Stats","dom","display","createElement","cssText","Panel","addPanel","showPanel","usedJSHeapSize","jsHeapSizeLimit","devicePixelRatio","textBaseline","fillText","globalAlpha","_mouseEvent","_mouseEvent2","Mouse","_THREE$EventDispatche","_position","onClick","onMouseDown","onMouseMove","onMouseUp","clientX","clientY","CLICK","MOVE","DOWN","UP","MouseEvent","_touchEvent","_touchEvent2","Touch","onEnd","onMove","onCancel","targetTouches","touchEvent","item","debug","START","END","CANCEL","TouchEvent","_scene2","_model","_gridModel","_gridModel2","_tileModel","_cellModel","_tileView","_tileView2","_gridView","_gridView2","_gridController","_gridController2","M3Scene","_Scene","game","setupModels","_this2","gridModel","gridView","randomize","loadTextures","then","createMaterials","createTileViews","_THREE$Scene","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","err","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Model","_onUpdated","_model2","_cellModel2","_tileModel2","GridModel","_Model","seed","_seed","_vector","_simulating","_tilesFalling","_swappedCell1","_swappedCell2","_onTileMoved","_onTileAdded","_onTileRemoved","_onRandomized","_onChecked","_onSwapped","_onSimulated","check","getMatches","fill","endSimulation","removeTile","gravity","movedTile","drop","cell","transformIndexToCellModel","getTileModel","moveTile","onTileFallen","filled","addTile","createRandomTileModel","cell1","cell2","tile1","tile2","swapTiles","swap","onSwapped","setTileModel","beginSimulation","fromCell","toCell","onMoved","movingTile","move","tileModel","removedModel","onRemoved","transformCellModelToIndex","currentCell","getVerticalMatches","getHorizontalMatches","randomTileValue","tile","cells","cursorCellModel","horizontalMatches","verticalMatches","originCellModel","originTileModel","tilesMatch","cellModel","tileModel1","tileModel2","CellModel","TileModel","_value","_cell","_highlight","_onMoved","_onRemoved","_swapTile","_swapMovements","onSwapMovement","onMovedCallback","_view","_view2","TileView","_View","model","MATERIALS","_plane","GEOMETRY","_tweenQueue","_callbackQueue","_outlineMaterial","_outline","onFinished","tween","Tween","onComplete","onTweened","easing","Easing","Quadratic","InOut","nextTween","_material","_sprite","Promise","resolve","reject","IMAGES","toFixed","currentTarget","responseURL","outlineMaterial","outlineMesh","multiplyScale","tile_blue","tile_green","tile_purple","tile_red","tile_yellow","__WEBPACK_AMD_DEFINE_ARRAY__","getTime","timing","navigationStart","TWEEN","_tweens","getAll","removeAll","_object","_valuesStart","_valuesEnd","_valuesStartRepeat","_duration","_repeat","_yoyo","_isPlaying","_reversed","_delayTime","_easingFunction","Linear","_interpolationFunction","Interpolation","_chainedTweens","_onStartCallback","_onStartCallbackFired","_onUpdateCallback","_onCompleteCallback","_onStopCallback","field","stopChainedTweens","numChainedTweens","delay","yoyo","chain","onStop","elapsed","startsWith","In","Out","Cubic","Quartic","Quintic","Sinusoidal","Exponential","Circular","Elastic","Back","Bounce","fn","Utils","Bezier","pw","bn","Bernstein","CatmullRom","fc","Factorial","View","_THREE$Object3D","onUpdated","GridView","_dimensions","onTileAdded","createTileView","dimensions","vFOV","getWorldDimensions","tileView","_tileViews","tileCell","_feature","_feature2","_controller","_controller2","GridController","_Controller","touch","_input","_raycaster","_selected","highlight","swapCells","selected","getIntersects","selectTileView","swapSelectedTiles","docEl","documentElement","util","el","old","navigator","userAgent","pfx","prefixes","prop","ucProp","toUpperCase","substr","Feature","css3Dtransform","cssTransform","cssTransition","querySelectorAll","matchMedia","deviceMotion","deviceOrientation","contextMenu","classList","placeholder","localStorage","setItem","removeItem","historyAPI","history","serviceWorker","viewportUnit","remUnit","svg","createSVGRect","webGL","WebGLRenderingContext","cors","msPointerEnabled","MSGesture","DocumentTouch","async","defer","geolocation","srcset","sizes","pictureElement","testAll","classes","className","feature","Controller","content","locals","mediaQuery","alreadyImportedModules","addStylesToDom","styles","domStyle","stylesInDom","refs","addStyle","listToStyles","newStyles","css","media","sourceMap","part","insertStyleElement","styleElement","head","getHeadElement","lastStyleElementInsertedAtTop","styleElementsInsertedAtTop","insertAt","nextSibling","insertBefore","firstChild","removeStyleElement","parentNode","removeChild","createStyleElement","createLinkElement","linkElement","rel","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","Blob","btoa","updateLink","href","applyToTag","newObj","styleSheet","replaceText","cssNode","createTextNode","childNodes","setAttribute","unescape","encodeURIComponent","oldSrc","memoize","memo","isOldIE","getElementsByTagName","newList","mayRemove","textStore","replacement","Boolean"],"mappings":"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","file":"bundle.1470078875719.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _m3engine = __webpack_require__(2);\n\t\n\tvar _m3engine2 = _interopRequireDefault(_m3engine);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t__webpack_require__(31);\n\t\n\tvar m3engine = new _m3engine2.default();\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _engine = __webpack_require__(3);\n\t\n\tvar _engine2 = _interopRequireDefault(_engine);\n\t\n\tvar _m3game = __webpack_require__(6);\n\t\n\tvar _m3game2 = _interopRequireDefault(_m3game);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar M3Engine = function (_Engine) {\n\t  _inherits(M3Engine, _Engine);\n\t\n\t  function M3Engine() {\n\t    _classCallCheck(this, M3Engine);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(M3Engine).call(this, _m3game2.default));\n\t\n\t    _this.start();\n\t    return _this;\n\t  }\n\t\n\t  return M3Engine;\n\t}(_engine2.default);\n\t\n\texports.default = M3Engine;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _three = __webpack_require__(4);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _serviceLocator = __webpack_require__(5);\n\t\n\tvar _serviceLocator2 = _interopRequireDefault(_serviceLocator);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Engine = function () {\n\t  function Engine(gameClass) {\n\t    _classCallCheck(this, Engine);\n\t\n\t    this._gameClass = gameClass;\n\t    this._renderer = new _three2.default.WebGLRenderer();\n\t    this.isStarted = false;\n\t    this._width = window.innerWidth;\n\t    this._height = window.innerHeight;\n\t    _serviceLocator2.default.provide('Engine', this);\n\t  }\n\t\n\t  _createClass(Engine, [{\n\t    key: 'resize',\n\t    value: function resize() {\n\t      this._width = window.innerWidth;\n\t      this._height = window.innerHeight;\n\t      this._renderer.setSize(this._width, this._height);\n\t      this._game.resize(this._width, this._height);\n\t    }\n\t  }, {\n\t    key: 'start',\n\t    value: function start() {\n\t      if (!this._game) {\n\t        document.body.appendChild(this._renderer.domElement);\n\t        this._game = new this._gameClass(this, this._width, this._height);\n\t        window.addEventListener('resize', this.resize.bind(this));\n\t        this.resize();\n\t        this._game.start();\n\t      }\n\t      this.isStarted = true;\n\t    }\n\t  }, {\n\t    key: 'stop',\n\t    value: function stop() {\n\t      this.isStarted = false;\n\t    }\n\t  }, {\n\t    key: 'renderer',\n\t    get: function get() {\n\t      return this._renderer;\n\t    }\n\t  }]);\n\t\n\t  return Engine;\n\t}();\n\t\n\texports.default = Engine;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;// File:src/Three.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tvar THREE = { REVISION: '79' };\n\t\n\t//\n\t\n\tif ( true ) {\n\t\n\t\t!(__WEBPACK_AMD_DEFINE_FACTORY__ = (THREE), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {\n\t\n\t\tmodule.exports = THREE;\n\t\n\t}\n\t\n\t// Polyfills\n\t\n\tif ( Number.EPSILON === undefined ) {\n\t\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\t\n\t}\n\t\n\t//\n\t\n\tif ( Math.sign === undefined ) {\n\t\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\t\n\t\tMath.sign = function ( x ) {\n\t\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\t\n\t\t};\n\t\n\t}\n\t\n\tif ( Function.prototype.name === undefined ) {\n\t\n\t\t// Missing in IE9-11.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\t\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\t\n\t\t\tget: function () {\n\t\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\t\n\t\t\t}\n\t\n\t\t} );\n\t\n\t}\n\t\n\tif ( Object.assign === undefined ) {\n\t\n\t\t// Missing in IE.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\t\n\t\t( function () {\n\t\n\t\t\tObject.assign = function ( target ) {\n\t\n\t\t\t\t'use strict';\n\t\n\t\t\t\tif ( target === undefined || target === null ) {\n\t\n\t\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar output = Object( target );\n\t\n\t\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\t\n\t\t\t\t\tvar source = arguments[ index ];\n\t\n\t\t\t\t\tif ( source !== undefined && source !== null ) {\n\t\n\t\t\t\t\t\tfor ( var nextKey in source ) {\n\t\n\t\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\t\n\t\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn output;\n\t\n\t\t\t};\n\t\n\t\t} )();\n\t\n\t}\n\t\n\t//\n\t\n\tObject.assign( THREE, {\n\t\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\n\t\n\t\tMOUSE: { LEFT: 0, MIDDLE: 1, RIGHT: 2 },\n\t\n\t\t// GL STATE CONSTANTS\n\t\n\t\tCullFaceNone: 0,\n\t\tCullFaceBack: 1,\n\t\tCullFaceFront: 2,\n\t\tCullFaceFrontBack: 3,\n\t\n\t\tFrontFaceDirectionCW: 0,\n\t\tFrontFaceDirectionCCW: 1,\n\t\n\t\t// SHADOWING TYPES\n\t\n\t\tBasicShadowMap: 0,\n\t\tPCFShadowMap: 1,\n\t\tPCFSoftShadowMap: 2,\n\t\n\t\t// MATERIAL CONSTANTS\n\t\n\t\t// side\n\t\n\t\tFrontSide: 0,\n\t\tBackSide: 1,\n\t\tDoubleSide: 2,\n\t\n\t\t// shading\n\t\n\t\tFlatShading: 1,\n\t\tSmoothShading: 2,\n\t\n\t\t// colors\n\t\n\t\tNoColors: 0,\n\t\tFaceColors: 1,\n\t\tVertexColors: 2,\n\t\n\t\t// blending modes\n\t\n\t\tNoBlending: 0,\n\t\tNormalBlending: 1,\n\t\tAdditiveBlending: 2,\n\t\tSubtractiveBlending: 3,\n\t\tMultiplyBlending: 4,\n\t\tCustomBlending: 5,\n\t\n\t\t// custom blending equations\n\t\t// (numbers start from 100 not to clash with other\n\t\t// mappings to OpenGL constants defined in Texture.js)\n\t\n\t\tAddEquation: 100,\n\t\tSubtractEquation: 101,\n\t\tReverseSubtractEquation: 102,\n\t\tMinEquation: 103,\n\t\tMaxEquation: 104,\n\t\n\t\t// custom blending destination factors\n\t\n\t\tZeroFactor: 200,\n\t\tOneFactor: 201,\n\t\tSrcColorFactor: 202,\n\t\tOneMinusSrcColorFactor: 203,\n\t\tSrcAlphaFactor: 204,\n\t\tOneMinusSrcAlphaFactor: 205,\n\t\tDstAlphaFactor: 206,\n\t\tOneMinusDstAlphaFactor: 207,\n\t\n\t\t// custom blending source factors\n\t\n\t\t//ZeroFactor: 200,\n\t\t//OneFactor: 201,\n\t\t//SrcAlphaFactor: 204,\n\t\t//OneMinusSrcAlphaFactor: 205,\n\t\t//DstAlphaFactor: 206,\n\t\t//OneMinusDstAlphaFactor: 207,\n\t\tDstColorFactor: 208,\n\t\tOneMinusDstColorFactor: 209,\n\t\tSrcAlphaSaturateFactor: 210,\n\t\n\t\t// depth modes\n\t\n\t\tNeverDepth: 0,\n\t\tAlwaysDepth: 1,\n\t\tLessDepth: 2,\n\t\tLessEqualDepth: 3,\n\t\tEqualDepth: 4,\n\t\tGreaterEqualDepth: 5,\n\t\tGreaterDepth: 6,\n\t\tNotEqualDepth: 7,\n\t\n\t\n\t\t// TEXTURE CONSTANTS\n\t\n\t\tMultiplyOperation: 0,\n\t\tMixOperation: 1,\n\t\tAddOperation: 2,\n\t\n\t\t// Tone Mapping modes\n\t\n\t\tNoToneMapping: 0, // do not do any tone mapping, not even exposure (required for special purpose passes.)\n\t\tLinearToneMapping: 1, // only apply exposure.\n\t\tReinhardToneMapping: 2,\n\t\tUncharted2ToneMapping: 3, // John Hable\n\t\tCineonToneMapping: 4, // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\t\n\t\t// Mapping modes\n\t\n\t\tUVMapping: 300,\n\t\n\t\tCubeReflectionMapping: 301,\n\t\tCubeRefractionMapping: 302,\n\t\n\t\tEquirectangularReflectionMapping: 303,\n\t\tEquirectangularRefractionMapping: 304,\n\t\n\t\tSphericalReflectionMapping: 305,\n\t\tCubeUVReflectionMapping: 306,\n\t\tCubeUVRefractionMapping: 307,\n\t\n\t\t// Wrapping modes\n\t\n\t\tRepeatWrapping: 1000,\n\t\tClampToEdgeWrapping: 1001,\n\t\tMirroredRepeatWrapping: 1002,\n\t\n\t\t// Filters\n\t\n\t\tNearestFilter: 1003,\n\t\tNearestMipMapNearestFilter: 1004,\n\t\tNearestMipMapLinearFilter: 1005,\n\t\tLinearFilter: 1006,\n\t\tLinearMipMapNearestFilter: 1007,\n\t\tLinearMipMapLinearFilter: 1008,\n\t\n\t\t// Data types\n\t\n\t\tUnsignedByteType: 1009,\n\t\tByteType: 1010,\n\t\tShortType: 1011,\n\t\tUnsignedShortType: 1012,\n\t\tIntType: 1013,\n\t\tUnsignedIntType: 1014,\n\t\tFloatType: 1015,\n\t\tHalfFloatType: 1025,\n\t\n\t\t// Pixel types\n\t\n\t\t//UnsignedByteType: 1009,\n\t\tUnsignedShort4444Type: 1016,\n\t\tUnsignedShort5551Type: 1017,\n\t\tUnsignedShort565Type: 1018,\n\t\n\t\t// Pixel formats\n\t\n\t\tAlphaFormat: 1019,\n\t\tRGBFormat: 1020,\n\t\tRGBAFormat: 1021,\n\t\tLuminanceFormat: 1022,\n\t\tLuminanceAlphaFormat: 1023,\n\t\t// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\n\t\tRGBEFormat: THREE.RGBAFormat, //1024;\n\t\tDepthFormat: 1026,\n\t\n\t\t// DDS / ST3C Compressed texture formats\n\t\n\t\tRGB_S3TC_DXT1_Format: 2001,\n\t\tRGBA_S3TC_DXT1_Format: 2002,\n\t\tRGBA_S3TC_DXT3_Format: 2003,\n\t\tRGBA_S3TC_DXT5_Format: 2004,\n\t\n\t\t// PVRTC compressed texture formats\n\t\n\t\tRGB_PVRTC_4BPPV1_Format: 2100,\n\t\tRGB_PVRTC_2BPPV1_Format: 2101,\n\t\tRGBA_PVRTC_4BPPV1_Format: 2102,\n\t\tRGBA_PVRTC_2BPPV1_Format: 2103,\n\t\n\t\t// ETC compressed texture formats\n\t\n\t\tRGB_ETC1_Format: 2151,\n\t\n\t\t// Loop styles for AnimationAction\n\t\n\t\tLoopOnce: 2200,\n\t\tLoopRepeat: 2201,\n\t\tLoopPingPong: 2202,\n\t\n\t\t// Interpolation\n\t\n\t\tInterpolateDiscrete: 2300,\n\t\tInterpolateLinear: 2301,\n\t\tInterpolateSmooth: 2302,\n\t\n\t\t// Interpolant ending modes\n\t\n\t\tZeroCurvatureEnding: 2400,\n\t\tZeroSlopeEnding: 2401,\n\t\tWrapAroundEnding: 2402,\n\t\n\t\t// Triangle Draw modes\n\t\n\t\tTrianglesDrawMode: 0,\n\t\tTriangleStripDrawMode: 1,\n\t\tTriangleFanDrawMode: 2,\n\t\n\t\t// Texture Encodings\n\t\n\t\tLinearEncoding: 3000, // No encoding at all.\n\t\tsRGBEncoding: 3001,\n\t\tGammaEncoding: 3007, // uses GAMMA_FACTOR, for backwards compatibility with WebGLRenderer.gammaInput/gammaOutput\n\t\n\t\t// The following Texture Encodings are for RGB-only (no alpha) HDR light emission sources.\n\t\t// These encodings should not specified as output encodings except in rare situations.\n\t\tRGBEEncoding: 3002, // AKA Radiance.\n\t\tLogLuvEncoding: 3003,\n\t\tRGBM7Encoding: 3004,\n\t\tRGBM16Encoding: 3005,\n\t\tRGBDEncoding: 3006, // MaxRange is 256.\n\t\n\t\t// Depth packing strategies\n\t\n\t\tBasicDepthPacking: 3200, // for writing to float textures for high precision or for visualizing results in RGB buffers\n\t\tRGBADepthPacking: 3201 // for packing into RGBA buffers.\n\t\n\t} );\n\t\n\t// File:src/math/Color.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.Color = function ( r, g, b ) {\n\t\n\t\tif ( g === undefined && b === undefined ) {\n\t\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\t\n\t\t}\n\t\n\t\treturn this.setRGB( r, g, b );\n\t\n\t};\n\t\n\tTHREE.Color.prototype = {\n\t\n\t\tconstructor: THREE.Color,\n\t\n\t\tr: 1, g: 1, b: 1,\n\t\n\t\tset: function ( value ) {\n\t\n\t\t\tif ( value instanceof THREE.Color ) {\n\t\n\t\t\t\tthis.copy( value );\n\t\n\t\t\t} else if ( typeof value === 'number' ) {\n\t\n\t\t\t\tthis.setHex( value );\n\t\n\t\t\t} else if ( typeof value === 'string' ) {\n\t\n\t\t\t\tthis.setStyle( value );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetScalar: function ( scalar ) {\n\t\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\t\n\t\t},\n\t\n\t\tsetHex: function ( hex ) {\n\t\n\t\t\thex = Math.floor( hex );\n\t\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetRGB: function ( r, g, b ) {\n\t\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetHSL: function () {\n\t\n\t\t\tfunction hue2rgb( p, q, t ) {\n\t\n\t\t\t\tif ( t < 0 ) t += 1;\n\t\t\t\tif ( t > 1 ) t -= 1;\n\t\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\t\treturn p;\n\t\n\t\t\t}\n\t\n\t\t\treturn function setHSL( h, s, l ) {\n\t\n\t\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\t\th = THREE.Math.euclideanModulo( h, 1 );\n\t\t\t\ts = THREE.Math.clamp( s, 0, 1 );\n\t\t\t\tl = THREE.Math.clamp( l, 0, 1 );\n\t\n\t\t\t\tif ( s === 0 ) {\n\t\n\t\t\t\t\tthis.r = this.g = this.b = l;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\t\tvar q = ( 2 * l ) - p;\n\t\n\t\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tsetStyle: function ( style ) {\n\t\n\t\t\tfunction handleAlpha( string ) {\n\t\n\t\t\t\tif ( string === undefined ) return;\n\t\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\n\t\t\tvar m;\n\t\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\t\n\t\t\t\t// rgb / hsl\n\t\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\t\n\t\t\t\tswitch ( name ) {\n\t\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\t\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\t\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t\t\t\t\t\t\treturn this;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\t\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t\t\t\t\t\t\treturn this;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\t\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\t\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\t\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\t\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\t\n\t\t\t\t// hex color\n\t\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\t\n\t\t\t\tif ( size === 3 ) {\n\t\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t} else if ( size === 6 ) {\n\t\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\t\n\t\t\t\t\treturn this;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( style && style.length > 0 ) {\n\t\n\t\t\t\t// color keywords\n\t\t\t\tvar hex = THREE.ColorKeywords[ style ];\n\t\n\t\t\t\tif ( hex !== undefined ) {\n\t\n\t\t\t\t\t// red\n\t\t\t\t\tthis.setHex( hex );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// unknown color\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\t\n\t\t},\n\t\n\t\tcopy: function ( color ) {\n\t\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\t\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\t\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\t\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\t\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\t\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tconvertGammaToLinear: function () {\n\t\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\t\n\t\t\tthis.r = r * r;\n\t\t\tthis.g = g * g;\n\t\t\tthis.b = b * b;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tconvertLinearToGamma: function () {\n\t\n\t\t\tthis.r = Math.sqrt( this.r );\n\t\t\tthis.g = Math.sqrt( this.g );\n\t\t\tthis.b = Math.sqrt( this.b );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tgetHex: function () {\n\t\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\t\n\t\t},\n\t\n\t\tgetHexString: function () {\n\t\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\t\n\t\t},\n\t\n\t\tgetHSL: function ( optionalTarget ) {\n\t\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\n\t\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\t\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\t\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\t\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\t\n\t\t\tif ( min === max ) {\n\t\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tvar delta = max - min;\n\t\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\t\n\t\t\t\tswitch ( max ) {\n\t\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\t\n\t\t\t\t}\n\t\n\t\t\t\thue /= 6;\n\t\n\t\t\t}\n\t\n\t\t\thsl.h = hue;\n\t\t\thsl.s = saturation;\n\t\t\thsl.l = lightness;\n\t\n\t\t\treturn hsl;\n\t\n\t\t},\n\t\n\t\tgetStyle: function () {\n\t\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\t\n\t\t},\n\t\n\t\toffsetHSL: function ( h, s, l ) {\n\t\n\t\t\tvar hsl = this.getHSL();\n\t\n\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\t\n\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tadd: function ( color ) {\n\t\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\taddColors: function ( color1, color2 ) {\n\t\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\taddScalar: function ( s ) {\n\t\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsub: function( color ) {\n\t\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmultiply: function ( color ) {\n\t\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmultiplyScalar: function ( s ) {\n\t\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tlerp: function ( color, alpha ) {\n\t\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tequals: function ( c ) {\n\t\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\t\n\t\t},\n\t\n\t\tfromArray: function ( array, offset ) {\n\t\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\t\n\t\t\treturn array;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\t\n\t// File:src/math/Quaternion.js\n\t\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\t\n\tTHREE.Quaternion = function ( x, y, z, w ) {\n\t\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\t\n\t};\n\t\n\tTHREE.Quaternion.prototype = {\n\t\n\t\tconstructor: THREE.Quaternion,\n\t\n\t\tget x () {\n\t\n\t\t\treturn this._x;\n\t\n\t\t},\n\t\n\t\tset x ( value ) {\n\t\n\t\t\tthis._x = value;\n\t\t\tthis.onChangeCallback();\n\t\n\t\t},\n\t\n\t\tget y () {\n\t\n\t\t\treturn this._y;\n\t\n\t\t},\n\t\n\t\tset y ( value ) {\n\t\n\t\t\tthis._y = value;\n\t\t\tthis.onChangeCallback();\n\t\n\t\t},\n\t\n\t\tget z () {\n\t\n\t\t\treturn this._z;\n\t\n\t\t},\n\t\n\t\tset z ( value ) {\n\t\n\t\t\tthis._z = value;\n\t\t\tthis.onChangeCallback();\n\t\n\t\t},\n\t\n\t\tget w () {\n\t\n\t\t\treturn this._w;\n\t\n\t\t},\n\t\n\t\tset w ( value ) {\n\t\n\t\t\tthis._w = value;\n\t\t\tthis.onChangeCallback();\n\t\n\t\t},\n\t\n\t\tset: function ( x, y, z, w ) {\n\t\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\t\n\t\t\tthis.onChangeCallback();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\t\n\t\t},\n\t\n\t\tcopy: function ( quaternion ) {\n\t\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\t\n\t\t\tthis.onChangeCallback();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromEuler: function ( euler, update ) {\n\t\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\n\t\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\t\n\t\t\t}\n\t\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\t\n\t\t\tvar c1 = Math.cos( euler._x / 2 );\n\t\t\tvar c2 = Math.cos( euler._y / 2 );\n\t\t\tvar c3 = Math.cos( euler._z / 2 );\n\t\t\tvar s1 = Math.sin( euler._x / 2 );\n\t\t\tvar s2 = Math.sin( euler._y / 2 );\n\t\t\tvar s3 = Math.sin( euler._z / 2 );\n\t\n\t\t\tvar order = euler.order;\n\t\n\t\t\tif ( order === 'XYZ' ) {\n\t\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t\t\t} else if ( order === 'YXZ' ) {\n\t\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t\t\t} else if ( order === 'ZXY' ) {\n\t\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t\t\t} else if ( order === 'ZYX' ) {\n\t\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t\t\t} else if ( order === 'YZX' ) {\n\t\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\n\t\t\t} else if ( order === 'XZY' ) {\n\t\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\n\t\t\t}\n\t\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\t\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\n\t\t\t// assumes axis is normalized\n\t\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\t\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\t\n\t\t\tthis.onChangeCallback();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromRotationMatrix: function ( m ) {\n\t\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t\t\tvar te = m.elements,\n\t\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\t\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\t\n\t\t\tif ( trace > 0 ) {\n\t\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\t\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\t\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\t\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\t\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\t\n\t\t\t} else if ( m22 > m33 ) {\n\t\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\t\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\t\n\t\t\t} else {\n\t\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\t\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\t\n\t\t\t}\n\t\n\t\t\tthis.onChangeCallback();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromUnitVectors: function () {\n\t\n\t\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\t\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\n\t\t\tvar v1, r;\n\t\n\t\t\tvar EPS = 0.000001;\n\t\n\t\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\t\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\n\t\t\t\tr = vFrom.dot( vTo ) + 1;\n\t\n\t\t\t\tif ( r < EPS ) {\n\t\n\t\t\t\t\tr = 0;\n\t\n\t\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\t\n\t\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tv1.crossVectors( vFrom, vTo );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis._x = v1.x;\n\t\t\t\tthis._y = v1.y;\n\t\t\t\tthis._z = v1.z;\n\t\t\t\tthis._w = r;\n\t\n\t\t\t\treturn this.normalize();\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tinverse: function () {\n\t\n\t\t\treturn this.conjugate().normalize();\n\t\n\t\t},\n\t\n\t\tconjugate: function () {\n\t\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\t\n\t\t\tthis.onChangeCallback();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdot: function ( v ) {\n\t\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\n\t\t},\n\t\n\t\tlengthSq: function () {\n\t\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\n\t\t},\n\t\n\t\tlength: function () {\n\t\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\t\n\t\t},\n\t\n\t\tnormalize: function () {\n\t\n\t\t\tvar l = this.length();\n\t\n\t\t\tif ( l === 0 ) {\n\t\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tl = 1 / l;\n\t\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\t\n\t\t\t}\n\t\n\t\t\tthis.onChangeCallback();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmultiply: function ( q, p ) {\n\t\n\t\t\tif ( p !== undefined ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\t\n\t\t\t}\n\t\n\t\t\treturn this.multiplyQuaternions( this, q );\n\t\n\t\t},\n\t\n\t\tpremultiply: function ( q ) {\n\t\n\t\t\treturn this.multiplyQuaternions( q, this );\n\t\n\t\t},\n\t\n\t\tmultiplyQuaternions: function ( a, b ) {\n\t\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\t\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\t\n\t\t\tthis.onChangeCallback();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tslerp: function ( qb, t ) {\n\t\n\t\t\tif ( t === 0 ) return this;\n\t\t\tif ( t === 1 ) return this.copy( qb );\n\t\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\t\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\t\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\t\n\t\t\tif ( cosHalfTheta < 0 ) {\n\t\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\t\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.copy( qb );\n\t\n\t\t\t}\n\t\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\t\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\t\n\t\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\t\n\t\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\t\tthis._z = 0.5 * ( z + this._z );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\t\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\t\n\t\t\tthis.onChangeCallback();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tequals: function ( quaternion ) {\n\t\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\t\n\t\t},\n\t\n\t\tfromArray: function ( array, offset ) {\n\t\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\t\n\t\t\tthis.onChangeCallback();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\t\n\t\t\treturn array;\n\t\n\t\t},\n\t\n\t\tonChange: function ( callback ) {\n\t\n\t\t\tthis.onChangeCallback = callback;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tonChangeCallback: function () {}\n\t\n\t};\n\t\n\tObject.assign( THREE.Quaternion, {\n\t\n\t\tslerp: function( qa, qb, qm, t ) {\n\t\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\t\n\t\t},\n\t\n\t\tslerpFlat: function(\n\t\t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\t\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\t\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\t\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\t\n\t\t\t\tvar s = 1 - t,\n\t\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\t\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\t\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\t\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar tDir = t * dir;\n\t\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\t\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\t\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\t\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/math/Vector2.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\t\n\tTHREE.Vector2 = function ( x, y ) {\n\t\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\n\t};\n\t\n\tTHREE.Vector2.prototype = {\n\t\n\t\tconstructor: THREE.Vector2,\n\t\n\t\tget width() {\n\t\n\t\t\treturn this.x;\n\t\n\t\t},\n\t\n\t\tset width( value ) {\n\t\n\t\t\tthis.x = value;\n\t\n\t\t},\n\t\n\t\tget height() {\n\t\n\t\t\treturn this.y;\n\t\n\t\t},\n\t\n\t\tset height( value ) {\n\t\n\t\t\tthis.y = value;\n\t\n\t\t},\n\t\n\t\t//\n\t\n\t\tset: function ( x, y ) {\n\t\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetScalar: function ( scalar ) {\n\t\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetX: function ( x ) {\n\t\n\t\t\tthis.x = x;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetY: function ( y ) {\n\t\n\t\t\tthis.y = y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetComponent: function ( index, value ) {\n\t\n\t\t\tswitch ( index ) {\n\t\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tgetComponent: function ( index ) {\n\t\n\t\t\tswitch ( index ) {\n\t\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor( this.x, this.y );\n\t\n\t\t},\n\t\n\t\tcopy: function ( v ) {\n\t\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tadd: function ( v, w ) {\n\t\n\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\t\n\t\t\t}\n\t\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\taddScalar: function ( s ) {\n\t\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\taddVectors: function ( a, b ) {\n\t\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\taddScaledVector: function ( v, s ) {\n\t\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsub: function ( v, w ) {\n\t\n\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\t\n\t\t\t}\n\t\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsubScalar: function ( s ) {\n\t\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsubVectors: function ( a, b ) {\n\t\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmultiply: function ( v ) {\n\t\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmultiplyScalar: function ( scalar ) {\n\t\n\t\t\tif ( isFinite( scalar ) ) {\n\t\n\t\t\t\tthis.x *= scalar;\n\t\t\t\tthis.y *= scalar;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.x = 0;\n\t\t\t\tthis.y = 0;\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdivide: function ( v ) {\n\t\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdivideScalar: function ( scalar ) {\n\t\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t\t},\n\t\n\t\tmin: function ( v ) {\n\t\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmax: function ( v ) {\n\t\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclamp: function ( min, max ) {\n\t\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclampScalar: function () {\n\t\n\t\t\tvar min, max;\n\t\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t\t\t\tif ( min === undefined ) {\n\t\n\t\t\t\t\tmin = new THREE.Vector2();\n\t\t\t\t\tmax = new THREE.Vector2();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tmin.set( minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal );\n\t\n\t\t\t\treturn this.clamp( min, max );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tclampLength: function ( min, max ) {\n\t\n\t\t\tvar length = this.length();\n\t\n\t\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\t\n\t\t},\n\t\n\t\tfloor: function () {\n\t\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tceil: function () {\n\t\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tround: function () {\n\t\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\troundToZero: function () {\n\t\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tnegate: function () {\n\t\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdot: function ( v ) {\n\t\n\t\t\treturn this.x * v.x + this.y * v.y;\n\t\n\t\t},\n\t\n\t\tlengthSq: function () {\n\t\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\n\t\t},\n\t\n\t\tlength: function () {\n\t\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\t\n\t\t},\n\t\n\t\tlengthManhattan: function() {\n\t\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\t\n\t\t},\n\t\n\t\tnormalize: function () {\n\t\n\t\t\treturn this.divideScalar( this.length() );\n\t\n\t\t},\n\t\n\t\tangle: function () {\n\t\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\n\t\t\tvar angle = Math.atan2( this.y, this.x );\n\t\n\t\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\t\n\t\t\treturn angle;\n\t\n\t\t},\n\t\n\t\tdistanceTo: function ( v ) {\n\t\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\t\n\t\t},\n\t\n\t\tdistanceToSquared: function ( v ) {\n\t\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\t\n\t\t},\n\t\n\t\tdistanceToManhattan: function ( v ) {\n\t\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\t\n\t\t},\n\t\n\t\tsetLength: function ( length ) {\n\t\n\t\t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t\t},\n\t\n\t\tlerp: function ( v, alpha ) {\n\t\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t\t},\n\t\n\t\tequals: function ( v ) {\n\t\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\t\n\t\t},\n\t\n\t\tfromArray: function ( array, offset ) {\n\t\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\n\t\t\treturn array;\n\t\n\t\t},\n\t\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tindex = index * attribute.itemSize + offset;\n\t\n\t\t\tthis.x = attribute.array[ index ];\n\t\t\tthis.y = attribute.array[ index + 1 ];\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\trotateAround: function ( center, angle ) {\n\t\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\t\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\t\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Vector3.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author *kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\t\n\tTHREE.Vector3 = function ( x, y, z ) {\n\t\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\n\t};\n\t\n\tTHREE.Vector3.prototype = {\n\t\n\t\tconstructor: THREE.Vector3,\n\t\n\t\tset: function ( x, y, z ) {\n\t\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetScalar: function ( scalar ) {\n\t\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetX: function ( x ) {\n\t\n\t\t\tthis.x = x;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetY: function ( y ) {\n\t\n\t\t\tthis.y = y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetZ: function ( z ) {\n\t\n\t\t\tthis.z = z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetComponent: function ( index, value ) {\n\t\n\t\t\tswitch ( index ) {\n\t\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tgetComponent: function ( index ) {\n\t\n\t\t\tswitch ( index ) {\n\t\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\t\n\t\t},\n\t\n\t\tcopy: function ( v ) {\n\t\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tadd: function ( v, w ) {\n\t\n\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\t\n\t\t\t}\n\t\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\taddScalar: function ( s ) {\n\t\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\taddVectors: function ( a, b ) {\n\t\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\taddScaledVector: function ( v, s ) {\n\t\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsub: function ( v, w ) {\n\t\n\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\t\n\t\t\t}\n\t\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsubScalar: function ( s ) {\n\t\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsubVectors: function ( a, b ) {\n\t\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmultiply: function ( v, w ) {\n\t\n\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\t\n\t\t\t}\n\t\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmultiplyScalar: function ( scalar ) {\n\t\n\t\t\tif ( isFinite( scalar ) ) {\n\t\n\t\t\t\tthis.x *= scalar;\n\t\t\t\tthis.y *= scalar;\n\t\t\t\tthis.z *= scalar;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.x = 0;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmultiplyVectors: function ( a, b ) {\n\t\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tapplyEuler: function () {\n\t\n\t\t\tvar quaternion;\n\t\n\t\t\treturn function applyEuler( euler ) {\n\t\n\t\t\t\tif ( euler instanceof THREE.Euler === false ) {\n\t\n\t\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\t\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tapplyAxisAngle: function () {\n\t\n\t\t\tvar quaternion;\n\t\n\t\t\treturn function applyAxisAngle( axis, angle ) {\n\t\n\t\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\t\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tapplyMatrix3: function ( m ) {\n\t\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\t\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tapplyMatrix4: function ( m ) {\n\t\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\t\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tapplyProjection: function ( m ) {\n\t\n\t\t\t// input: THREE.Matrix4 projection matrix\n\t\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\t\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tapplyQuaternion: function ( q ) {\n\t\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\t\n\t\t\t// calculate quat * vector\n\t\n\t\t\tvar ix =  qw * x + qy * z - qz * y;\n\t\t\tvar iy =  qw * y + qz * x - qx * z;\n\t\t\tvar iz =  qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\t\n\t\t\t// calculate result * inverse quat\n\t\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tproject: function () {\n\t\n\t\t\tvar matrix;\n\t\n\t\t\treturn function project( camera ) {\n\t\n\t\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\t\n\t\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\t\treturn this.applyProjection( matrix );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tunproject: function () {\n\t\n\t\t\tvar matrix;\n\t\n\t\t\treturn function unproject( camera ) {\n\t\n\t\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\t\n\t\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\t\treturn this.applyProjection( matrix );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\ttransformDirection: function ( m ) {\n\t\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\t\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\t\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\t\n\t\t\treturn this.normalize();\n\t\n\t\t},\n\t\n\t\tdivide: function ( v ) {\n\t\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdivideScalar: function ( scalar ) {\n\t\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t\t},\n\t\n\t\tmin: function ( v ) {\n\t\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmax: function ( v ) {\n\t\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclamp: function ( min, max ) {\n\t\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclampScalar: function () {\n\t\n\t\t\tvar min, max;\n\t\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t\t\t\tif ( min === undefined ) {\n\t\n\t\t\t\t\tmin = new THREE.Vector3();\n\t\t\t\t\tmax = new THREE.Vector3();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal );\n\t\n\t\t\t\treturn this.clamp( min, max );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tclampLength: function ( min, max ) {\n\t\n\t\t\tvar length = this.length();\n\t\n\t\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\t\n\t\t},\n\t\n\t\tfloor: function () {\n\t\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tceil: function () {\n\t\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tround: function () {\n\t\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\troundToZero: function () {\n\t\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tnegate: function () {\n\t\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdot: function ( v ) {\n\t\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\n\t\t},\n\t\n\t\tlengthSq: function () {\n\t\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\n\t\t},\n\t\n\t\tlength: function () {\n\t\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\t\n\t\t},\n\t\n\t\tlengthManhattan: function () {\n\t\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\t\n\t\t},\n\t\n\t\tnormalize: function () {\n\t\n\t\t\treturn this.divideScalar( this.length() );\n\t\n\t\t},\n\t\n\t\tsetLength: function ( length ) {\n\t\n\t\t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t\t},\n\t\n\t\tlerp: function ( v, alpha ) {\n\t\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t\t},\n\t\n\t\tcross: function ( v, w ) {\n\t\n\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\t\n\t\t\t}\n\t\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\n\t\t\tthis.x = y * v.z - z * v.y;\n\t\t\tthis.y = z * v.x - x * v.z;\n\t\t\tthis.z = x * v.y - y * v.x;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcrossVectors: function ( a, b ) {\n\t\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\t\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tprojectOnVector: function ( vector ) {\n\t\n\t\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\t\t\n\t\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\t\t\n\t\t},\n\t\n\t\tprojectOnPlane: function () {\n\t\n\t\t\tvar v1;\n\t\n\t\t\treturn function projectOnPlane( planeNormal ) {\n\t\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\n\t\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\t\n\t\t\t\treturn this.sub( v1 );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\treflect: function () {\n\t\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\t\n\t\t\tvar v1;\n\t\n\t\t\treturn function reflect( normal ) {\n\t\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\n\t\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tangleTo: function ( v ) {\n\t\n\t\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\t\n\t\t\t// clamp, to handle numerical problems\n\t\n\t\t\treturn Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );\n\t\n\t\t},\n\t\n\t\tdistanceTo: function ( v ) {\n\t\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\t\n\t\t},\n\t\n\t\tdistanceToSquared: function ( v ) {\n\t\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\t\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\n\t\t},\n\t\n\t\tdistanceToManhattan: function ( v ) {\n\t\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\t\n\t\t},\n\t\n\t\tsetFromSpherical: function( s ) {\n\t\n\t\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\t\n\t\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t\t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromMatrixPosition: function ( m ) {\n\t\n\t\t\treturn this.setFromMatrixColumn( m, 3 );\n\t\n\t\t},\n\t\n\t\tsetFromMatrixScale: function ( m ) {\n\t\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\t\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\t\n\t\t\tif ( typeof m === 'number' ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n\t\t\t\tvar temp = m\n\t\t\t\tm = index;\n\t\t\t\tindex = temp;\n\t\n\t\t\t}\n\t\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\t\n\t\t},\n\t\n\t\tequals: function ( v ) {\n\t\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\t\n\t\t},\n\t\n\t\tfromArray: function ( array, offset ) {\n\t\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\n\t\t\treturn array;\n\t\n\t\t},\n\t\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tindex = index * attribute.itemSize + offset;\n\t\n\t\t\tthis.x = attribute.array[ index ];\n\t\t\tthis.y = attribute.array[ index + 1 ];\n\t\t\tthis.z = attribute.array[ index + 2 ];\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Vector4.js\n\t\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\t\n\tTHREE.Vector4 = function ( x, y, z, w ) {\n\t\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\t\n\t};\n\t\n\tTHREE.Vector4.prototype = {\n\t\n\t\tconstructor: THREE.Vector4,\n\t\n\t\tset: function ( x, y, z, w ) {\n\t\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetScalar: function ( scalar ) {\n\t\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetX: function ( x ) {\n\t\n\t\t\tthis.x = x;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetY: function ( y ) {\n\t\n\t\t\tthis.y = y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetZ: function ( z ) {\n\t\n\t\t\tthis.z = z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetW: function ( w ) {\n\t\n\t\t\tthis.w = w;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetComponent: function ( index, value ) {\n\t\n\t\t\tswitch ( index ) {\n\t\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tgetComponent: function ( index ) {\n\t\n\t\t\tswitch ( index ) {\n\t\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\t\n\t\t},\n\t\n\t\tcopy: function ( v ) {\n\t\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tadd: function ( v, w ) {\n\t\n\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\t\n\t\t\t}\n\t\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\taddScalar: function ( s ) {\n\t\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\taddVectors: function ( a, b ) {\n\t\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\taddScaledVector: function ( v, s ) {\n\t\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsub: function ( v, w ) {\n\t\n\t\t\tif ( w !== undefined ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\t\n\t\t\t}\n\t\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsubScalar: function ( s ) {\n\t\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsubVectors: function ( a, b ) {\n\t\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmultiplyScalar: function ( scalar ) {\n\t\n\t\t\tif ( isFinite( scalar ) ) {\n\t\n\t\t\t\tthis.x *= scalar;\n\t\t\t\tthis.y *= scalar;\n\t\t\t\tthis.z *= scalar;\n\t\t\t\tthis.w *= scalar;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.x = 0;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t\tthis.w = 0;\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tapplyMatrix4: function ( m ) {\n\t\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\t\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdivideScalar: function ( scalar ) {\n\t\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\t\n\t\t},\n\t\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\t\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\n\t\t\t// q is assumed to be normalized\n\t\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\t\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\t\n\t\t\tif ( s < 0.0001 ) {\n\t\n\t\t\t\t this.x = 1;\n\t\t\t\t this.y = 0;\n\t\t\t\t this.z = 0;\n\t\n\t\t\t} else {\n\t\n\t\t\t\t this.x = q.x / s;\n\t\t\t\t this.y = q.y / s;\n\t\t\t\t this.z = q.z / s;\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\t\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\t\n\t\t\t\tte = m.elements,\n\t\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\t\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\t\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\t\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\t\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\t\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// otherwise this singularity is angle = 180\n\t\n\t\t\t\tangle = Math.PI;\n\t\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\t\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\t\n\t\t\t\t\t// m11 is the largest diagonal term\n\t\n\t\t\t\t\tif ( xx < epsilon ) {\n\t\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( yy > zz ) {\n\t\n\t\t\t\t\t// m22 is the largest diagonal term\n\t\n\t\t\t\t\tif ( yy < epsilon ) {\n\t\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\n\t\t\t\t\tif ( zz < epsilon ) {\n\t\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.set( x, y, z, angle );\n\t\n\t\t\t\treturn this; // return 180 deg rotation\n\t\n\t\t\t}\n\t\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\t\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\t\n\t\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\t\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\t\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmin: function ( v ) {\n\t\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmax: function ( v ) {\n\t\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclamp: function ( min, max ) {\n\t\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\t\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclampScalar: function () {\n\t\n\t\t\tvar min, max;\n\t\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\t\n\t\t\t\tif ( min === undefined ) {\n\t\n\t\t\t\t\tmin = new THREE.Vector4();\n\t\t\t\t\tmax = new THREE.Vector4();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\t\n\t\t\t\treturn this.clamp( min, max );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tfloor: function () {\n\t\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tceil: function () {\n\t\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tround: function () {\n\t\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\troundToZero: function () {\n\t\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tnegate: function () {\n\t\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdot: function ( v ) {\n\t\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\n\t\t},\n\t\n\t\tlengthSq: function () {\n\t\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\n\t\t},\n\t\n\t\tlength: function () {\n\t\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\t\n\t\t},\n\t\n\t\tlengthManhattan: function () {\n\t\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\t\n\t\t},\n\t\n\t\tnormalize: function () {\n\t\n\t\t\treturn this.divideScalar( this.length() );\n\t\n\t\t},\n\t\n\t\tsetLength: function ( length ) {\n\t\n\t\t\treturn this.multiplyScalar( length / this.length() );\n\t\n\t\t},\n\t\n\t\tlerp: function ( v, alpha ) {\n\t\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\t\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\t\n\t\t},\n\t\n\t\tequals: function ( v ) {\n\t\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\t\n\t\t},\n\t\n\t\tfromArray: function ( array, offset ) {\n\t\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\t\n\t\t\treturn array;\n\t\n\t\t},\n\t\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\t\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tindex = index * attribute.itemSize + offset;\n\t\n\t\t\tthis.x = attribute.array[ index ];\n\t\t\tthis.y = attribute.array[ index + 1 ];\n\t\t\tthis.z = attribute.array[ index + 2 ];\n\t\t\tthis.w = attribute.array[ index + 3 ];\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Euler.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\t\n\tTHREE.Euler = function ( x, y, z, order ) {\n\t\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || THREE.Euler.DefaultOrder;\n\t\n\t};\n\t\n\tTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\t\n\tTHREE.Euler.DefaultOrder = 'XYZ';\n\t\n\tTHREE.Euler.prototype = {\n\t\n\t\tconstructor: THREE.Euler,\n\t\n\t\tget x () {\n\t\n\t\t\treturn this._x;\n\t\n\t\t},\n\t\n\t\tset x ( value ) {\n\t\n\t\t\tthis._x = value;\n\t\t\tthis.onChangeCallback();\n\t\n\t\t},\n\t\n\t\tget y () {\n\t\n\t\t\treturn this._y;\n\t\n\t\t},\n\t\n\t\tset y ( value ) {\n\t\n\t\t\tthis._y = value;\n\t\t\tthis.onChangeCallback();\n\t\n\t\t},\n\t\n\t\tget z () {\n\t\n\t\t\treturn this._z;\n\t\n\t\t},\n\t\n\t\tset z ( value ) {\n\t\n\t\t\tthis._z = value;\n\t\t\tthis.onChangeCallback();\n\t\n\t\t},\n\t\n\t\tget order () {\n\t\n\t\t\treturn this._order;\n\t\n\t\t},\n\t\n\t\tset order ( value ) {\n\t\n\t\t\tthis._order = value;\n\t\t\tthis.onChangeCallback();\n\t\n\t\t},\n\t\n\t\tset: function ( x, y, z, order ) {\n\t\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\t\n\t\t\tthis.onChangeCallback();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\t\n\t\t},\n\t\n\t\tcopy: function ( euler ) {\n\t\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\t\n\t\t\tthis.onChangeCallback();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\t\n\t\t\tvar clamp = THREE.Math.clamp;\n\t\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\t\n\t\t\torder = order || this._order;\n\t\n\t\t\tif ( order === 'XYZ' ) {\n\t\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\t\n\t\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\t\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( order === 'YXZ' ) {\n\t\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\t\n\t\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\t\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( order === 'ZXY' ) {\n\t\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\t\n\t\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\t\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( order === 'ZYX' ) {\n\t\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\t\n\t\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\t\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( order === 'YZX' ) {\n\t\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\t\n\t\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\t\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( order === 'XZY' ) {\n\t\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\t\n\t\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\t\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\t\n\t\t\t}\n\t\n\t\t\tthis._order = order;\n\t\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromQuaternion: function () {\n\t\n\t\t\tvar matrix;\n\t\n\t\t\treturn function setFromQuaternion( q, order, update ) {\n\t\n\t\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\t\n\t\t\t\tmatrix.makeRotationFromQuaternion( q );\n\t\n\t\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tsetFromVector3: function ( v, order ) {\n\t\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\t\n\t\t},\n\t\n\t\treorder: function () {\n\t\n\t\t\t// WARNING: this discards revolution information -bhouston\n\t\n\t\t\tvar q = new THREE.Quaternion();\n\t\n\t\t\treturn function reorder( newOrder ) {\n\t\n\t\t\t\tq.setFromEuler( this );\n\t\t\t\t\n\t\t\t\treturn this.setFromQuaternion( q, newOrder );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tequals: function ( euler ) {\n\t\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\t\n\t\t},\n\t\n\t\tfromArray: function ( array ) {\n\t\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\t\n\t\t\tthis.onChangeCallback();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\t\n\t\t\treturn array;\n\t\n\t\t},\n\t\n\t\ttoVector3: function ( optionalResult ) {\n\t\n\t\t\tif ( optionalResult ) {\n\t\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\t\n\t\t\t} else {\n\t\n\t\t\t\treturn new THREE.Vector3( this._x, this._y, this._z );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tonChange: function ( callback ) {\n\t\n\t\t\tthis.onChangeCallback = callback;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tonChangeCallback: function () {}\n\t\n\t};\n\t\n\t// File:src/math/Line3.js\n\t\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\t\n\tTHREE.Line3 = function ( start, end ) {\n\t\n\t\tthis.start = ( start !== undefined ) ? start : new THREE.Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new THREE.Vector3();\n\t\n\t};\n\t\n\tTHREE.Line3.prototype = {\n\t\n\t\tconstructor: THREE.Line3,\n\t\n\t\tset: function ( start, end ) {\n\t\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( line ) {\n\t\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcenter: function ( optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\t\n\t\t},\n\t\n\t\tdelta: function ( optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.subVectors( this.end, this.start );\n\t\n\t\t},\n\t\n\t\tdistanceSq: function () {\n\t\n\t\t\treturn this.start.distanceToSquared( this.end );\n\t\n\t\t},\n\t\n\t\tdistance: function () {\n\t\n\t\t\treturn this.start.distanceTo( this.end );\n\t\n\t\t},\n\t\n\t\tat: function ( t, optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\t\n\t\t},\n\t\n\t\tclosestPointToPointParameter: function () {\n\t\n\t\t\tvar startP = new THREE.Vector3();\n\t\t\tvar startEnd = new THREE.Vector3();\n\t\n\t\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\t\n\t\t\t\tstartP.subVectors( point, this.start );\n\t\t\t\tstartEnd.subVectors( this.end, this.start );\n\t\n\t\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\t\n\t\t\t\tvar t = startEnd_startP / startEnd2;\n\t\n\t\t\t\tif ( clampToLine ) {\n\t\n\t\t\t\t\tt = THREE.Math.clamp( t, 0, 1 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn t;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\t\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\t\n\t\t},\n\t\n\t\tapplyMatrix4: function ( matrix ) {\n\t\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tequals: function ( line ) {\n\t\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Box2.js\n\t\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\t\n\tTHREE.Box2 = function ( min, max ) {\n\t\n\t\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );\n\t\n\t};\n\t\n\tTHREE.Box2.prototype = {\n\t\n\t\tconstructor: THREE.Box2,\n\t\n\t\tset: function ( min, max ) {\n\t\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromPoints: function ( points ) {\n\t\n\t\t\tthis.makeEmpty();\n\t\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromCenterAndSize: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector2();\n\t\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\t\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( box ) {\n\t\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmakeEmpty: function () {\n\t\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tisEmpty: function () {\n\t\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\t\n\t\t},\n\t\n\t\tcenter: function ( optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\t\n\t\t},\n\t\n\t\tsize: function ( optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\t\treturn result.subVectors( this.max, this.min );\n\t\n\t\t},\n\t\n\t\texpandByPoint: function ( point ) {\n\t\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\texpandByVector: function ( vector ) {\n\t\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\texpandByScalar: function ( scalar ) {\n\t\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcontainsPoint: function ( point ) {\n\t\n\t\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t\t     point.y < this.min.y || point.y > this.max.y ) {\n\t\n\t\t\t\treturn false;\n\t\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\n\t\t},\n\t\n\t\tcontainsBox: function ( box ) {\n\t\n\t\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t}\n\t\n\t\t\treturn false;\n\t\n\t\t},\n\t\n\t\tgetParameter: function ( point, optionalTarget ) {\n\t\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\n\t\t\treturn result.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\t\n\t\t},\n\t\n\t\tintersectsBox: function ( box ) {\n\t\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\n\t\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\t\n\t\t\t\treturn false;\n\t\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\n\t\t},\n\t\n\t\tclampPoint: function ( point, optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\n\t\n\t\t},\n\t\n\t\tdistanceToPoint: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector2();\n\t\n\t\t\treturn function distanceToPoint( point ) {\n\t\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tintersect: function ( box ) {\n\t\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tunion: function ( box ) {\n\t\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\ttranslate: function ( offset ) {\n\t\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tequals: function ( box ) {\n\t\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Box3.js\n\t\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\t\n\tTHREE.Box3 = function ( min, max ) {\n\t\n\t\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );\n\t\n\t};\n\t\n\tTHREE.Box3.prototype = {\n\t\n\t\tconstructor: THREE.Box3,\n\t\n\t\tset: function ( min, max ) {\n\t\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromArray: function ( array ) {\n\t\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\t\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\t\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\t\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\t\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( z < minZ ) minZ = z;\n\t\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\t\t\t\tif ( z > maxZ ) maxZ = z;\n\t\n\t\t\t}\n\t\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\t\n\t\t},\n\t\n\t\tsetFromPoints: function ( points ) {\n\t\n\t\t\tthis.makeEmpty();\n\t\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromCenterAndSize: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3();\n\t\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\t\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tsetFromObject: function () {\n\t\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\t\n\t\t\tvar v1 = new THREE.Vector3();\n\t\n\t\t\treturn function setFromObject( object ) {\n\t\n\t\t\t\tvar scope = this;\n\t\n\t\t\t\tobject.updateMatrixWorld( true );\n\t\n\t\t\t\tthis.makeEmpty();\n\t\n\t\t\t\tobject.traverse( function ( node ) {\n\t\n\t\t\t\t\tvar geometry = node.geometry;\n\t\n\t\t\t\t\tif ( geometry !== undefined ) {\n\t\n\t\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\t\t\t\tvar vertices = geometry.vertices;\n\t\n\t\t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\t\n\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\t\n\t\t\t\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t\t\t\t\t\t\t\tvar array, offset, stride;\n\t\n\t\t\t\t\t\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\t\n\t\t\t\t\t\t\t\t\tarray = attribute.data.array;\n\t\t\t\t\t\t\t\t\toffset = attribute.offset;\n\t\t\t\t\t\t\t\t\tstride = attribute.data.stride;\n\t\n\t\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\tarray = attribute.array;\n\t\t\t\t\t\t\t\t\toffset = 0;\n\t\t\t\t\t\t\t\t\tstride = 3;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tfor ( var i = offset, il = array.length; i < il; i += stride ) {\n\t\n\t\t\t\t\t\t\t\t\tv1.fromArray( array, i );\n\t\t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\t\n\t\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( box ) {\n\t\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmakeEmpty: function () {\n\t\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tisEmpty: function () {\n\t\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\t\n\t\t},\n\t\n\t\tcenter: function ( optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\t\n\t\t},\n\t\n\t\tsize: function ( optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.subVectors( this.max, this.min );\n\t\n\t\t},\n\t\n\t\texpandByPoint: function ( point ) {\n\t\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\texpandByVector: function ( vector ) {\n\t\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\texpandByScalar: function ( scalar ) {\n\t\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcontainsPoint: function ( point ) {\n\t\n\t\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n\t\t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\t\n\t\t\t\treturn false;\n\t\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\n\t\t},\n\t\n\t\tcontainsBox: function ( box ) {\n\t\n\t\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n\t\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t}\n\t\n\t\t\treturn false;\n\t\n\t\t},\n\t\n\t\tgetParameter: function ( point, optionalTarget ) {\n\t\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\n\t\t\treturn result.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\t\n\t\t},\n\t\n\t\tintersectsBox: function ( box ) {\n\t\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\n\t\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\t\n\t\t\t\treturn false;\n\t\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\n\t\t},\n\t\n\t\tintersectsSphere: ( function () {\n\t\n\t\t\tvar closestPoint;\n\t\n\t\t\treturn function intersectsSphere( sphere ) {\n\t\n\t\t\t\tif ( closestPoint === undefined ) closestPoint = new THREE.Vector3();\n\t\n\t\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\t\n\t\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\t\n\t\t\t};\n\t\n\t\t} )(),\n\t\n\t\tintersectsPlane: function ( plane ) {\n\t\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\n\t\t\tvar min, max;\n\t\n\t\t\tif ( plane.normal.x > 0 ) {\n\t\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\n\t\t\t}\n\t\n\t\t\tif ( plane.normal.y > 0 ) {\n\t\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\n\t\t\t}\n\t\n\t\t\tif ( plane.normal.z > 0 ) {\n\t\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\n\t\t\t}\n\t\n\t\t\treturn ( min <= plane.constant && max >= plane.constant );\n\t\n\t\t},\n\t\n\t\tclampPoint: function ( point, optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\n\t\n\t\t},\n\t\n\t\tdistanceToPoint: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3();\n\t\n\t\t\treturn function distanceToPoint( point ) {\n\t\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tgetBoundingSphere: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3();\n\t\n\t\t\treturn function getBoundingSphere( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new THREE.Sphere();\n\t\n\t\t\t\tresult.center = this.center();\n\t\t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\t\n\t\t\t\treturn result;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tintersect: function ( box ) {\n\t\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\t\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif( this.isEmpty() ) this.makeEmpty();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tunion: function ( box ) {\n\t\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tapplyMatrix4: function () {\n\t\n\t\t\tvar points = [\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3()\n\t\t\t];\n\t\n\t\t\treturn function applyMatrix4( matrix ) {\n\t\n\t\t\t\t// transform of empty box is an empty box.\n\t\t\t\tif( this.isEmpty() ) return this;\n\t\n\t\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\t\n\t\t\t\tthis.setFromPoints( points );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\ttranslate: function ( offset ) {\n\t\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tequals: function ( box ) {\n\t\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Matrix3.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\t\n\tTHREE.Matrix3 = function () {\n\t\n\t\tthis.elements = new Float32Array( [\n\t\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\t\n\t\t] );\n\t\n\t\tif ( arguments.length > 0 ) {\n\t\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.Matrix3.prototype = {\n\t\n\t\tconstructor: THREE.Matrix3,\n\t\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\t\n\t\t\tvar te = this.elements;\n\t\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tidentity: function () {\n\t\n\t\t\tthis.set(\n\t\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\t\n\t\t\t);\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\t\n\t\t},\n\t\n\t\tcopy: function ( m ) {\n\t\n\t\t\tvar me = m.elements;\n\t\n\t\t\tthis.set(\n\t\n\t\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n\t\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n\t\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\t\n\t\t\t);\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromMatrix4: function( m ) {\n\t\n\t\t\tvar me = m.elements;\n\t\n\t\t\tthis.set(\n\t\n\t\t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\t\n\t\t\t);\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tapplyToVector3Array: function () {\n\t\n\t\t\tvar v1;\n\t\n\t\t\treturn function applyToVector3Array( array, offset, length ) {\n\t\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\tif ( length === undefined ) length = array.length;\n\t\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\t\n\t\t\t\t\tv1.fromArray( array, j );\n\t\t\t\t\tv1.applyMatrix3( this );\n\t\t\t\t\tv1.toArray( array, j );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn array;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tapplyToBuffer: function () {\n\t\n\t\t\tvar v1;\n\t\n\t\t\treturn function applyToBuffer( buffer, offset, length ) {\n\t\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\t\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\t\n\t\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\t\tv1.z = buffer.getZ( j );\n\t\n\t\t\t\t\tv1.applyMatrix3( this );\n\t\n\t\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn buffer;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tmultiplyScalar: function ( s ) {\n\t\n\t\t\tvar te = this.elements;\n\t\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdeterminant: function () {\n\t\n\t\t\tvar te = this.elements;\n\t\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\t\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\n\t\t},\n\t\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\t\n\t\t\tif ( matrix instanceof THREE.Matrix4 ) {\n\t\n\t\t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\t\n\t\t\t}\n\t\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\t\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\t\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\n\t\t\tif ( det === 0 ) {\n\t\n\t\t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\t\n\t\t\t\tif ( throwOnDegenerate || false ) {\n\t\n\t\t\t\t\tthrow new Error( msg );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tconsole.warn( msg );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this.identity();\n\t\t\t}\n\t\t\t\n\t\t\tvar detInv = 1 / det;\n\t\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\t\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\t\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\ttranspose: function () {\n\t\n\t\t\tvar tmp, m = this.elements;\n\t\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\t\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\t\"- just use .toArray instead.\" );\n\t\n\t\t\treturn this.toArray( array, offset );\n\t\n\t\t},\n\t\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\t\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\t\n\t\t},\n\t\n\t\ttransposeIntoArray: function ( r ) {\n\t\n\t\t\tvar m = this.elements;\n\t\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tfromArray: function ( array ) {\n\t\n\t\t\tthis.elements.set( array );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tvar te = this.elements;\n\t\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\n\t\t\treturn array;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Matrix4.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\t\n\tTHREE.Matrix4 = function () {\n\t\n\t\tthis.elements = new Float32Array( [\n\t\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\t\n\t\t] );\n\t\n\t\tif ( arguments.length > 0 ) {\n\t\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.Matrix4.prototype = {\n\t\n\t\tconstructor: THREE.Matrix4,\n\t\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\t\n\t\t\tvar te = this.elements;\n\t\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tidentity: function () {\n\t\n\t\t\tthis.set(\n\t\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\t\n\t\t\t);\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new THREE.Matrix4().fromArray( this.elements );\n\t\n\t\t},\n\t\n\t\tcopy: function ( m ) {\n\t\n\t\t\tthis.elements.set( m.elements );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcopyPosition: function ( m ) {\n\t\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\t\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\t\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\t\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0,       0,       0,       1\n\t\t\t);\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\textractRotation: function () {\n\t\n\t\t\tvar v1;\n\t\n\t\t\treturn function extractRotation( m ) {\n\t\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\n\t\t\t\tvar te = this.elements;\n\t\t\t\tvar me = m.elements;\n\t\n\t\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\t\n\t\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\n\t\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\n\t\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tmakeRotationFromEuler: function ( euler ) {\n\t\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\n\t\n\t\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\t\n\t\t\t}\n\t\n\t\t\tvar te = this.elements;\n\t\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\t\n\t\t\tif ( euler.order === 'XYZ' ) {\n\t\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\t\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\t\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\t\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\t\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\t\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\t\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\t\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\t\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\t\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\t\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\t\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\t\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\t\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\t\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\t\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\t\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\t\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\t\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\t\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\t\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\t\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\t\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\t\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\t\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\t\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\t\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\t\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\t\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\t\n\t\t\t}\n\t\n\t\t\t// last column\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\t\n\t\t\t// bottom row\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\t\n\t\t\tvar te = this.elements;\n\t\n\t\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n\t\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\t\n\t\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\t\tte[ 4 ] = xy - wz;\n\t\t\tte[ 8 ] = xz + wy;\n\t\n\t\t\tte[ 1 ] = xy + wz;\n\t\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\t\tte[ 9 ] = yz - wx;\n\t\n\t\t\tte[ 2 ] = xz - wy;\n\t\t\tte[ 6 ] = yz + wx;\n\t\t\tte[ 10 ] = 1 - ( xx + yy );\n\t\n\t\t\t// last column\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\t\n\t\t\t// bottom row\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tlookAt: function () {\n\t\n\t\t\tvar x, y, z;\n\t\n\t\t\treturn function lookAt( eye, target, up ) {\n\t\n\t\t\t\tif ( x === undefined ) {\n\t\n\t\t\t\t\tx = new THREE.Vector3();\n\t\t\t\t\ty = new THREE.Vector3();\n\t\t\t\t\tz = new THREE.Vector3();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tz.subVectors( eye, target ).normalize();\n\t\n\t\t\t\tif ( z.lengthSq() === 0 ) {\n\t\n\t\t\t\t\tz.z = 1;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tx.crossVectors( up, z ).normalize();\n\t\n\t\t\t\tif ( x.lengthSq() === 0 ) {\n\t\n\t\t\t\t\tz.z += 0.0001;\n\t\t\t\t\tx.crossVectors( up, z ).normalize();\n\t\n\t\t\t\t}\n\t\n\t\t\t\ty.crossVectors( z, x );\n\t\n\t\n\t\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tmultiply: function ( m, n ) {\n\t\n\t\t\tif ( n !== undefined ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\t\n\t\t\t}\n\t\n\t\t\treturn this.multiplyMatrices( this, m );\n\t\n\t\t},\n\t\n\t\tpremultiply: function ( m ) {\n\t\n\t\t\treturn this.multiplyMatrices( m, this );\n\t\n\t\t},\n\t\n\t\tmultiplyMatrices: function ( a, b ) {\n\t\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\t\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\t\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\t\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmultiplyToArray: function ( a, b, r ) {\n\t\n\t\t\tvar te = this.elements;\n\t\n\t\t\tthis.multiplyMatrices( a, b );\n\t\n\t\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n\t\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n\t\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n\t\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmultiplyScalar: function ( s ) {\n\t\n\t\t\tvar te = this.elements;\n\t\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tapplyToVector3Array: function () {\n\t\n\t\t\tvar v1;\n\t\n\t\t\treturn function applyToVector3Array( array, offset, length ) {\n\t\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\tif ( length === undefined ) length = array.length;\n\t\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\t\n\t\t\t\t\tv1.fromArray( array, j );\n\t\t\t\t\tv1.applyMatrix4( this );\n\t\t\t\t\tv1.toArray( array, j );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn array;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tapplyToBuffer: function () {\n\t\n\t\t\tvar v1;\n\t\n\t\t\treturn function applyToBuffer( buffer, offset, length ) {\n\t\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\t\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\t\n\t\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\t\tv1.z = buffer.getZ( j );\n\t\n\t\t\t\t\tv1.applyMatrix4( this );\n\t\n\t\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn buffer;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tdeterminant: function () {\n\t\n\t\t\tvar te = this.elements;\n\t\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\t\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\t\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\t\n\t\t\t);\n\t\n\t\t},\n\t\n\t\ttranspose: function () {\n\t\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\t\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\t\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\t\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\t\"- just use .toArray instead.\" );\n\t\n\t\t\treturn this.toArray( array, offset );\n\t\n\t\t},\n\t\n\t\tgetPosition: function () {\n\t\n\t\t\tvar v1;\n\t\n\t\t\treturn function getPosition() {\n\t\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\n\t\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tsetPosition: function ( v ) {\n\t\n\t\t\tvar te = this.elements;\n\t\n\t\t\tte[ 12 ] = v.x;\n\t\t\tte[ 13 ] = v.y;\n\t\t\tte[ 14 ] = v.z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\t\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\t\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\t\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\n\t\t\tif ( det === 0 ) {\n\t\n\t\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\t\n\t\t\t\tif ( throwOnDegenerate || false ) {\n\t\n\t\t\t\t\tthrow new Error( msg );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tconsole.warn( msg );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this.identity();\n\t\n\t\t\t}\n\t\t\t\n\t\t\tvar detInv = 1 / det;\n\t\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\t\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\t\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\t\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tscale: function ( v ) {\n\t\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\t\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tgetMaxScaleOnAxis: function () {\n\t\n\t\t\tvar te = this.elements;\n\t\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\t\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\t\n\t\t},\n\t\n\t\tmakeTranslation: function ( x, y, z ) {\n\t\n\t\t\tthis.set(\n\t\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\t\n\t\t\t);\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmakeRotationX: function ( theta ) {\n\t\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t\t\tthis.set(\n\t\n\t\t\t\t1, 0,  0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s,  c, 0,\n\t\t\t\t0, 0,  0, 1\n\t\n\t\t\t);\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmakeRotationY: function ( theta ) {\n\t\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t\t\tthis.set(\n\t\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\t\n\t\t\t);\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmakeRotationZ: function ( theta ) {\n\t\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\t\n\t\t\tthis.set(\n\t\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts,  c, 0, 0,\n\t\t\t\t0,  0, 1, 0,\n\t\t\t\t0,  0, 0, 1\n\t\n\t\t\t);\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\t\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\t\n\t\t\tthis.set(\n\t\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\t\n\t\t\t);\n\t\n\t\t\t return this;\n\t\n\t\t},\n\t\n\t\tmakeScale: function ( x, y, z ) {\n\t\n\t\t\tthis.set(\n\t\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\t\n\t\t\t);\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcompose: function ( position, quaternion, scale ) {\n\t\n\t\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\t\tthis.scale( scale );\n\t\t\tthis.setPosition( position );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdecompose: function () {\n\t\n\t\t\tvar vector, matrix;\n\t\n\t\t\treturn function decompose( position, quaternion, scale ) {\n\t\n\t\t\t\tif ( vector === undefined ) {\n\t\n\t\t\t\t\tvector = new THREE.Vector3();\n\t\t\t\t\tmatrix = new THREE.Matrix4();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar te = this.elements;\n\t\n\t\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\t\n\t\t\t\t// if determine is negative, we need to invert one scale\n\t\t\t\tvar det = this.determinant();\n\t\t\t\tif ( det < 0 ) {\n\t\n\t\t\t\t\tsx = - sx;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tposition.x = te[ 12 ];\n\t\t\t\tposition.y = te[ 13 ];\n\t\t\t\tposition.z = te[ 14 ];\n\t\n\t\t\t\t// scale the rotation part\n\t\n\t\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\t\n\t\t\t\tvar invSX = 1 / sx;\n\t\t\t\tvar invSY = 1 / sy;\n\t\t\t\tvar invSZ = 1 / sz;\n\t\n\t\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\t\tmatrix.elements[ 2 ] *= invSX;\n\t\n\t\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\t\tmatrix.elements[ 6 ] *= invSY;\n\t\n\t\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\t\n\t\t\t\tquaternion.setFromRotationMatrix( matrix );\n\t\n\t\t\t\tscale.x = sx;\n\t\t\t\tscale.y = sy;\n\t\t\t\tscale.z = sz;\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\t\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\t\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\t\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tmakePerspective: function ( fov, aspect, near, far ) {\n\t\n\t\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\n\t\t\tvar ymin = - ymax;\n\t\t\tvar xmin = ymin * aspect;\n\t\t\tvar xmax = ymax * aspect;\n\t\n\t\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\t\n\t\t},\n\t\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\t\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\t\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\t\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tequals: function ( matrix ) {\n\t\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\t\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\t\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\t\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\n\t\t},\n\t\n\t\tfromArray: function ( array ) {\n\t\n\t\t\tthis.elements.set( array );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\ttoArray: function ( array, offset ) {\n\t\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tvar te = this.elements;\n\t\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\n\t\t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\t\tarray[ offset + 9 ]  = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\t\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\t\n\t\t\treturn array;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Ray.js\n\t\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\t\n\tTHREE.Ray = function ( origin, direction ) {\n\t\n\t\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\n\t\n\t};\n\t\n\tTHREE.Ray.prototype = {\n\t\n\t\tconstructor: THREE.Ray,\n\t\n\t\tset: function ( origin, direction ) {\n\t\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( ray ) {\n\t\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tat: function ( t, optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\n\t\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\t\n\t\t},\n\t\n\t\tlookAt: function ( v ) {\n\t\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\trecast: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3();\n\t\n\t\t\treturn function recast( t ) {\n\t\n\t\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tclosestPointToPoint: function ( point, optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\tresult.subVectors( point, this.origin );\n\t\t\tvar directionDistance = result.dot( this.direction );\n\t\n\t\t\tif ( directionDistance < 0 ) {\n\t\n\t\t\t\treturn result.copy( this.origin );\n\t\n\t\t\t}\n\t\n\t\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\t\n\t\t},\n\t\n\t\tdistanceToPoint: function ( point ) {\n\t\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\t\n\t\t},\n\t\n\t\tdistanceSqToPoint: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3();\n\t\n\t\t\treturn function distanceSqToPoint( point ) {\n\t\n\t\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\t\n\t\t\t\t// point behind the ray\n\t\n\t\t\t\tif ( directionDistance < 0 ) {\n\t\n\t\t\t\t\treturn this.origin.distanceToSquared( point );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\t\n\t\t\t\treturn v1.distanceToSquared( point );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tdistanceSqToSegment: function () {\n\t\n\t\t\tvar segCenter = new THREE.Vector3();\n\t\t\tvar segDir = new THREE.Vector3();\n\t\t\tvar diff = new THREE.Vector3();\n\t\n\t\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\t\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t\t// defined by v0 and v1\n\t\t\t\t// It can also set two optional targets :\n\t\t\t\t// - The closest point on the ray\n\t\t\t\t// - The closest point on the segment\n\t\n\t\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\t\n\t\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\t\tvar c = diff.lengthSq();\n\t\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\t\tvar s0, s1, sqrDist, extDet;\n\t\n\t\t\t\tif ( det > 0 ) {\n\t\n\t\t\t\t\t// The ray and segment are not parallel.\n\t\n\t\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\t\textDet = segExtent * det;\n\t\n\t\t\t\t\tif ( s0 >= 0 ) {\n\t\n\t\t\t\t\t\tif ( s1 >= - extDet ) {\n\t\n\t\t\t\t\t\t\tif ( s1 <= extDet ) {\n\t\n\t\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\n\t\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t// region 1\n\t\n\t\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t// region 5\n\t\n\t\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tif ( s1 <= - extDet ) {\n\t\n\t\t\t\t\t\t\t// region 4\n\t\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t\t\t\t\t\t} else if ( s1 <= extDet ) {\n\t\n\t\t\t\t\t\t\t// region 3\n\t\n\t\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t// region 2\n\t\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// Ray and segment are parallel.\n\t\n\t\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( optionalPointOnRay ) {\n\t\n\t\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( optionalPointOnSegment ) {\n\t\n\t\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn sqrDist;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tintersectSphere: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3();\n\t\n\t\t\treturn function intersectSphere( sphere, optionalTarget ) {\n\t\n\t\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\t\tvar tca = v1.dot( this.direction );\n\t\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\t\n\t\t\t\tif ( d2 > radius2 ) return null;\n\t\n\t\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\t\n\t\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\t\tvar t0 = tca - thc;\n\t\n\t\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\t\tvar t1 = tca + thc;\n\t\n\t\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\t\n\t\t\t\t// test to see if t0 is behind the ray:\n\t\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\t\n\t\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\t\treturn this.at( t0, optionalTarget );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tintersectsSphere: function ( sphere ) {\n\t\n\t\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\t\n\t\t},\n\t\n\t\tdistanceToPlane: function ( plane ) {\n\t\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\t\n\t\t\tif ( denominator === 0 ) {\n\t\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\t\n\t\t\t\t\treturn 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\t\n\t\t\t\treturn null;\n\t\n\t\t\t}\n\t\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\t\n\t\t\t// Return if the ray never intersects the plane\n\t\n\t\t\treturn t >= 0 ? t :  null;\n\t\n\t\t},\n\t\n\t\tintersectPlane: function ( plane, optionalTarget ) {\n\t\n\t\t\tvar t = this.distanceToPlane( plane );\n\t\n\t\t\tif ( t === null ) {\n\t\n\t\t\t\treturn null;\n\t\n\t\t\t}\n\t\n\t\t\treturn this.at( t, optionalTarget );\n\t\n\t\t},\n\t\n\t\n\t\n\t\tintersectsPlane: function ( plane ) {\n\t\n\t\t\t// check if the ray lies on the plane first\n\t\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\t\n\t\t\tif ( distToPoint === 0 ) {\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t}\n\t\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\t\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t}\n\t\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\t\n\t\t\treturn false;\n\t\n\t\t},\n\t\n\t\tintersectBox: function ( box, optionalTarget ) {\n\t\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\n\t\t\tvar origin = this.origin;\n\t\n\t\t\tif ( invdirx >= 0 ) {\n\t\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\t\n\t\t\t} else {\n\t\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\t\n\t\t\t}\n\t\n\t\t\tif ( invdiry >= 0 ) {\n\t\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\t\n\t\t\t} else {\n\t\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\t\n\t\t\t}\n\t\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\t\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\t\n\t\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\t\n\t\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\t\n\t\t\tif ( invdirz >= 0 ) {\n\t\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\t\n\t\t\t} else {\n\t\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\t\n\t\t\t}\n\t\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\t\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\t\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\t\n\t\t\t//return point closest to the ray (positive side)\n\t\n\t\t\tif ( tmax < 0 ) return null;\n\t\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\t\n\t\t},\n\t\n\t\tintersectsBox: ( function () {\n\t\n\t\t\tvar v = new THREE.Vector3();\n\t\n\t\t\treturn function intersectsBox( box ) {\n\t\n\t\t\t\treturn this.intersectBox( box, v ) !== null;\n\t\n\t\t\t};\n\t\n\t\t} )(),\n\t\n\t\tintersectTriangle: function () {\n\t\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\tvar diff = new THREE.Vector3();\n\t\t\tvar edge1 = new THREE.Vector3();\n\t\t\tvar edge2 = new THREE.Vector3();\n\t\t\tvar normal = new THREE.Vector3();\n\t\n\t\t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\t\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\n\t\t\t\tedge1.subVectors( b, a );\n\t\t\t\tedge2.subVectors( c, a );\n\t\t\t\tnormal.crossVectors( edge1, edge2 );\n\t\n\t\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\t\tvar sign;\n\t\n\t\t\t\tif ( DdN > 0 ) {\n\t\n\t\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\t\tsign = 1;\n\t\n\t\t\t\t} else if ( DdN < 0 ) {\n\t\n\t\t\t\t\tsign = - 1;\n\t\t\t\t\tDdN = - DdN;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\treturn null;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tdiff.subVectors( this.origin, a );\n\t\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\t\n\t\t\t\t// b1 < 0, no intersection\n\t\t\t\tif ( DdQxE2 < 0 ) {\n\t\n\t\t\t\t\treturn null;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\t\n\t\t\t\t// b2 < 0, no intersection\n\t\t\t\tif ( DdE1xQ < 0 ) {\n\t\n\t\t\t\t\treturn null;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// b1+b2 > 1, no intersection\n\t\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\t\n\t\t\t\t\treturn null;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// Line intersects triangle, check if ray does.\n\t\t\t\tvar QdN = - sign * diff.dot( normal );\n\t\n\t\t\t\t// t < 0, no intersection\n\t\t\t\tif ( QdN < 0 ) {\n\t\n\t\t\t\t\treturn null;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// Ray intersects triangle.\n\t\t\t\treturn this.at( QdN / DdN, optionalTarget );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tapplyMatrix4: function ( matrix4 ) {\n\t\n\t\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.sub( this.origin );\n\t\t\tthis.direction.normalize();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tequals: function ( ray ) {\n\t\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Sphere.js\n\t\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.Sphere = function ( center, radius ) {\n\t\n\t\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\t\n\t};\n\t\n\tTHREE.Sphere.prototype = {\n\t\n\t\tconstructor: THREE.Sphere,\n\t\n\t\tset: function ( center, radius ) {\n\t\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromPoints: function () {\n\t\n\t\t\tvar box = new THREE.Box3();\n\t\n\t\t\treturn function setFromPoints( points, optionalCenter ) {\n\t\n\t\t\t\tvar center = this.center;\n\t\n\t\t\t\tif ( optionalCenter !== undefined ) {\n\t\n\t\t\t\t\tcenter.copy( optionalCenter );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tbox.setFromPoints( points ).center( center );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar maxRadiusSq = 0;\n\t\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( sphere ) {\n\t\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tempty: function () {\n\t\n\t\t\treturn ( this.radius <= 0 );\n\t\n\t\t},\n\t\n\t\tcontainsPoint: function ( point ) {\n\t\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\t\n\t\t},\n\t\n\t\tdistanceToPoint: function ( point ) {\n\t\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\t\n\t\t},\n\t\n\t\tintersectsSphere: function ( sphere ) {\n\t\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\t\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\t\n\t\t},\n\t\n\t\tintersectsBox: function ( box ) {\n\t\n\t\t\treturn box.intersectsSphere( this );\n\t\n\t\t},\n\t\n\t\tintersectsPlane: function ( plane ) {\n\t\n\t\t\t// We use the following equation to compute the signed distance from\n\t\t\t// the center of the sphere to the plane.\n\t\t\t//\n\t\t\t// distance = q * n - d\n\t\t\t//\n\t\t\t// If this distance is greater than the radius of the sphere,\n\t\t\t// then there is no intersection.\n\t\n\t\t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\t\n\t\t},\n\t\n\t\tclampPoint: function ( point, optionalTarget ) {\n\t\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\n\t\t\tresult.copy( point );\n\t\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\t\n\t\t\t\tresult.sub( this.center ).normalize();\n\t\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\t\n\t\t\t}\n\t\n\t\t\treturn result;\n\t\n\t\t},\n\t\n\t\tgetBoundingBox: function ( optionalTarget ) {\n\t\n\t\t\tvar box = optionalTarget || new THREE.Box3();\n\t\n\t\t\tbox.set( this.center, this.center );\n\t\t\tbox.expandByScalar( this.radius );\n\t\n\t\t\treturn box;\n\t\n\t\t},\n\t\n\t\tapplyMatrix4: function ( matrix ) {\n\t\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\ttranslate: function ( offset ) {\n\t\n\t\t\tthis.center.add( offset );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tequals: function ( sphere ) {\n\t\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Frustum.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\t\n\tTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\n\t\n\t\tthis.planes = [\n\t\n\t\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\n\t\n\t\t];\n\t\n\t};\n\t\n\tTHREE.Frustum.prototype = {\n\t\n\t\tconstructor: THREE.Frustum,\n\t\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\t\n\t\t\tvar planes = this.planes;\n\t\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( frustum ) {\n\t\n\t\t\tvar planes = this.planes;\n\t\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromMatrix: function ( m ) {\n\t\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\t\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tintersectsObject: function () {\n\t\n\t\t\tvar sphere = new THREE.Sphere();\n\t\n\t\t\treturn function intersectsObject( object ) {\n\t\n\t\t\t\tvar geometry = object.geometry;\n\t\n\t\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\t\tgeometry.computeBoundingSphere();\n\t\n\t\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t\t.applyMatrix4( object.matrixWorld );\n\t\n\t\t\t\treturn this.intersectsSphere( sphere );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tintersectsSprite: function () {\n\t\n\t\t\tvar sphere = new THREE.Sphere();\n\t\n\t\t\treturn function intersectsSprite( sprite ) {\n\t\n\t\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\t\n\t\t\t\treturn this.intersectsSphere( sphere );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tintersectsSphere: function ( sphere ) {\n\t\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\t\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\t\n\t\t\t\tif ( distance < negRadius ) {\n\t\n\t\t\t\t\treturn false;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\n\t\t},\n\t\n\t\tintersectsBox: function () {\n\t\n\t\t\tvar p1 = new THREE.Vector3(),\n\t\t\t\tp2 = new THREE.Vector3();\n\t\n\t\t\treturn function intersectsBox( box ) {\n\t\n\t\t\t\tvar planes = this.planes;\n\t\n\t\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\t\n\t\t\t\t\tvar plane = planes[ i ];\n\t\n\t\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\t\n\t\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\t\n\t\t\t\t\t// if both outside plane, no intersection\n\t\n\t\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\t\n\t\t\t\t\t\treturn false;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\n\t\tcontainsPoint: function ( point ) {\n\t\n\t\t\tvar planes = this.planes;\n\t\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\t\n\t\t\t\t\treturn false;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Plane.js\n\t\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\t\n\tTHREE.Plane = function ( normal, constant ) {\n\t\n\t\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\t\n\t};\n\t\n\tTHREE.Plane.prototype = {\n\t\n\t\tconstructor: THREE.Plane,\n\t\n\t\tset: function ( normal, constant ) {\n\t\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetComponents: function ( x, y, z, w ) {\n\t\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\t\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromCoplanarPoints: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3();\n\t\t\tvar v2 = new THREE.Vector3();\n\t\n\t\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\t\n\t\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\t\n\t\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\t\n\t\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( plane ) {\n\t\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tnormalize: function () {\n\t\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tnegate: function () {\n\t\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdistanceToPoint: function ( point ) {\n\t\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\t\n\t\t},\n\t\n\t\tdistanceToSphere: function ( sphere ) {\n\t\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\t\n\t\t},\n\t\n\t\tprojectPoint: function ( point, optionalTarget ) {\n\t\n\t\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\t\n\t\t},\n\t\n\t\torthoPoint: function ( point, optionalTarget ) {\n\t\n\t\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\t\n\t\t},\n\t\n\t\tintersectLine: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3();\n\t\n\t\t\treturn function intersectLine( line, optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\n\t\t\t\tvar direction = line.delta( v1 );\n\t\n\t\t\t\tvar denominator = this.normal.dot( direction );\n\t\n\t\t\t\tif ( denominator === 0 ) {\n\t\n\t\t\t\t\t// line is coplanar, return origin\n\t\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\t\n\t\t\t\t\t\treturn result.copy( line.start );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\t\treturn undefined;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\t\n\t\t\t\tif ( t < 0 || t > 1 ) {\n\t\n\t\t\t\t\treturn undefined;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tintersectsLine: function ( line ) {\n\t\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\t\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\t\n\t\t},\n\t\n\t\tintersectsBox: function ( box ) {\n\t\n\t\t\treturn box.intersectsPlane( this );\n\t\n\t\t},\n\t\n\t\tintersectsSphere: function ( sphere ) {\n\t\n\t\t\treturn sphere.intersectsPlane( this );\n\t\n\t\t},\n\t\n\t\tcoplanarPoint: function ( optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\t\n\t\t},\n\t\n\t\tapplyMatrix4: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3();\n\t\t\tvar m1 = new THREE.Matrix3();\n\t\n\t\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\t\n\t\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\t\n\t\t\t\t// transform normal based on theory here:\n\t\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t\t\t\tthis.constant = - referencePoint.dot( normal );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\ttranslate: function ( offset ) {\n\t\n\t\t\tthis.constant = this.constant - offset.dot( this.normal );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tequals: function ( plane ) {\n\t\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Spherical.js\n\t\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The poles (phi) are at the positive and negative y axis.\n\t * The equator starts at positive z.\n\t */\n\t\n\tTHREE.Spherical = function ( radius, phi, theta ) {\n\t\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\tTHREE.Spherical.prototype = {\n\t\n\t\tconstructor: THREE.Spherical,\n\t\n\t\tset: function ( radius, phi, theta ) {\n\t\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( other ) {\n\t\n\t\t\tthis.radius.copy( other.radius );\n\t\t\tthis.phi.copy( other.phi );\n\t\t\tthis.theta.copy( other.theta );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function() {\n\t\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromVector3: function( vec3 ) {\n\t\n\t\t\tthis.radius = vec3.length();\n\t\n\t\t\tif ( this.radius === 0 ) {\n\t\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t\t\t\tthis.phi = Math.acos( THREE.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t};\n\t\n\t// File:src/math/Math.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.Math = {\n\t\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\t\n\t\tgenerateUUID: function () {\n\t\n\t\t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\t\n\t\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t\t\tvar uuid = new Array( 36 );\n\t\t\tvar rnd = 0, r;\n\t\n\t\t\treturn function generateUUID() {\n\t\n\t\t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\t\n\t\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\t\n\t\t\t\t\t\tuuid[ i ] = '-';\n\t\n\t\t\t\t\t} else if ( i === 14 ) {\n\t\n\t\t\t\t\t\tuuid[ i ] = '4';\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t\t\t\t\t\tr = rnd & 0xf;\n\t\t\t\t\t\trnd = rnd >> 4;\n\t\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn uuid.join( '' );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tclamp: function ( value, min, max ) {\n\t\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\t\n\t\t},\n\t\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\t\n\t\teuclideanModulo: function ( n, m ) {\n\t\n\t\t\treturn ( ( n % m ) + m ) % m;\n\t\n\t\t},\n\t\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\t\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\t\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\t\n\t\t},\n\t\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\t\n\t\tsmoothstep: function ( x, min, max ) {\n\t\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\t\n\t\t\tx = ( x - min ) / ( max - min );\n\t\n\t\t\treturn x * x * ( 3 - 2 * x );\n\t\n\t\t},\n\t\n\t\tsmootherstep: function ( x, min, max ) {\n\t\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\t\n\t\t\tx = ( x - min ) / ( max - min );\n\t\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\t\n\t\t},\n\t\n\t\trandom16: function () {\n\t\n\t\t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\t\n\t\t},\n\t\n\t\t// Random integer from <low, high> interval\n\t\n\t\trandInt: function ( low, high ) {\n\t\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\t\n\t\t},\n\t\n\t\t// Random float from <low, high> interval\n\t\n\t\trandFloat: function ( low, high ) {\n\t\n\t\t\treturn low + Math.random() * ( high - low );\n\t\n\t\t},\n\t\n\t\t// Random float from <-range/2, range/2> interval\n\t\n\t\trandFloatSpread: function ( range ) {\n\t\n\t\t\treturn range * ( 0.5 - Math.random() );\n\t\n\t\t},\n\t\n\t\tdegToRad: function ( degrees ) {\n\t\n\t\t\treturn degrees * THREE.Math.DEG2RAD;\n\t\n\t\t},\n\t\n\t\tradToDeg: function ( radians ) {\n\t\n\t\t\treturn radians * THREE.Math.RAD2DEG;\n\t\n\t\t},\n\t\n\t\tisPowerOfTwo: function ( value ) {\n\t\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\t\n\t\t},\n\t\n\t\tnearestPowerOfTwo: function ( value ) {\n\t\n\t\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\t\n\t\t},\n\t\n\t\tnextPowerOfTwo: function ( value ) {\n\t\n\t\t\tvalue --;\n\t\t\tvalue |= value >> 1;\n\t\t\tvalue |= value >> 2;\n\t\t\tvalue |= value >> 4;\n\t\t\tvalue |= value >> 8;\n\t\t\tvalue |= value >> 16;\n\t\t\tvalue ++;\n\t\n\t\t\treturn value;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Spline.js\n\t\n\t/**\n\t * Spline from Tween.js, slightly optimized (and trashed)\n\t * http://sole.github.com/tween.js/examples/05_spline.html\n\t *\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.Spline = function ( points ) {\n\t\n\t\tthis.points = points;\n\t\n\t\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n\t\tpoint, intPoint, weight, w2, w3,\n\t\tpa, pb, pc, pd;\n\t\n\t\tthis.initFromArray = function ( a ) {\n\t\n\t\t\tthis.points = [];\n\t\n\t\t\tfor ( var i = 0; i < a.length; i ++ ) {\n\t\n\t\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.getPoint = function ( k ) {\n\t\n\t\t\tpoint = ( this.points.length - 1 ) * k;\n\t\t\tintPoint = Math.floor( point );\n\t\t\tweight = point - intPoint;\n\t\n\t\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t\t\tc[ 1 ] = intPoint;\n\t\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n\t\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\t\n\t\t\tpa = this.points[ c[ 0 ] ];\n\t\t\tpb = this.points[ c[ 1 ] ];\n\t\t\tpc = this.points[ c[ 2 ] ];\n\t\t\tpd = this.points[ c[ 3 ] ];\n\t\n\t\t\tw2 = weight * weight;\n\t\t\tw3 = weight * w2;\n\t\n\t\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n\t\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n\t\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\t\n\t\t\treturn v3;\n\t\n\t\t};\n\t\n\t\tthis.getControlPointsArray = function () {\n\t\n\t\t\tvar i, p, l = this.points.length,\n\t\t\t\tcoords = [];\n\t\n\t\t\tfor ( i = 0; i < l; i ++ ) {\n\t\n\t\t\t\tp = this.points[ i ];\n\t\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\t\n\t\t\t}\n\t\n\t\t\treturn coords;\n\t\n\t\t};\n\t\n\t\t// approximate length by summing linear segments\n\t\n\t\tthis.getLength = function ( nSubDivisions ) {\n\t\n\t\t\tvar i, index, nSamples, position,\n\t\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n\t\t\t\toldPosition = new THREE.Vector3(),\n\t\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\t\tchunkLengths = [],\n\t\t\t\ttotalLength = 0;\n\t\n\t\t\t// first point has 0 length\n\t\n\t\t\tchunkLengths[ 0 ] = 0;\n\t\n\t\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\t\n\t\t\tnSamples = this.points.length * nSubDivisions;\n\t\n\t\t\toldPosition.copy( this.points[ 0 ] );\n\t\n\t\t\tfor ( i = 1; i < nSamples; i ++ ) {\n\t\n\t\t\t\tindex = i / nSamples;\n\t\n\t\t\t\tposition = this.getPoint( index );\n\t\t\t\ttmpVec.copy( position );\n\t\n\t\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\t\n\t\t\t\toldPosition.copy( position );\n\t\n\t\t\t\tpoint = ( this.points.length - 1 ) * index;\n\t\t\t\tintPoint = Math.floor( point );\n\t\n\t\t\t\tif ( intPoint !== oldIntPoint ) {\n\t\n\t\t\t\t\tchunkLengths[ intPoint ] = totalLength;\n\t\t\t\t\toldIntPoint = intPoint;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// last point ends with total length\n\t\n\t\t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\t\n\t\t\treturn { chunks: chunkLengths, total: totalLength };\n\t\n\t\t};\n\t\n\t\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\t\n\t\t\tvar i, j,\n\t\t\t\tindex, indexCurrent, indexNext,\n\t\t\t\trealDistance,\n\t\t\t\tsampling, position,\n\t\t\t\tnewpoints = [],\n\t\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\t\tsl = this.getLength();\n\t\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\t\n\t\t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\t\n\t\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n\t\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\t\n\t\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\t\n\t\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\t\n\t\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n\t\t\t\tindexNext = i / ( this.points.length - 1 );\n\t\n\t\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\t\n\t\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\t\n\t\t\t\t\tposition = this.getPoint( index );\n\t\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\t\n\t\t\t}\n\t\n\t\t\tthis.points = newpoints;\n\t\n\t\t};\n\t\n\t\t// Catmull-Rom\n\t\n\t\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\t\n\t\t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t\t\t\tv1 = ( p3 - p1 ) * 0.5;\n\t\n\t\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Triangle.js\n\t\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.Triangle = function ( a, b, c ) {\n\t\n\t\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\n\t\n\t};\n\t\n\tTHREE.Triangle.normal = function () {\n\t\n\t\tvar v0 = new THREE.Vector3();\n\t\n\t\treturn function normal( a, b, c, optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\n\t\t\tresult.subVectors( c, b );\n\t\t\tv0.subVectors( a, b );\n\t\t\tresult.cross( v0 );\n\t\n\t\t\tvar resultLengthSq = result.lengthSq();\n\t\t\tif ( resultLengthSq > 0 ) {\n\t\n\t\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\t\n\t\t\t}\n\t\n\t\t\treturn result.set( 0, 0, 0 );\n\t\n\t\t};\n\t\n\t}();\n\t\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tTHREE.Triangle.barycoordFromPoint = function () {\n\t\n\t\tvar v0 = new THREE.Vector3();\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\t\n\t\treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\t\n\t\t\tv0.subVectors( c, a );\n\t\t\tv1.subVectors( b, a );\n\t\t\tv2.subVectors( point, a );\n\t\n\t\t\tvar dot00 = v0.dot( v0 );\n\t\t\tvar dot01 = v0.dot( v1 );\n\t\t\tvar dot02 = v0.dot( v2 );\n\t\t\tvar dot11 = v1.dot( v1 );\n\t\t\tvar dot12 = v1.dot( v2 );\n\t\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\t\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn result.set( - 2, - 1, - 1 );\n\t\n\t\t\t}\n\t\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\t\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn result.set( 1 - u - v, v, u );\n\t\n\t\t};\n\t\n\t}();\n\t\n\tTHREE.Triangle.containsPoint = function () {\n\t\n\t\tvar v1 = new THREE.Vector3();\n\t\n\t\treturn function containsPoint( point, a, b, c ) {\n\t\n\t\t\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\t\n\t\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\t\n\t\t};\n\t\n\t}();\n\t\n\tTHREE.Triangle.prototype = {\n\t\n\t\tconstructor: THREE.Triangle,\n\t\n\t\tset: function ( a, b, c ) {\n\t\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\t\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( triangle ) {\n\t\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tarea: function () {\n\t\n\t\t\tvar v0 = new THREE.Vector3();\n\t\t\tvar v1 = new THREE.Vector3();\n\t\n\t\t\treturn function area() {\n\t\n\t\t\t\tv0.subVectors( this.c, this.b );\n\t\t\t\tv1.subVectors( this.a, this.b );\n\t\n\t\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tmidpoint: function ( optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\t\n\t\t},\n\t\n\t\tnormal: function ( optionalTarget ) {\n\t\n\t\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\t\n\t\t},\n\t\n\t\tplane: function ( optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Plane();\n\t\n\t\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\n\t\t},\n\t\n\t\tbarycoordFromPoint: function ( point, optionalTarget ) {\n\t\n\t\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\t\n\t\t},\n\t\n\t\tcontainsPoint: function ( point ) {\n\t\n\t\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\n\t\n\t\t},\n\t\n\t\tclosestPointToPoint: function () {\n\t\n\t\t\tvar plane, edgeList, projectedPoint, closestPoint;\n\t\n\t\t\treturn function closestPointToPoint( point, optionalTarget ) {\n\t\n\t\t\t\tif ( plane === undefined ) {\n\t\n\t\t\t\t\tplane = new THREE.Plane();\n\t\t\t\t\tedgeList = [ new THREE.Line3(), new THREE.Line3(), new THREE.Line3() ];\n\t\t\t\t\tprojectedPoint = new THREE.Vector3();\n\t\t\t\t\tclosestPoint = new THREE.Vector3();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\t\tvar minDistance = Infinity;\n\t\n\t\t\t\t// project the point onto the plane of the triangle\n\t\n\t\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\t\t\tplane.projectPoint( point, projectedPoint );\n\t\n\t\t\t\t// check if the projection lies within the triangle\n\t\n\t\t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\t\n\t\t\t\t\t// if so, this is the closest point\n\t\n\t\t\t\t\tresult.copy( projectedPoint );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\t\n\t\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\t\n\t\t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\t\n\t\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\t\n\t\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\t\n\t\t\t\t\t\tif( distance < minDistance ) {\n\t\n\t\t\t\t\t\t\tminDistance = distance;\n\t\n\t\t\t\t\t\t\tresult.copy( closestPoint );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn result;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tequals: function ( triangle ) {\n\t\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/math/Interpolant.js\n\t\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\t\n\tTHREE.Interpolant = function(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\t\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\t\n\t};\n\t\n\tTHREE.Interpolant.prototype = {\n\t\n\t\tconstructor: THREE.Interpolant,\n\t\n\t\tevaluate: function( t ) {\n\t\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\t\n\t\t\t\tt1 = pp[   i1   ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\t\n\t\t\tvalidate_interval: {\n\t\n\t\t\t\tseek: {\n\t\n\t\t\t\t\tvar right;\n\t\n\t\t\t\t\tlinear_scan: {\n\t//- See http://jsperf.com/comparison-to-undefined/3\n\t//- slower code:\n\t//-\n\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\t\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\t\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\t\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\t\n\t\t\t\t\t\t\t\t\t// after end\n\t\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\t\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\t\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\t\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\n\t\t\t\t\t\t}\n\t\n\t//- slower code:\n\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\t\n\t\t\t\t\t\t\t// looping?\n\t\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\t\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\t\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// linear reverse scan\n\t\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\t\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\t\n\t\t\t\t\t\t\t\t\t// before start\n\t\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\t\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\t\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\t\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// the interval is valid\n\t\n\t\t\t\t\t\tbreak validate_interval;\n\t\n\t\t\t\t\t} // linear scan\n\t\n\t\t\t\t\t// binary search\n\t\n\t\t\t\t\twhile ( i1 < right ) {\n\t\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\t\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\t\n\t\t\t\t\t\t\tright = mid;\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\ti1 = mid + 1;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tt1 = pp[   i1   ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\t\n\t\t\t\t\t// check boundary cases, again\n\t\n\t\t\t\t\tif ( t0 === undefined ) {\n\t\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( t1 === undefined ) {\n\t\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} // seek\n\t\n\t\t\t\tthis._cachedIndex = i1;\n\t\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\t\n\t\t\t} // validate_interval\n\t\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\t\n\t\t},\n\t\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\t\n\t\t// --- Protected interface\n\t\n\t\tDefaultSettings_: {},\n\t\n\t\tgetSettings_: function() {\n\t\n\t\t\treturn this.settings || this.DefaultSettings_;\n\t\n\t\t},\n\t\n\t\tcopySampleValue_: function( index ) {\n\t\n\t\t\t// copies a sample value to the result buffer\n\t\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\t\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\t\n\t\t\t}\n\t\n\t\t\treturn result;\n\t\n\t\t},\n\t\n\t\t// Template methods for derived classes:\n\t\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t\t\tthrow new Error( \"call to abstract method\" );\n\t\t\t// implementations shall return this.resultBuffer\n\t\n\t\t},\n\t\n\t\tintervalChanged_: function( i1, t0, t1 ) {\n\t\n\t\t\t// empty\n\t\n\t\t}\n\t\n\t};\n\t\n\tObject.assign( THREE.Interpolant.prototype, {\n\t\n\t\tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n\t\t\tTHREE.Interpolant.prototype.copySampleValue_,\n\t\n\t\tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n\t\t\tTHREE.Interpolant.prototype.copySampleValue_\n\t\n\t} );\n\t\n\t// File:src/math/interpolants/CubicInterpolant.js\n\t\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\t\n\tTHREE.CubicInterpolant = function(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t\tTHREE.Interpolant.call(\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\t\n\t};\n\t\n\tTHREE.CubicInterpolant.prototype =\n\t\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\t\n\t\tconstructor: THREE.CubicInterpolant,\n\t\n\t\tDefaultSettings_: {\n\t\n\t\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\n\t\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\n\t\n\t\t},\n\t\n\t\tintervalChanged_: function( i1, t0, t1 ) {\n\t\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\t\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\t\n\t\t\tif ( tPrev === undefined ) {\n\t\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\t\n\t\t\t\t\tcase THREE.ZeroSlopeEnding:\n\t\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase THREE.WrapAroundEnding:\n\t\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\t\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( tNext === undefined ) {\n\t\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\t\n\t\t\t\t\tcase THREE.ZeroSlopeEnding:\n\t\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase THREE.WrapAroundEnding:\n\t\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\t\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\t\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\t\n\t\t},\n\t\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\t\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\t\n\t\t\t// evaluate polynomials\n\t\n\t\t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n\t\t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n\t\t\tvar sN =       wN   * ppp   -           wN      * pp;\n\t\n\t\t\t// combine data linearly\n\t\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\t\n\t\t\t}\n\t\n\t\t\treturn result;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/math/interpolants/DiscreteInterpolant.js\n\t\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\t\n\tTHREE.DiscreteInterpolant = function(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t\tTHREE.Interpolant.call(\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t};\n\t\n\tTHREE.DiscreteInterpolant.prototype =\n\t\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\t\n\t\tconstructor: THREE.DiscreteInterpolant,\n\t\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/math/interpolants/LinearInterpolant.js\n\t\n\t/**\n\t * @author tschw\n\t */\n\t\n\tTHREE.LinearInterpolant = function(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t\tTHREE.Interpolant.call(\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t};\n\t\n\tTHREE.LinearInterpolant.prototype =\n\t\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\t\n\t\tconstructor: THREE.LinearInterpolant,\n\t\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\t\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\t\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\t\n\t\t\t}\n\t\n\t\t\treturn result;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/math/interpolants/QuaternionLinearInterpolant.js\n\t\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\t\n\tTHREE.QuaternionLinearInterpolant = function(\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\t\n\t\tTHREE.Interpolant.call(\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\t\n\t};\n\t\n\tTHREE.QuaternionLinearInterpolant.prototype =\n\t\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\t\n\t\tconstructor: THREE.QuaternionLinearInterpolant,\n\t\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\n\t\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\n\t\t\t\toffset = i1 * stride,\n\t\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\t\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\t\n\t\t\t\tTHREE.Quaternion.slerpFlat( result, 0,\n\t\t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\t\n\t\t\t}\n\t\n\t\t\treturn result;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/core/Clock.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.Clock = function ( autoStart ) {\n\t\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\t\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\t\n\t\tthis.running = false;\n\t\n\t};\n\t\n\tTHREE.Clock.prototype = {\n\t\n\t\tconstructor: THREE.Clock,\n\t\n\t\tstart: function () {\n\t\n\t\t\tthis.startTime = ( performance || Date ).now();\n\t\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.running = true;\n\t\n\t\t},\n\t\n\t\tstop: function () {\n\t\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\n\t\t},\n\t\n\t\tgetElapsedTime: function () {\n\t\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\t\n\t\t},\n\t\n\t\tgetDelta: function () {\n\t\n\t\t\tvar diff = 0;\n\t\n\t\t\tif ( this.autoStart && ! this.running ) {\n\t\n\t\t\t\tthis.start();\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.running ) {\n\t\n\t\t\t\tvar newTime = ( performance || Date ).now();\n\t\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\t\n\t\t\t\tthis.elapsedTime += diff;\n\t\n\t\t\t}\n\t\n\t\t\treturn diff;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/core/EventDispatcher.js\n\t\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\t\n\tTHREE.EventDispatcher = function () {};\n\t\n\tObject.assign( THREE.EventDispatcher.prototype, {\n\t\n\t\taddEventListener: function ( type, listener ) {\n\t\n\t\t\tif ( this._listeners === undefined ) this._listeners = {};\n\t\n\t\t\tvar listeners = this._listeners;\n\t\n\t\t\tif ( listeners[ type ] === undefined ) {\n\t\n\t\t\t\tlisteners[ type ] = [];\n\t\n\t\t\t}\n\t\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\t\n\t\t\t\tlisteners[ type ].push( listener );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\thasEventListener: function ( type, listener ) {\n\t\n\t\t\tif ( this._listeners === undefined ) return false;\n\t\n\t\t\tvar listeners = this._listeners;\n\t\n\t\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t}\n\t\n\t\t\treturn false;\n\t\n\t\t},\n\t\n\t\tremoveEventListener: function ( type, listener ) {\n\t\n\t\t\tif ( this._listeners === undefined ) return;\n\t\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\t\n\t\t\tif ( listenerArray !== undefined ) {\n\t\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\t\n\t\t\t\tif ( index !== - 1 ) {\n\t\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tdispatchEvent: function ( event ) {\n\t\n\t\t\tif ( this._listeners === undefined ) return;\n\t\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\t\n\t\t\tif ( listenerArray !== undefined ) {\n\t\n\t\t\t\tevent.target = this;\n\t\n\t\t\t\tvar array = [], i = 0;\n\t\t\t\tvar length = listenerArray.length;\n\t\n\t\t\t\tfor ( i = 0; i < length; i ++ ) {\n\t\n\t\t\t\t\tarray[ i ] = listenerArray[ i ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( i = 0; i < length; i ++ ) {\n\t\n\t\t\t\t\tarray[ i ].call( this, event );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/core/Layers.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.Layers = function () {\n\t\n\t\tthis.mask = 1;\n\t\n\t};\n\t\n\tTHREE.Layers.prototype = {\n\t\n\t\tconstructor: THREE.Layers,\n\t\n\t\tset: function ( channel ) {\n\t\n\t\t\tthis.mask = 1 << channel;\n\t\n\t\t},\n\t\n\t\tenable: function ( channel ) {\n\t\n\t\t\tthis.mask |= 1 << channel;\n\t\n\t\t},\n\t\n\t\ttoggle: function ( channel ) {\n\t\n\t\t\tthis.mask ^= 1 << channel;\n\t\n\t\t},\n\t\n\t\tdisable: function ( channel ) {\n\t\n\t\t\tthis.mask &= ~ ( 1 << channel );\n\t\n\t\t},\n\t\n\t\ttest: function ( layers ) {\n\t\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/core/Raycaster.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\t\n\t( function ( THREE ) {\n\t\n\t\tTHREE.Raycaster = function ( origin, direction, near, far ) {\n\t\n\t\t\tthis.ray = new THREE.Ray( origin, direction );\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\n\t\t\tthis.near = near || 0;\n\t\t\tthis.far = far || Infinity;\n\t\n\t\t\tthis.params = {\n\t\t\t\tMesh: {},\n\t\t\t\tLine: {},\n\t\t\t\tLOD: {},\n\t\t\t\tPoints: { threshold: 1 },\n\t\t\t\tSprite: {}\n\t\t\t};\n\t\n\t\t\tObject.defineProperties( this.params, {\n\t\t\t\tPointCloud: {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\t\treturn this.Points;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t};\n\t\n\t\tfunction ascSort( a, b ) {\n\t\n\t\t\treturn a.distance - b.distance;\n\t\n\t\t}\n\t\n\t\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\t\n\t\t\tif ( object.visible === false ) return;\n\t\n\t\t\tobject.raycast( raycaster, intersects );\n\t\n\t\t\tif ( recursive === true ) {\n\t\n\t\t\t\tvar children = object.children;\n\t\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tTHREE.Raycaster.prototype = {\n\t\n\t\t\tconstructor: THREE.Raycaster,\n\t\n\t\t\tlinePrecision: 1,\n\t\n\t\t\tset: function ( origin, direction ) {\n\t\n\t\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\n\t\t\t\tthis.ray.set( origin, direction );\n\t\n\t\t\t},\n\t\n\t\t\tsetFromCamera: function ( coords, camera ) {\n\t\n\t\t\t\tif ( camera instanceof THREE.PerspectiveCamera ) {\n\t\n\t\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\n\t\t\t\t} else if ( camera instanceof THREE.OrthographicCamera ) {\n\t\n\t\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tintersectObject: function ( object, recursive ) {\n\t\n\t\t\t\tvar intersects = [];\n\t\n\t\t\t\tintersectObject( object, this, intersects, recursive );\n\t\n\t\t\t\tintersects.sort( ascSort );\n\t\n\t\t\t\treturn intersects;\n\t\n\t\t\t},\n\t\n\t\t\tintersectObjects: function ( objects, recursive ) {\n\t\n\t\t\t\tvar intersects = [];\n\t\n\t\t\t\tif ( Array.isArray( objects ) === false ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\t\treturn intersects;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tintersects.sort( ascSort );\n\t\n\t\t\t\treturn intersects;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t}( THREE ) );\n\t\n\t// File:src/core/Object3D.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\t\n\tTHREE.Object3D = function () {\n\t\n\t\tObject.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );\n\t\n\t\tthis.uuid = THREE.Math.generateUUID();\n\t\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\t\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\t\n\t\tthis.up = THREE.Object3D.DefaultUp.clone();\n\t\n\t\tvar position = new THREE.Vector3();\n\t\tvar rotation = new THREE.Euler();\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar scale = new THREE.Vector3( 1, 1, 1 );\n\t\n\t\tfunction onRotationChange() {\n\t\n\t\t\tquaternion.setFromEuler( rotation, false );\n\t\n\t\t}\n\t\n\t\tfunction onQuaternionChange() {\n\t\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\t\n\t\t}\n\t\n\t\trotation.onChange( onRotationChange );\n\t\tquaternion.onChange( onQuaternionChange );\n\t\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new THREE.Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new THREE.Matrix3()\n\t\t\t}\n\t\t} );\n\t\n\t\tthis.matrix = new THREE.Matrix4();\n\t\tthis.matrixWorld = new THREE.Matrix4();\n\t\n\t\tthis.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\t\n\t\tthis.layers = new THREE.Layers();\n\t\tthis.visible = true;\n\t\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\t\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\t\n\t\tthis.userData = {};\n\t\n\t};\n\t\n\tTHREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );\n\tTHREE.Object3D.DefaultMatrixAutoUpdate = true;\n\t\n\tObject.assign( THREE.Object3D.prototype, THREE.EventDispatcher.prototype, {\n\t\n\t\tapplyMatrix: function ( matrix ) {\n\t\n\t\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\t\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\t\n\t\t},\n\t\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\t\n\t\t\t// assumes axis is normalized\n\t\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\t\n\t\t},\n\t\n\t\tsetRotationFromEuler: function ( euler ) {\n\t\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\t\n\t\t},\n\t\n\t\tsetRotationFromMatrix: function ( m ) {\n\t\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\t\n\t\t},\n\t\n\t\tsetRotationFromQuaternion: function ( q ) {\n\t\n\t\t\t// assumes q is normalized\n\t\n\t\t\tthis.quaternion.copy( q );\n\t\n\t\t},\n\t\n\t\trotateOnAxis: function () {\n\t\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\n\t\t\tvar q1 = new THREE.Quaternion();\n\t\n\t\t\treturn function rotateOnAxis( axis, angle ) {\n\t\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\n\t\n\t\t\t\tthis.quaternion.multiply( q1 );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\trotateX: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\t\n\t\t\treturn function rotateX( angle ) {\n\t\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\trotateY: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\t\n\t\t\treturn function rotateY( angle ) {\n\t\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\trotateZ: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\t\n\t\t\treturn function rotateZ( angle ) {\n\t\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\ttranslateOnAxis: function () {\n\t\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\n\t\t\tvar v1 = new THREE.Vector3();\n\t\n\t\t\treturn function translateOnAxis( axis, distance ) {\n\t\n\t\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\t\n\t\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\ttranslateX: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\t\n\t\t\treturn function translateX( distance ) {\n\t\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\ttranslateY: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\t\n\t\t\treturn function translateY( distance ) {\n\t\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\ttranslateZ: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\t\n\t\t\treturn function translateZ( distance ) {\n\t\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tlocalToWorld: function ( vector ) {\n\t\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\t\n\t\t},\n\t\n\t\tworldToLocal: function () {\n\t\n\t\t\tvar m1 = new THREE.Matrix4();\n\t\n\t\t\treturn function worldToLocal( vector ) {\n\t\n\t\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tlookAt: function () {\n\t\n\t\t\t// This routine does not support objects with rotated and/or translated parent(s)\n\t\n\t\t\tvar m1 = new THREE.Matrix4();\n\t\n\t\t\treturn function lookAt( vector ) {\n\t\n\t\t\t\tm1.lookAt( vector, this.position, this.up );\n\t\n\t\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tadd: function ( object ) {\n\t\n\t\t\tif ( arguments.length > 1 ) {\n\t\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\t\n\t\t\t\t\tthis.add( arguments[ i ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t\tif ( object === this ) {\n\t\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t\tif ( object instanceof THREE.Object3D ) {\n\t\n\t\t\t\tif ( object.parent !== null ) {\n\t\n\t\t\t\t\tobject.parent.remove( object );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tobject.parent = this;\n\t\t\t\tobject.dispatchEvent( { type: 'added' } );\n\t\n\t\t\t\tthis.children.push( object );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tremove: function ( object ) {\n\t\n\t\t\tif ( arguments.length > 1 ) {\n\t\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\t\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar index = this.children.indexOf( object );\n\t\n\t\t\tif ( index !== - 1 ) {\n\t\n\t\t\t\tobject.parent = null;\n\t\n\t\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\t\n\t\t\t\tthis.children.splice( index, 1 );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tgetObjectById: function ( id ) {\n\t\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\t\n\t\t},\n\t\n\t\tgetObjectByName: function ( name ) {\n\t\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\t\n\t\t},\n\t\n\t\tgetObjectByProperty: function ( name, value ) {\n\t\n\t\t\tif ( this[ name ] === value ) return this;\n\t\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\t\n\t\t\t\tif ( object !== undefined ) {\n\t\n\t\t\t\t\treturn object;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn undefined;\n\t\n\t\t},\n\t\n\t\tgetWorldPosition: function ( optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\n\t\t\tthis.updateMatrixWorld( true );\n\t\n\t\t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\t\n\t\t},\n\t\n\t\tgetWorldQuaternion: function () {\n\t\n\t\t\tvar position = new THREE.Vector3();\n\t\t\tvar scale = new THREE.Vector3();\n\t\n\t\t\treturn function getWorldQuaternion( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new THREE.Quaternion();\n\t\n\t\t\t\tthis.updateMatrixWorld( true );\n\t\n\t\t\t\tthis.matrixWorld.decompose( position, result, scale );\n\t\n\t\t\t\treturn result;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tgetWorldRotation: function () {\n\t\n\t\t\tvar quaternion = new THREE.Quaternion();\n\t\n\t\t\treturn function getWorldRotation( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new THREE.Euler();\n\t\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\t\n\t\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tgetWorldScale: function () {\n\t\n\t\t\tvar position = new THREE.Vector3();\n\t\t\tvar quaternion = new THREE.Quaternion();\n\t\n\t\t\treturn function getWorldScale( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\n\t\t\t\tthis.updateMatrixWorld( true );\n\t\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\t\n\t\t\t\treturn result;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tgetWorldDirection: function () {\n\t\n\t\t\tvar quaternion = new THREE.Quaternion();\n\t\n\t\t\treturn function getWorldDirection( optionalTarget ) {\n\t\n\t\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\n\t\t\t\tthis.getWorldQuaternion( quaternion );\n\t\n\t\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\traycast: function () {},\n\t\n\t\ttraverse: function ( callback ) {\n\t\n\t\t\tcallback( this );\n\t\n\t\t\tvar children = this.children;\n\t\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t\t\t\tchildren[ i ].traverse( callback );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\ttraverseVisible: function ( callback ) {\n\t\n\t\t\tif ( this.visible === false ) return;\n\t\n\t\t\tcallback( this );\n\t\n\t\t\tvar children = this.children;\n\t\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\ttraverseAncestors: function ( callback ) {\n\t\n\t\t\tvar parent = this.parent;\n\t\n\t\t\tif ( parent !== null ) {\n\t\n\t\t\t\tcallback( parent );\n\t\n\t\t\t\tparent.traverseAncestors( callback );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tupdateMatrix: function () {\n\t\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\t\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\n\t\t},\n\t\n\t\tupdateMatrixWorld: function ( force ) {\n\t\n\t\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\t\n\t\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\t\n\t\t\t\tif ( this.parent === null ) {\n\t\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\n\t\t\t\tforce = true;\n\t\n\t\t\t}\n\t\n\t\t\t// update children\n\t\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\t\n\t\t\t\tthis.children[ i ].updateMatrixWorld( force );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\ttoJSON: function ( meta ) {\n\t\n\t\t\t// meta is '' when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || meta === '' );\n\t\n\t\t\tvar output = {};\n\t\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\t\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\t// standard Object3D serialization\n\t\n\t\t\tvar object = {};\n\t\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\t\n\t\t\tif ( this.name !== '' ) object.name = this.name;\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\t\tif ( this.visible === false ) object.visible = false;\n\t\n\t\t\tobject.matrix = this.matrix.toArray();\n\t\n\t\t\t//\n\t\n\t\t\tif ( this.geometry !== undefined ) {\n\t\n\t\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\t\n\t\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tobject.geometry = this.geometry.uuid;\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.material !== undefined ) {\n\t\n\t\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\t\n\t\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tobject.material = this.material.uuid;\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tif ( this.children.length > 0 ) {\n\t\n\t\t\t\tobject.children = [];\n\t\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\t\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( isRootObject ) {\n\t\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\t\n\t\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\t\tif ( images.length > 0 ) output.images = images;\n\t\n\t\t\t}\n\t\n\t\t\toutput.object = object;\n\t\n\t\t\treturn output;\n\t\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache ( cache ) {\n\t\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\t\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\t\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tclone: function ( recursive ) {\n\t\n\t\t\treturn new this.constructor().copy( this, recursive );\n\t\n\t\t},\n\t\n\t\tcopy: function ( source, recursive ) {\n\t\n\t\t\tif ( recursive === undefined ) recursive = true;\n\t\n\t\t\tthis.name = source.name;\n\t\n\t\t\tthis.up.copy( source.up );\n\t\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\t\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\t\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\n\t\t\tthis.visible = source.visible;\n\t\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\t\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\t\n\t\t\tif ( recursive === true ) {\n\t\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\t\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t} );\n\t\n\tTHREE.Object3DIdCount = 0;\n\t\n\t// File:src/core/Face3.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\n\t\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\t\n\t\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\t\n\t\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\t\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\t\n\t};\n\t\n\tTHREE.Face3.prototype = {\n\t\n\t\tconstructor: THREE.Face3,\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\t\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\t\n\t\t\tthis.materialIndex = source.materialIndex;\n\t\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\t\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\t\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/core/BufferAttribute.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.BufferAttribute = function ( array, itemSize, normalized ) {\n\t\n\t\tthis.uuid = THREE.Math.generateUUID();\n\t\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\t\n\t\tthis.version = 0;\n\t\tthis.normalized = normalized === true;\n\t\n\t};\n\t\n\tTHREE.BufferAttribute.prototype = {\n\t\n\t\tconstructor: THREE.BufferAttribute,\n\t\n\t\tget count() {\n\t\n\t\t\treturn this.array.length / this.itemSize;\n\t\n\t\t},\n\t\n\t\tset needsUpdate( value ) {\n\t\n\t\t\tif ( value === true ) this.version ++;\n\t\n\t\t},\n\t\n\t\tsetDynamic: function ( value ) {\n\t\n\t\t\tthis.dynamic = value;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\n\t\t\tthis.dynamic = source.dynamic;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\t\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\t\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\t\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcopyArray: function ( array ) {\n\t\n\t\t\tthis.array.set( array );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcopyColorsArray: function ( colors ) {\n\t\n\t\t\tvar array = this.array, offset = 0;\n\t\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar color = colors[ i ];\n\t\n\t\t\t\tif ( color === undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new THREE.Color();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcopyIndicesArray: function ( indices ) {\n\t\n\t\t\tvar array = this.array, offset = 0;\n\t\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar index = indices[ i ];\n\t\n\t\t\t\tarray[ offset ++ ] = index.a;\n\t\t\t\tarray[ offset ++ ] = index.b;\n\t\t\t\tarray[ offset ++ ] = index.c;\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcopyVector2sArray: function ( vectors ) {\n\t\n\t\t\tvar array = this.array, offset = 0;\n\t\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar vector = vectors[ i ];\n\t\n\t\t\t\tif ( vector === undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new THREE.Vector2();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcopyVector3sArray: function ( vectors ) {\n\t\n\t\t\tvar array = this.array, offset = 0;\n\t\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar vector = vectors[ i ];\n\t\n\t\t\t\tif ( vector === undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new THREE.Vector3();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcopyVector4sArray: function ( vectors ) {\n\t\n\t\t\tvar array = this.array, offset = 0;\n\t\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar vector = vectors[ i ];\n\t\n\t\t\t\tif ( vector === undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new THREE.Vector4();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tset: function ( value, offset ) {\n\t\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tthis.array.set( value, offset );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tgetX: function ( index ) {\n\t\n\t\t\treturn this.array[ index * this.itemSize ];\n\t\n\t\t},\n\t\n\t\tsetX: function ( index, x ) {\n\t\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tgetY: function ( index ) {\n\t\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\t\n\t\t},\n\t\n\t\tsetY: function ( index, y ) {\n\t\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tgetZ: function ( index ) {\n\t\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\t\n\t\t},\n\t\n\t\tsetZ: function ( index, z ) {\n\t\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tgetW: function ( index ) {\n\t\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\t\n\t\t},\n\t\n\t\tsetW: function ( index, w ) {\n\t\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetXY: function ( index, x, y ) {\n\t\n\t\t\tindex *= this.itemSize;\n\t\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetXYZ: function ( index, x, y, z ) {\n\t\n\t\t\tindex *= this.itemSize;\n\t\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\t\n\t\t\tindex *= this.itemSize;\n\t\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t}\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.Int8Attribute = function ( array, itemSize ) {\n\t\n\t\treturn new THREE.BufferAttribute( new Int8Array( array ), itemSize );\n\t\n\t};\n\t\n\tTHREE.Uint8Attribute = function ( array, itemSize ) {\n\t\n\t\treturn new THREE.BufferAttribute( new Uint8Array( array ), itemSize );\n\t\n\t};\n\t\n\tTHREE.Uint8ClampedAttribute = function ( array, itemSize ) {\n\t\n\t\treturn new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\t\n\t};\n\t\n\tTHREE.Int16Attribute = function ( array, itemSize ) {\n\t\n\t\treturn new THREE.BufferAttribute( new Int16Array( array ), itemSize );\n\t\n\t};\n\t\n\tTHREE.Uint16Attribute = function ( array, itemSize ) {\n\t\n\t\treturn new THREE.BufferAttribute( new Uint16Array( array ), itemSize );\n\t\n\t};\n\t\n\tTHREE.Int32Attribute = function ( array, itemSize ) {\n\t\n\t\treturn new THREE.BufferAttribute( new Int32Array( array ), itemSize );\n\t\n\t};\n\t\n\tTHREE.Uint32Attribute = function ( array, itemSize ) {\n\t\n\t\treturn new THREE.BufferAttribute( new Uint32Array( array ), itemSize );\n\t\n\t};\n\t\n\tTHREE.Float32Attribute = function ( array, itemSize ) {\n\t\n\t\treturn new THREE.BufferAttribute( new Float32Array( array ), itemSize );\n\t\n\t};\n\t\n\tTHREE.Float64Attribute = function ( array, itemSize ) {\n\t\n\t\treturn new THREE.BufferAttribute( new Float64Array( array ), itemSize );\n\t\n\t};\n\t\n\t\n\t// Deprecated\n\t\n\tTHREE.DynamicBufferAttribute = function ( array, itemSize ) {\n\t\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t\treturn new THREE.BufferAttribute( array, itemSize ).setDynamic( true );\n\t\n\t};\n\t\n\t// File:src/core/InstancedBufferAttribute.js\n\t\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\t\n\tTHREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {\n\t\n\t\tTHREE.BufferAttribute.call( this, array, itemSize );\n\t\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\n\t};\n\t\n\tTHREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );\n\tTHREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\n\t\n\tTHREE.InstancedBufferAttribute.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.BufferAttribute.prototype.copy.call( this, source );\n\t\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/core/InterleavedBuffer.js\n\t\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\t\n\tTHREE.InterleavedBuffer = function ( array, stride ) {\n\t\n\t\tthis.uuid = THREE.Math.generateUUID();\n\t\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\t\n\t\tthis.version = 0;\n\t\n\t};\n\t\n\tTHREE.InterleavedBuffer.prototype = {\n\t\n\t\tconstructor: THREE.InterleavedBuffer,\n\t\n\t\tget length () {\n\t\n\t\t\treturn this.array.length;\n\t\n\t\t},\n\t\n\t\tget count () {\n\t\n\t\t\treturn this.array.length / this.stride;\n\t\n\t\t},\n\t\n\t\tset needsUpdate( value ) {\n\t\n\t\t\tif ( value === true ) this.version ++;\n\t\n\t\t},\n\t\n\t\tsetDynamic: function ( value ) {\n\t\n\t\t\tthis.dynamic = value;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.dynamic = source.dynamic;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\t\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\t\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\t\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tset: function ( value, offset ) {\n\t\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tthis.array.set( value, offset );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/core/InstancedInterleavedBuffer.js\n\t\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\t\n\tTHREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {\n\t\n\t\tTHREE.InterleavedBuffer.call( this, array, stride );\n\t\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t\n\t};\n\t\n\tTHREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );\n\tTHREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\n\t\n\tTHREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.InterleavedBuffer.prototype.copy.call( this, source );\n\t\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/core/InterleavedBufferAttribute.js\n\t\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\t\n\tTHREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset, normalized ) {\n\t\n\t\tthis.uuid = THREE.Math.generateUUID();\n\t\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\t\n\t\tthis.normalized = normalized === true;\n\t\n\t};\n\t\n\t\n\tTHREE.InterleavedBufferAttribute.prototype = {\n\t\n\t\tconstructor: THREE.InterleavedBufferAttribute,\n\t\n\t\tget length() {\n\t\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\t\treturn this.array.length;\n\t\n\t\t},\n\t\n\t\tget count() {\n\t\n\t\t\treturn this.data.count;\n\t\n\t\t},\n\t\n\t\tget array() {\n\t\n\t\t\treturn this.data.array;\n\t\n\t\t},\n\t\n\t\tsetX: function ( index, x ) {\n\t\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetY: function ( index, y ) {\n\t\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetZ: function ( index, z ) {\n\t\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetW: function ( index, w ) {\n\t\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tgetX: function ( index ) {\n\t\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\t\n\t\t},\n\t\n\t\tgetY: function ( index ) {\n\t\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\t\n\t\t},\n\t\n\t\tgetZ: function ( index ) {\n\t\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\t\n\t\t},\n\t\n\t\tgetW: function ( index ) {\n\t\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\t\n\t\t},\n\t\n\t\tsetXY: function ( index, x, y ) {\n\t\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetXYZ: function ( index, x, y, z ) {\n\t\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\t\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/core/Geometry.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\t\n\tTHREE.Geometry = function () {\n\t\n\t\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\t\n\t\tthis.uuid = THREE.Math.generateUUID();\n\t\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\t\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [ [] ];\n\t\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\t\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\t\n\t\tthis.lineDistances = [];\n\t\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\t\n\t\t// update flags\n\t\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\t\n\t};\n\t\n\tObject.assign( THREE.Geometry.prototype, THREE.EventDispatcher.prototype, {\n\t\n\t\tapplyMatrix: function ( matrix ) {\n\t\n\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\t\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\t\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\t\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.boundingBox !== null ) {\n\t\n\t\t\t\tthis.computeBoundingBox();\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.boundingSphere !== null ) {\n\t\n\t\t\t\tthis.computeBoundingSphere();\n\t\n\t\t\t}\n\t\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\trotateX: function () {\n\t\n\t\t\t// rotate geometry around world x-axis\n\t\n\t\t\tvar m1;\n\t\n\t\t\treturn function rotateX( angle ) {\n\t\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\t\n\t\t\t\tm1.makeRotationX( angle );\n\t\n\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\trotateY: function () {\n\t\n\t\t\t// rotate geometry around world y-axis\n\t\n\t\t\tvar m1;\n\t\n\t\t\treturn function rotateY( angle ) {\n\t\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\t\n\t\t\t\tm1.makeRotationY( angle );\n\t\n\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\trotateZ: function () {\n\t\n\t\t\t// rotate geometry around world z-axis\n\t\n\t\t\tvar m1;\n\t\n\t\t\treturn function rotateZ( angle ) {\n\t\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\t\n\t\t\t\tm1.makeRotationZ( angle );\n\t\n\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\ttranslate: function () {\n\t\n\t\t\t// translate geometry\n\t\n\t\t\tvar m1;\n\t\n\t\t\treturn function translate( x, y, z ) {\n\t\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\t\n\t\t\t\tm1.makeTranslation( x, y, z );\n\t\n\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tscale: function () {\n\t\n\t\t\t// scale geometry\n\t\n\t\t\tvar m1;\n\t\n\t\t\treturn function scale( x, y, z ) {\n\t\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\t\n\t\t\t\tm1.makeScale( x, y, z );\n\t\n\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tlookAt: function () {\n\t\n\t\t\tvar obj;\n\t\n\t\t\treturn function lookAt( vector ) {\n\t\n\t\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\n\t\n\t\t\t\tobj.lookAt( vector );\n\t\n\t\t\t\tobj.updateMatrix();\n\t\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tfromBufferGeometry: function ( geometry ) {\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\t\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\t\n\t\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\t\n\t\t\tvar tempNormals = [];\n\t\t\tvar tempUVs = [];\n\t\t\tvar tempUVs2 = [];\n\t\n\t\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\t\n\t\t\t\tscope.vertices.push( new THREE.Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\t\n\t\t\t\tif ( normals !== undefined ) {\n\t\n\t\t\t\t\ttempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( colors !== undefined ) {\n\t\n\t\t\t\t\tscope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( uvs !== undefined ) {\n\t\n\t\t\t\t\ttempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( uvs2 !== undefined ) {\n\t\n\t\t\t\t\ttempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\t\n\t\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\t\n\t\t\t\tvar face = new THREE.Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\t\n\t\t\t\tscope.faces.push( face );\n\t\n\t\t\t\tif ( uvs !== undefined ) {\n\t\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( uvs2 !== undefined ) {\n\t\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( indices !== undefined ) {\n\t\n\t\t\t\tvar groups = geometry.groups;\n\t\n\t\t\t\tif ( groups.length > 0 ) {\n\t\n\t\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\t\n\t\t\t\t\t\tvar group = groups[ i ];\n\t\n\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\tvar count = group.count;\n\t\n\t\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\t\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\t\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\t\n\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tthis.computeFaceNormals();\n\t\n\t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t\t\t}\n\t\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcenter: function () {\n\t\n\t\t\tthis.computeBoundingBox();\n\t\n\t\t\tvar offset = this.boundingBox.center().negate();\n\t\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\t\n\t\t\treturn offset;\n\t\n\t\t},\n\t\n\t\tnormalize: function () {\n\t\n\t\t\tthis.computeBoundingSphere();\n\t\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\t\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\t\n\t\t\tvar matrix = new THREE.Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\t\n\t\t\tthis.applyMatrix( matrix );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcomputeFaceNormals: function () {\n\t\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\t\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\tvar face = this.faces[ f ];\n\t\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\t\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\t\n\t\t\t\tcb.normalize();\n\t\n\t\t\t\tface.normal.copy( cb );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\t\n\t\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\t\n\t\t\tvar v, vl, f, fl, face, vertices;\n\t\n\t\t\tvertices = new Array( this.vertices.length );\n\t\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\t\n\t\t\t\tvertices[ v ] = new THREE.Vector3();\n\t\n\t\t\t}\n\t\n\t\t\tif ( areaWeighted ) {\n\t\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\t\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\t\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\tface = this.faces[ f ];\n\t\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\t\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\t\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\tface = this.faces[ f ];\n\t\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\t\n\t\t\t\tvertices[ v ].normalize();\n\t\n\t\t\t}\n\t\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\tface = this.faces[ f ];\n\t\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\t\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.faces.length > 0 ) {\n\t\n\t\t\t\tthis.normalsNeedUpdate = true;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tcomputeMorphNormals: function () {\n\t\n\t\t\tvar i, il, f, fl, face;\n\t\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\t\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\tface = this.faces[ f ];\n\t\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\t\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\t\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\t\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\t\n\t\t\tvar tmpGeo = new THREE.Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\t\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\t\n\t\t\t\t// create on first access\n\t\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\t\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\t\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\t\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\t\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\t\tfaceNormal = new THREE.Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\n\t\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\t\n\t\t\t\t// set vertices to morph target\n\t\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\t\n\t\t\t\t// compute morph normals\n\t\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\t\n\t\t\t\t// store morph normals\n\t\n\t\t\t\tvar faceNormal, vertexNormals;\n\t\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\tface = this.faces[ f ];\n\t\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\t\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\t\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// restore original normals\n\t\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\tface = this.faces[ f ];\n\t\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tcomputeTangents: function () {\n\t\n\t\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\t\n\t\t},\n\t\n\t\tcomputeLineDistances: function () {\n\t\n\t\t\tvar d = 0;\n\t\t\tvar vertices = this.vertices;\n\t\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t\t\t\tif ( i > 0 ) {\n\t\n\t\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.lineDistances[ i ] = d;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tcomputeBoundingBox: function () {\n\t\n\t\t\tif ( this.boundingBox === null ) {\n\t\n\t\t\t\tthis.boundingBox = new THREE.Box3();\n\t\n\t\t\t}\n\t\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\t\n\t\t},\n\t\n\t\tcomputeBoundingSphere: function () {\n\t\n\t\t\tif ( this.boundingSphere === null ) {\n\t\n\t\t\t\tthis.boundingSphere = new THREE.Sphere();\n\t\n\t\t\t}\n\t\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\t\n\t\t},\n\t\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\t\n\t\t\tif ( geometry instanceof THREE.Geometry === false ) {\n\t\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tvar normalMatrix,\n\t\t\tvertexOffset = this.vertices.length,\n\t\t\tvertices1 = this.vertices,\n\t\t\tvertices2 = geometry.vertices,\n\t\t\tfaces1 = this.faces,\n\t\t\tfaces2 = geometry.faces,\n\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ];\n\t\n\t\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\t\n\t\t\tif ( matrix !== undefined ) {\n\t\n\t\t\t\tnormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\t\n\t\t\t}\n\t\n\t\t\t// vertices\n\t\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\t\n\t\t\t\tvar vertex = vertices2[ i ];\n\t\n\t\t\t\tvar vertexCopy = vertex.clone();\n\t\n\t\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\t\n\t\t\t\tvertices1.push( vertexCopy );\n\t\n\t\t\t}\n\t\n\t\t\t// faces\n\t\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\t\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\tfaceVertexColors = face.vertexColors;\n\t\n\t\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\t\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\t\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\t\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\t\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfaceCopy.color.copy( face.color );\n\t\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\t\n\t\t\t\tfaces1.push( faceCopy );\n\t\n\t\t\t}\n\t\n\t\t\t// uvs\n\t\n\t\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\t\n\t\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\t\n\t\t\t\tif ( uv === undefined ) {\n\t\n\t\t\t\t\tcontinue;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tuvs1.push( uvCopy );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tmergeMesh: function ( mesh ) {\n\t\n\t\t\tif ( mesh instanceof THREE.Mesh === false ) {\n\t\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\t\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\t\n\t\t},\n\t\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\t\n\t\tmergeVertices: function () {\n\t\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\t\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\t\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\t\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\t\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\t\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\t\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\t\n\t\t\t\tface = this.faces[ i ];\n\t\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\t\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\t\n\t\t\t\tvar dupIndex = - 1;\n\t\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\t\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\t\n\t\t\t\t\t\tdupIndex = n;\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\t\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\t\n\t\t\t\tthis.faces.splice( idx, 1 );\n\t\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// Use unique set of vertices\n\t\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\t\n\t\t},\n\t\n\t\tsortFacesByMaterialIndex: function () {\n\t\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\t\n\t\t\t// tag faces\n\t\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\t\n\t\t\t\tfaces[ i ]._id = i;\n\t\n\t\t\t}\n\t\n\t\t\t// sort faces\n\t\n\t\t\tfunction materialIndexSort( a, b ) {\n\t\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\t\n\t\t\t}\n\t\n\t\t\tfaces.sort( materialIndexSort );\n\t\n\t\t\t// sort uvs\n\t\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\t\n\t\t\tvar newUvs1, newUvs2;\n\t\n\t\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\t\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\t\n\t\t\t\tvar id = faces[ i ]._id;\n\t\n\t\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\t\n\t\t\t}\n\t\n\t\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\t\n\t\t},\n\t\n\t\ttoJSON: function () {\n\t\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\t// standard Geometry serialization\n\t\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t\t\tif ( this.parameters !== undefined ) {\n\t\n\t\t\t\tvar parameters = this.parameters;\n\t\n\t\t\t\tfor ( var key in parameters ) {\n\t\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn data;\n\t\n\t\t\t}\n\t\n\t\t\tvar vertices = [];\n\t\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\t\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\t\n\t\t\t}\n\t\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\t\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\t\n\t\t\t\tvar face = this.faces[ i ];\n\t\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\t\n\t\t\t\tvar faceType = 0;\n\t\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\t\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\t\n\t\t\t\tif ( hasFaceVertexUv ) {\n\t\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\t\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( hasFaceNormal ) {\n\t\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( hasFaceColor ) {\n\t\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( hasFaceVertexColor ) {\n\t\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\t\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction setBit( value, position, enabled ) {\n\t\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\t\n\t\t\t}\n\t\n\t\t\tfunction getNormalIndex( normal ) {\n\t\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\t\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\t\n\t\t\t\t\treturn normalsHash[ hash ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\t\n\t\t\t\treturn normalsHash[ hash ];\n\t\n\t\t\t}\n\t\n\t\t\tfunction getColorIndex( color ) {\n\t\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\t\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\t\n\t\t\t\t\treturn colorsHash[ hash ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\t\n\t\t\t\treturn colorsHash[ hash ];\n\t\n\t\t\t}\n\t\n\t\t\tfunction getUvIndex( uv ) {\n\t\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\t\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\t\n\t\t\t\t\treturn uvsHash[ hash ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\t\n\t\t\t\treturn uvsHash[ hash ];\n\t\n\t\t\t}\n\t\n\t\t\tdata.data = {};\n\t\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\t\n\t\t\treturn data;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\t/*\n\t\t\t// Handle primitives\n\t\n\t\t\tvar parameters = this.parameters;\n\t\n\t\t\tif ( parameters !== undefined ) {\n\t\n\t\t\t\tvar values = [];\n\t\n\t\t\t\tfor ( var key in parameters ) {\n\t\n\t\t\t\t\tvalues.push( parameters[ key ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\t\tthis.constructor.apply( geometry, values );\n\t\t\t\treturn geometry;\n\t\n\t\t\t}\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\t\t*/\n\t\n\t\t\treturn new THREE.Geometry().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tthis.vertices = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [ [] ];\n\t\n\t\t\tvar vertices = source.vertices;\n\t\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\t\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\t\n\t\t\t}\n\t\n\t\t\tvar faces = source.faces;\n\t\n\t\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\t\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\t\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\t\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\t\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\t\n\t\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\t\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\t\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdispose: function () {\n\t\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t\t}\n\t\n\t} );\n\t\n\tTHREE.GeometryIdCount = 0;\n\t\n\t// File:src/core/DirectGeometry.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.DirectGeometry = function () {\n\t\n\t\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\t\n\t\tthis.uuid = THREE.Math.generateUUID();\n\t\n\t\tthis.name = '';\n\t\tthis.type = 'DirectGeometry';\n\t\n\t\tthis.indices = [];\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\t\n\t\tthis.groups = [];\n\t\n\t\tthis.morphTargets = {};\n\t\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\t\n\t\t// this.lineDistances = [];\n\t\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\t\n\t\t// update flags\n\t\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\t\n\t};\n\t\n\tObject.assign( THREE.DirectGeometry.prototype, THREE.EventDispatcher.prototype, {\n\t\n\t\tcomputeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\n\t\tcomputeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\n\t\n\t\tcomputeFaceNormals: function () {\n\t\n\t\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\t\n\t\t},\n\t\n\t\tcomputeVertexNormals: function () {\n\t\n\t\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\t\n\t\t},\n\t\n\t\tcomputeGroups: function ( geometry ) {\n\t\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex;\n\t\n\t\t\tvar faces = geometry.faces;\n\t\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\t\n\t\t\t\tvar face = faces[ i ];\n\t\n\t\t\t\t// materials\n\t\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\t\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\t\n\t\t\t\t\tif ( group !== undefined ) {\n\t\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( group !== undefined ) {\n\t\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\t\n\t\t\t}\n\t\n\t\t\tthis.groups = groups;\n\t\n\t\t},\n\t\n\t\tfromGeometry: function ( geometry ) {\n\t\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\t\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\t\n\t\t\t// morphs\n\t\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\t\n\t\t\tvar morphTargetsPosition;\n\t\n\t\t\tif ( morphTargetsLength > 0 ) {\n\t\n\t\t\t\tmorphTargetsPosition = [];\n\t\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\t\n\t\t\t\t\tmorphTargetsPosition[ i ] = [];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\t\n\t\t\t}\n\t\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\t\n\t\t\tvar morphTargetsNormal;\n\t\n\t\t\tif ( morphNormalsLength > 0 ) {\n\t\n\t\t\t\tmorphTargetsNormal = [];\n\t\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\t\n\t\t\t\t\tmorphTargetsNormal[ i ] = [];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\t\n\t\t\t}\n\t\n\t\t\t// skins\n\t\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\t\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\t\n\t\t\t//\n\t\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\t\n\t\t\t\tvar face = faces[ i ];\n\t\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\t\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\t\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\t\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar normal = face.normal;\n\t\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar vertexColors = face.vertexColors;\n\t\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\t\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar color = face.color;\n\t\n\t\t\t\t\tthis.colors.push( color, color, color );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\t\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\t\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\t\n\t\t\t\t\t\tthis.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\t\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\t\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\t\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\t\n\t\t\t\t\t\tthis.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// morphs\n\t\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\t\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\t\n\t\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\t\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\t\n\t\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// skins\n\t\n\t\t\t\tif ( hasSkinIndices ) {\n\t\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( hasSkinWeights ) {\n\t\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tthis.computeGroups( geometry );\n\t\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdispose: function () {\n\t\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/core/BufferGeometry.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.BufferGeometry = function () {\n\t\n\t\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\t\n\t\tthis.uuid = THREE.Math.generateUUID();\n\t\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\t\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\n\t\tthis.morphAttributes = {};\n\t\n\t\tthis.groups = [];\n\t\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\t\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\t\n\t};\n\t\n\tObject.assign( THREE.BufferGeometry.prototype, THREE.EventDispatcher.prototype, {\n\t\n\t\tgetIndex: function () {\n\t\n\t\t\treturn this.index;\n\t\n\t\t},\n\t\n\t\tsetIndex: function ( index ) {\n\t\n\t\t\tthis.index = index;\n\t\n\t\t},\n\t\n\t\taddAttribute: function ( name, attribute ) {\n\t\n\t\t\tif ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\t\n\t\t\t\tthis.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\t\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tif ( name === 'index' ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\t\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tthis.attributes[ name ] = attribute;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tgetAttribute: function ( name ) {\n\t\n\t\t\treturn this.attributes[ name ];\n\t\n\t\t},\n\t\n\t\tremoveAttribute: function ( name ) {\n\t\n\t\t\tdelete this.attributes[ name ];\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\taddGroup: function ( start, count, materialIndex ) {\n\t\n\t\t\tthis.groups.push( {\n\t\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\t\n\t\t\t} );\n\t\n\t\t},\n\t\n\t\tclearGroups: function () {\n\t\n\t\t\tthis.groups = [];\n\t\n\t\t},\n\t\n\t\tsetDrawRange: function ( start, count ) {\n\t\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\t\n\t\t},\n\t\n\t\tapplyMatrix: function ( matrix ) {\n\t\n\t\t\tvar position = this.attributes.position;\n\t\n\t\t\tif ( position !== undefined ) {\n\t\n\t\t\t\tmatrix.applyToVector3Array( position.array );\n\t\t\t\tposition.needsUpdate = true;\n\t\n\t\t\t}\n\t\n\t\t\tvar normal = this.attributes.normal;\n\t\n\t\t\tif ( normal !== undefined ) {\n\t\n\t\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\t\n\t\t\t\tnormalMatrix.applyToVector3Array( normal.array );\n\t\t\t\tnormal.needsUpdate = true;\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.boundingBox !== null ) {\n\t\n\t\t\t\tthis.computeBoundingBox();\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.boundingSphere !== null ) {\n\t\n\t\t\t\tthis.computeBoundingSphere();\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\trotateX: function () {\n\t\n\t\t\t// rotate geometry around world x-axis\n\t\n\t\t\tvar m1;\n\t\n\t\t\treturn function rotateX( angle ) {\n\t\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\t\n\t\t\t\tm1.makeRotationX( angle );\n\t\n\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\trotateY: function () {\n\t\n\t\t\t// rotate geometry around world y-axis\n\t\n\t\t\tvar m1;\n\t\n\t\t\treturn function rotateY( angle ) {\n\t\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\t\n\t\t\t\tm1.makeRotationY( angle );\n\t\n\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\trotateZ: function () {\n\t\n\t\t\t// rotate geometry around world z-axis\n\t\n\t\t\tvar m1;\n\t\n\t\t\treturn function rotateZ( angle ) {\n\t\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\t\n\t\t\t\tm1.makeRotationZ( angle );\n\t\n\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\ttranslate: function () {\n\t\n\t\t\t// translate geometry\n\t\n\t\t\tvar m1;\n\t\n\t\t\treturn function translate( x, y, z ) {\n\t\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\t\n\t\t\t\tm1.makeTranslation( x, y, z );\n\t\n\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tscale: function () {\n\t\n\t\t\t// scale geometry\n\t\n\t\t\tvar m1;\n\t\n\t\t\treturn function scale( x, y, z ) {\n\t\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\t\n\t\t\t\tm1.makeScale( x, y, z );\n\t\n\t\t\t\tthis.applyMatrix( m1 );\n\t\n\t\t\t\treturn this;\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tlookAt: function () {\n\t\n\t\t\tvar obj;\n\t\n\t\t\treturn function lookAt( vector ) {\n\t\n\t\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\n\t\n\t\t\t\tobj.lookAt( vector );\n\t\n\t\t\t\tobj.updateMatrix();\n\t\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tcenter: function () {\n\t\n\t\t\tthis.computeBoundingBox();\n\t\n\t\t\tvar offset = this.boundingBox.center().negate();\n\t\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\t\n\t\t\treturn offset;\n\t\n\t\t},\n\t\n\t\tsetFromObject: function ( object ) {\n\t\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\t\n\t\t\tvar geometry = object.geometry;\n\t\n\t\t\tif ( object instanceof THREE.Points || object instanceof THREE.Line ) {\n\t\n\t\t\t\tvar positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );\n\t\n\t\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\t\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\t\n\t\t\t\t\tvar lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );\n\t\n\t\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( object instanceof THREE.Mesh ) {\n\t\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\t\tthis.fromGeometry( geometry );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tupdateFromObject: function ( object ) {\n\t\n\t\t\tvar geometry = object.geometry;\n\t\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\t\n\t\t\t\tvar direct = geometry.__directGeometry;\n\t\n\t\t\t\tif ( direct === undefined || geometry.elementsNeedUpdate === true ) {\n\t\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate || geometry.elementsNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate || geometry.elementsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate || geometry.elementsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate || geometry.elementsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate || geometry.elementsNeedUpdate;\n\t\n\t\t\t\tgeometry.elementsNeedUpdate = false;\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\t\n\t\t\t\tgeometry = direct;\n\t\n\t\t\t}\n\t\n\t\t\tvar attribute;\n\t\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\t\n\t\t\t\tattribute = this.attributes.position;\n\t\n\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\n\t\t\t}\n\t\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\t\n\t\t\t\tattribute = this.attributes.normal;\n\t\n\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\n\t\t\t}\n\t\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\t\n\t\t\t\tattribute = this.attributes.color;\n\t\n\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\n\t\t\t}\n\t\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\t\n\t\t\t\tattribute = this.attributes.uv;\n\t\n\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\n\t\t\t}\n\t\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\t\n\t\t\t\tattribute = this.attributes.lineDistance;\n\t\n\t\t\t\tif ( attribute !== undefined ) {\n\t\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\t\n\t\t\t}\n\t\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\t\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\t\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tfromGeometry: function ( geometry ) {\n\t\n\t\t\tgeometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );\n\t\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\t\n\t\t},\n\t\n\t\tfromDirectGeometry: function ( geometry ) {\n\t\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\t\n\t\t\tif ( geometry.normals.length > 0 ) {\n\t\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\t\n\t\t\t}\n\t\n\t\t\tif ( geometry.colors.length > 0 ) {\n\t\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\t\n\t\t\t}\n\t\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\t\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\t\n\t\t\t}\n\t\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\t\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\t\n\t\t\t}\n\t\n\t\t\tif ( geometry.indices.length > 0 ) {\n\t\n\t\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n\t\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t\t\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\t\n\t\t\t}\n\t\n\t\t\t// groups\n\t\n\t\t\tthis.groups = geometry.groups;\n\t\n\t\t\t// morphs\n\t\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\t\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\t\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\n\t\t\t\t\tvar attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );\n\t\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\t\n\t\t\t}\n\t\n\t\t\t// skinning\n\t\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\t\n\t\t\t\tvar skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\t\n\t\t\t}\n\t\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\t\n\t\t\t\tvar skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\t\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\t\n\t\t\t}\n\t\n\t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcomputeBoundingBox: function () {\n\t\n\t\t\tif ( this.boundingBox === null ) {\n\t\n\t\t\t\tthis.boundingBox = new THREE.Box3();\n\t\n\t\t\t}\n\t\n\t\t\tvar positions = this.attributes.position.array;\n\t\n\t\t\tif ( positions !== undefined ) {\n\t\n\t\t\t\tthis.boundingBox.setFromArray( positions );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.boundingBox.makeEmpty();\n\t\n\t\t\t}\n\t\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\t\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tcomputeBoundingSphere: function () {\n\t\n\t\t\tvar box = new THREE.Box3();\n\t\t\tvar vector = new THREE.Vector3();\n\t\n\t\t\treturn function computeBoundingSphere() {\n\t\n\t\t\t\tif ( this.boundingSphere === null ) {\n\t\n\t\t\t\t\tthis.boundingSphere = new THREE.Sphere();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar positions = this.attributes.position;\n\t\n\t\t\t\tif ( positions ) {\n\t\n\t\t\t\t\tvar array = positions.array;\n\t\t\t\t\tvar center = this.boundingSphere.center;\n\t\n\t\t\t\t\tbox.setFromArray( array );\n\t\t\t\t\tbox.center( center );\n\t\n\t\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\t\n\t\t\t\t\tvar maxRadiusSq = 0;\n\t\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\t\n\t\t\t\t\t\tvector.fromArray( array, i );\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\t\n\t\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\t\n\t\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\tcomputeFaceNormals: function () {\n\t\n\t\t\t// backwards compatibility\n\t\n\t\t},\n\t\n\t\tcomputeVertexNormals: function () {\n\t\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\t\t\tvar groups = this.groups;\n\t\n\t\t\tif ( attributes.position ) {\n\t\n\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\tif ( attributes.normal === undefined ) {\n\t\n\t\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// reset existing normals to zero\n\t\n\t\t\t\t\tvar array = attributes.normal.array;\n\t\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\tarray[ i ] = 0;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar normals = attributes.normal.array;\n\t\n\t\t\t\tvar vA, vB, vC,\n\t\n\t\t\t\tpA = new THREE.Vector3(),\n\t\t\t\tpB = new THREE.Vector3(),\n\t\t\t\tpC = new THREE.Vector3(),\n\t\n\t\t\t\tcb = new THREE.Vector3(),\n\t\t\t\tab = new THREE.Vector3();\n\t\n\t\t\t\t// indexed elements\n\t\n\t\t\t\tif ( index ) {\n\t\n\t\t\t\t\tvar indices = index.array;\n\t\n\t\t\t\t\tif ( groups.length === 0 ) {\n\t\n\t\t\t\t\t\tthis.addGroup( 0, indices.length );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\t\n\t\t\t\t\t\tvar group = groups[ j ];\n\t\n\t\t\t\t\t\tvar start = group.start;\n\t\t\t\t\t\tvar count = group.count;\n\t\n\t\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\t\n\t\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\t\n\t\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\t\tpC.fromArray( positions, vC );\n\t\n\t\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\t\tcb.cross( ab );\n\t\n\t\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\t\n\t\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\t\n\t\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\t\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\t\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\t\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\t\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\t\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.normalizeNormals();\n\t\n\t\t\t\tattributes.normal.needsUpdate = true;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tmerge: function ( geometry, offset ) {\n\t\n\t\t\tif ( geometry instanceof THREE.BufferGeometry === false ) {\n\t\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\n\t\t\tvar attributes = this.attributes;\n\t\n\t\t\tfor ( var key in attributes ) {\n\t\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\t\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\t\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\t\n\t\t\t\tvar attributeSize = attribute2.itemSize;\n\t\n\t\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\t\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tnormalizeNormals: function () {\n\t\n\t\t\tvar normals = this.attributes.normal.array;\n\t\n\t\t\tvar x, y, z, n;\n\t\n\t\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\t\n\t\t\t\tx = normals[ i ];\n\t\t\t\ty = normals[ i + 1 ];\n\t\t\t\tz = normals[ i + 2 ];\n\t\n\t\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\t\n\t\t\t\tnormals[ i ] *= n;\n\t\t\t\tnormals[ i + 1 ] *= n;\n\t\t\t\tnormals[ i + 2 ] *= n;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\ttoNonIndexed: function () {\n\t\n\t\t\tif ( this.index === null ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\t\n\t\t\t}\n\t\n\t\t\tvar geometry2 = new THREE.BufferGeometry();\n\t\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\t\n\t\t\tfor ( var name in attributes ) {\n\t\n\t\t\t\tvar attribute = attributes[ name ];\n\t\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\t\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\t\n\t\t\t\tvar index = 0, index2 = 0;\n\t\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\t\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\t\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tgeometry2.addAttribute( name, new THREE.BufferAttribute( array2, itemSize ) );\n\t\n\t\t\t}\n\t\n\t\t\treturn geometry2;\n\t\n\t\t},\n\t\n\t\ttoJSON: function () {\n\t\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\t// standard BufferGeometry serialization\n\t\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t\t\tif ( this.parameters !== undefined ) {\n\t\n\t\t\t\tvar parameters = this.parameters;\n\t\n\t\t\t\tfor ( var key in parameters ) {\n\t\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn data;\n\t\n\t\t\t}\n\t\n\t\t\tdata.data = { attributes: {} };\n\t\n\t\t\tvar index = this.index;\n\t\n\t\t\tif ( index !== null ) {\n\t\n\t\t\t\tvar array = Array.prototype.slice.call( index.array );\n\t\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: array\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\tvar attributes = this.attributes;\n\t\n\t\t\tfor ( var key in attributes ) {\n\t\n\t\t\t\tvar attribute = attributes[ key ];\n\t\n\t\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\t\n\t\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: attribute.normalized\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\tvar groups = this.groups;\n\t\n\t\t\tif ( groups.length > 0 ) {\n\t\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\t\n\t\t\t}\n\t\n\t\t\tvar boundingSphere = this.boundingSphere;\n\t\n\t\t\tif ( boundingSphere !== null ) {\n\t\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\treturn data;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\t/*\n\t\t\t// Handle primitives\n\t\n\t\t\tvar parameters = this.parameters;\n\t\n\t\t\tif ( parameters !== undefined ) {\n\t\n\t\t\t\tvar values = [];\n\t\n\t\t\t\tfor ( var key in parameters ) {\n\t\n\t\t\t\t\tvalues.push( parameters[ key ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\t\tthis.constructor.apply( geometry, values );\n\t\t\t\treturn geometry;\n\t\n\t\t\t}\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\t\t*/\n\t\n\t\t\treturn new THREE.BufferGeometry().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tvar index = source.index;\n\t\n\t\t\tif ( index !== null ) {\n\t\n\t\t\t\tthis.setIndex( index.clone() );\n\t\n\t\t\t}\n\t\n\t\t\tvar attributes = source.attributes;\n\t\n\t\t\tfor ( var name in attributes ) {\n\t\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.addAttribute( name, attribute.clone() );\n\t\n\t\t\t}\n\t\n\t\t\tvar groups = source.groups;\n\t\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdispose: function () {\n\t\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t\t}\n\t\n\t} );\n\t\n\tTHREE.BufferGeometry.MaxIndex = 65535;\n\t\n\t// File:src/core/InstancedBufferGeometry.js\n\t\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\t\n\tTHREE.InstancedBufferGeometry = function () {\n\t\n\t\tTHREE.BufferGeometry.call( this );\n\t\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\t\n\t};\n\t\n\tTHREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\n\t\n\tTHREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\t\n\t\tthis.groups.push( {\n\t\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tinstances: instances\n\t\n\t\t} );\n\t\n\t};\n\t\n\tTHREE.InstancedBufferGeometry.prototype.copy = function ( source ) {\n\t\n\t\tvar index = source.index;\n\t\n\t\tif ( index !== null ) {\n\t\n\t\t\tthis.setIndex( index.clone() );\n\t\n\t\t}\n\t\n\t\tvar attributes = source.attributes;\n\t\n\t\tfor ( var name in attributes ) {\n\t\n\t\t\tvar attribute = attributes[ name ];\n\t\t\tthis.addAttribute( name, attribute.clone() );\n\t\n\t\t}\n\t\n\t\tvar groups = source.groups;\n\t\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t\t\tvar group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.instances );\n\t\n\t\t}\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/core/Uniform.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.Uniform = function ( value ) {\n\t\n\t\tif ( typeof value === 'string' ) {\n\t\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\t\n\t\t}\n\t\n\t\tthis.value = value;\n\t\n\t\tthis.dynamic = false;\n\t\n\t};\n\t\n\tTHREE.Uniform.prototype = {\n\t\n\t\tconstructor: THREE.Uniform,\n\t\n\t\tonUpdate: function ( callback ) {\n\t\n\t\t\tthis.dynamic = true;\n\t\t\tthis.onUpdateCallback = callback;\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/animation/AnimationAction.js\n\t\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\t\n\tTHREE.AnimationAction = function() {\n\t\n\t\tthrow new Error( \"THREE.AnimationAction: \" +\n\t\t\t\t\"Use mixer.clipAction for construction.\" );\n\t\n\t};\n\t\n\tTHREE.AnimationAction._new =\n\t\t\tfunction AnimationAction( mixer, clip, localRoot ) {\n\t\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\t\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\t\n\t\tvar interpolantSettings = {\n\t\t\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\n\t\t\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\n\t\t};\n\t\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\t\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\t\n\t\t}\n\t\n\t\tthis._interpolantSettings = interpolantSettings;\n\t\n\t\tthis._interpolants = interpolants;\t// bound by the mixer\n\t\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\t\n\t\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\t\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\t\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\t\n\t\tthis.loop = THREE.LoopRepeat;\n\t\tthis._loopCount = -1;\n\t\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\t\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\t\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\t\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\t\n\t\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\t\n\t\tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n\t\tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\t\n\t\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\t\n\t\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\t\n\t};\n\t\n\tTHREE.AnimationAction._new.prototype = {\n\t\n\t\tconstructor: THREE.AnimationAction._new,\n\t\n\t\t// State & Scheduling\n\t\n\t\tplay: function() {\n\t\n\t\t\tthis._mixer._activateAction( this );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tstop: function() {\n\t\n\t\t\tthis._mixer._deactivateAction( this );\n\t\n\t\t\treturn this.reset();\n\t\n\t\t},\n\t\n\t\treset: function() {\n\t\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\t\n\t\t\tthis.time = 0;\t\t\t// restart clip\n\t\t\tthis._loopCount = -1;\t// forget previous loops\n\t\t\tthis._startTime = null;\t// forget scheduling\n\t\n\t\t\treturn this.stopFading().stopWarping();\n\t\n\t\t},\n\t\n\t\tisRunning: function() {\n\t\n\t\t\tvar start = this._startTime;\n\t\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\t\n\t\t},\n\t\n\t\t// return true when play has been called\n\t\tisScheduled: function() {\n\t\n\t\t\treturn this._mixer._isActiveAction( this );\n\t\n\t\t},\n\t\n\t\tstartAt: function( time ) {\n\t\n\t\t\tthis._startTime = time;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetLoop: function( mode, repetitions ) {\n\t\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\t// Weight\n\t\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function( weight ) {\n\t\n\t\t\tthis.weight = weight;\n\t\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\n\t\t\treturn this.stopFading();\n\t\n\t\t},\n\t\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function() {\n\t\n\t\t\treturn this._effectiveWeight;\n\t\n\t\t},\n\t\n\t\tfadeIn: function( duration ) {\n\t\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\t\n\t\t},\n\t\n\t\tfadeOut: function( duration ) {\n\t\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\t\n\t\t},\n\t\n\t\tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\t\n\t\t\tvar mixer = this._mixer;\n\t\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\t\n\t\t\tif( warp ) {\n\t\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\t\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\t\n\t\t},\n\t\n\t\tstopFading: function() {\n\t\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\t\n\t\t\tif ( weightInterpolant !== null ) {\n\t\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\t// Time Scale Control\n\t\n\t\t// set the weight stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function( timeScale ) {\n\t\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\t\n\t\t\treturn this.stopWarping();\n\t\n\t\t},\n\t\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function() {\n\t\n\t\t\treturn this._effectiveTimeScale;\n\t\n\t\t},\n\t\n\t\tsetDuration: function( duration ) {\n\t\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\n\t\t\treturn this.stopWarping();\n\t\n\t\t},\n\t\n\t\tsyncWith: function( action ) {\n\t\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\t\n\t\t\treturn this.stopWarping();\n\t\n\t\t},\n\t\n\t\thalt: function( duration ) {\n\t\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\t\n\t\t},\n\t\n\t\twarp: function( startTimeScale, endTimeScale, duration ) {\n\t\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\t\n\t\t\t\ttimeScale = this.timeScale;\n\t\n\t\t\tif ( interpolant === null ) {\n\t\n\t\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\n\t\t\t}\n\t\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\t\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\t\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tstopWarping: function() {\n\t\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\t\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\t\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\t// Object Accessors\n\t\n\t\tgetMixer: function() {\n\t\n\t\t\treturn this._mixer;\n\t\n\t\t},\n\t\n\t\tgetClip: function() {\n\t\n\t\t\treturn this._clip;\n\t\n\t\t},\n\t\n\t\tgetRoot: function() {\n\t\n\t\t\treturn this._localRoot || this._mixer._root;\n\t\n\t\t},\n\t\n\t\t// Interna\n\t\n\t\t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n\t\t\t// called by the mixer\n\t\n\t\t\tvar startTime = this._startTime;\n\t\n\t\t\tif ( startTime !== null ) {\n\t\n\t\t\t\t// check for scheduled start of action\n\t\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\t\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// start\n\t\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\n\t\t\t}\n\t\n\t\t\t// apply time scale and advance time\n\t\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\t\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\t\n\t\t\tvar weight = this._updateWeight( time );\n\t\n\t\t\tif ( weight > 0 ) {\n\t\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\t\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\t\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t_updateWeight: function( time ) {\n\t\n\t\t\tvar weight = 0;\n\t\n\t\t\tif ( this.enabled ) {\n\t\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\t\n\t\t\t\tif ( interpolant !== null ) {\n\t\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\t\n\t\t\t\t\tweight *= interpolantValue;\n\t\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\t\n\t\t\t\t\t\tthis.stopFading();\n\t\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\t\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\t\n\t\t},\n\t\n\t\t_updateTimeScale: function( time ) {\n\t\n\t\t\tvar timeScale = 0;\n\t\n\t\t\tif ( ! this.paused ) {\n\t\n\t\t\t\ttimeScale = this.timeScale;\n\t\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\t\n\t\t\t\tif ( interpolant !== null ) {\n\t\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\t\n\t\t\t\t\ttimeScale *= interpolantValue;\n\t\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\t\n\t\t\t\t\t\tthis.stopWarping();\n\t\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\t\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\t\n\t\t},\n\t\n\t\t_updateTime: function( deltaTime ) {\n\t\n\t\t\tvar time = this.time + deltaTime;\n\t\n\t\t\tif ( deltaTime === 0 ) return time;\n\t\n\t\t\tvar duration = this._clip.duration,\n\t\n\t\t\t\tloop = this.loop,\n\t\t\t\tloopCount = this._loopCount;\n\t\n\t\t\tif ( loop === THREE.LoopOnce ) {\n\t\n\t\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t\t// just started\n\t\n\t\t\t\t\tthis.loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\t\n\t\t\t\t}\n\t\n\t\t\t\thandle_stop: {\n\t\n\t\t\t\t\tif ( time >= duration ) {\n\t\n\t\t\t\t\t\ttime = duration;\n\t\n\t\t\t\t\t} else if ( time < 0 ) {\n\t\n\t\t\t\t\t\ttime = 0;\n\t\n\t\t\t\t\t} else break handle_stop;\n\t\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\t\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t} );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else { // repetitive Repeat or PingPong\n\t\n\t\t\t\tvar pingPong = ( loop === THREE.LoopPingPong );\n\t\n\t\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t\t// just started\n\t\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\t\n\t\t\t\t\t\tloopCount = 0;\n\t\n\t\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\t\n\t\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\t\t\t\t\t// wrap around\n\t\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\t\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\t\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\t\n\t\t\t\t\tif ( pending < 0 ) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\n\t\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\t\telse this.enabled = false;\n\t\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t} );\n\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\t\n\t\t\t\t\t\tif ( pending === 0 ) {\n\t\t\t\t\t\t\t// entering the last round\n\t\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\t\n\t\t\t\t\tthis.time = time;\n\t\t\t\t\treturn duration - time;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tthis.time = time;\n\t\t\treturn time;\n\t\n\t\t},\n\t\n\t\t_setEndings: function( atStart, atEnd, pingPong ) {\n\t\n\t\t\tvar settings = this._interpolantSettings;\n\t\n\t\t\tif ( pingPong ) {\n\t\n\t\t\t\tsettings.endingStart \t= THREE.ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd\t\t= THREE.ZeroSlopeEnding;\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\n\t\t\t\tif ( atStart ) {\n\t\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n\t\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tsettings.endingStart = THREE.WrapAroundEnding;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( atEnd ) {\n\t\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n\t\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tsettings.endingEnd \t = THREE.WrapAroundEnding;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t_scheduleFading: function( duration, weightNow, weightThen ) {\n\t\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\t\n\t\t\tif ( interpolant === null ) {\n\t\n\t\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\t\tthis._weightInterpolant = interpolant;\n\t\n\t\t\t}\n\t\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\t\n\t\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t};\n\t\n\t\n\t// File:src/animation/AnimationClip.js\n\t\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\t\n\tTHREE.AnimationClip = function ( name, duration, tracks ) {\n\t\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : -1;\n\t\n\t\tthis.uuid = THREE.Math.generateUUID();\n\t\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\t\n\t\t\tthis.resetDuration();\n\t\n\t\t}\n\t\n\t\t// maybe only do these on demand, as doing them here could potentially slow down loading\n\t\t// but leaving these here during development as this ensures a lot of testing of these functions\n\t\tthis.trim();\n\t\tthis.optimize();\n\t\n\t};\n\t\n\tTHREE.AnimationClip.prototype = {\n\t\n\t\tconstructor: THREE.AnimationClip,\n\t\n\t\tresetDuration: function() {\n\t\n\t\t\tvar tracks = this.tracks,\n\t\t\t\tduration = 0;\n\t\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\t\n\t\t\t\tvar track = this.tracks[ i ];\n\t\n\t\t\t\tduration = Math.max(\n\t\t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\t\n\t\t\t}\n\t\n\t\t\tthis.duration = duration;\n\t\n\t\t},\n\t\n\t\ttrim: function() {\n\t\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\t\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\toptimize: function() {\n\t\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\t\n\t\t\t\tthis.tracks[ i ].optimize();\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// Static methods:\n\t\n\tObject.assign( THREE.AnimationClip, {\n\t\n\t\tparse: function( json ) {\n\t\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\t\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\t\n\t\t\t\ttracks.push( THREE.KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\t\n\t\t\t}\n\t\n\t\t\treturn new THREE.AnimationClip( json.name, json.duration, tracks );\n\t\n\t\t},\n\t\n\t\n\t\ttoJSON: function( clip ) {\n\t\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\t\n\t\t\tvar json = {\n\t\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks\n\t\n\t\t\t};\n\t\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\t\n\t\t\t\ttracks.push( THREE.KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\t\n\t\t\t}\n\t\n\t\t\treturn json;\n\t\n\t\t},\n\t\n\t\n\t\tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\t\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\t\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\t\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\t\n\t\t\t\ttimes.push(\n\t\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\t\ti,\n\t\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\t\n\t\t\t\tvalues.push( 0, 1, 0 );\n\t\n\t\t\t\tvar order = THREE.AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = THREE.AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = THREE.AnimationUtils.sortedArray( values, 1, order );\n\t\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\t\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\ttracks.push(\n\t\t\t\t\t\tnew THREE.NumberKeyframeTrack(\n\t\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\t\ttimes, values\n\t\t\t\t\t\t).scale( 1.0 / fps ) );\n\t\t\t}\n\t\n\t\t\treturn new THREE.AnimationClip( name, -1, tracks );\n\t\n\t\t},\n\t\n\t\tfindByName: function( objectOrClipArray, name ) {\n\t\n\t\t\tvar clipArray = objectOrClipArray;\n\t\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\t\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\t\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\t\n\t\t\t\t\treturn clipArray[ i ];\n\t\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn null;\n\t\n\t\t},\n\t\n\t\tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\t\n\t\t\tvar animationToMorphTargets = {};\n\t\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\t\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\t\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\t\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\t\n\t\t\t\t\tvar name = parts[ 1 ];\n\t\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\t\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar clips = [];\n\t\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\t\n\t\t\t\tclips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\t\n\t\t\t}\n\t\n\t\t\treturn clips;\n\t\n\t\t},\n\t\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function( animation, bones, nodeName ) {\n\t\n\t\t\tif ( ! animation ) {\n\t\n\t\t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n\t\t\t\treturn null;\n\t\n\t\t\t}\n\t\n\t\t\tvar addNonemptyTrack = function(\n\t\t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\t\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\t\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\t\n\t\t\t\t\tTHREE.AnimationUtils.flattenJSON(\n\t\t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\t\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\t\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t\tvar tracks = [];\n\t\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || -1;\n\t\t\tvar fps = animation.fps || 30;\n\t\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\t\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\t\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\t\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\t\n\t\t\t\t// process morph targets in a way exactly compatible\n\t\t\t\t// with AnimationHandler.init( animation )\n\t\t\t\tif ( animationKeys[0].morphTargets ) {\n\t\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\t\n\t\t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\t\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\t\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\t\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\t\n\t\t\t\t\t\tfor ( var m = 0;\n\t\t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\t\n\t\t\t\t\t\t\tvar animationKey = animationKeys[k];\n\t\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\ttracks.push( new THREE.NumberKeyframeTrack(\n\t\t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\t\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\t\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\t\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\t\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tTHREE.QuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\t\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( tracks.length === 0 ) {\n\t\n\t\t\t\treturn null;\n\t\n\t\t\t}\n\t\n\t\t\tvar clip = new THREE.AnimationClip( clipName, duration, tracks );\n\t\n\t\t\treturn clip;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/animation/AnimationMixer.js\n\t\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\t\n\tTHREE.AnimationMixer = function( root ) {\n\t\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\t\n\t\tthis.time = 0;\n\t\n\t\tthis.timeScale = 1.0;\n\t\n\t};\n\t\n\tObject.assign( THREE.AnimationMixer.prototype, THREE.EventDispatcher.prototype, {\n\t\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function( clip, optionalRoot ) {\n\t\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\t\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\n\t\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\t\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\t\n\t\t\tif ( actionsForClip !== undefined ) {\n\t\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\t\n\t\t\t\tif ( existingAction !== undefined ) {\n\t\n\t\t\t\t\treturn existingAction;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\t\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\tclipObject = prototypeAction._clip;\n\t\n\t\t\t}\n\t\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) return null;\n\t\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new THREE.\n\t\t\t\t\tAnimationMixer._Action( this, clipObject, optionalRoot );\n\t\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\t\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\t\n\t\t\treturn newAction;\n\t\n\t\t},\n\t\n\t\t// get an existing action\n\t\texistingAction: function( clip, optionalRoot ) {\n\t\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\t\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\n\t\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\t\n\t\t\tif ( actionsForClip !== undefined ) {\n\t\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\t\n\t\t\t}\n\t\n\t\t\treturn null;\n\t\n\t\t},\n\t\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function() {\n\t\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\t\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\t\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\t\n\t\t\t\tactions[ i ].reset();\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\t\n\t\t\t\tbindings[ i ].useCount = 0;\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\t// advance the time and update apply the animation\n\t\tupdate: function( deltaTime ) {\n\t\n\t\t\tdeltaTime *= this.timeScale;\n\t\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\t\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\t\n\t\t\t// run active actions\n\t\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\t\n\t\t\t\tvar action = actions[ i ];\n\t\n\t\t\t\tif ( action.enabled ) {\n\t\n\t\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// update scene graph\n\t\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\t\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\t\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\t// return this mixer's root target object\n\t\tgetRoot: function() {\n\t\n\t\t\treturn this._root;\n\t\n\t\t},\n\t\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function( clip ) {\n\t\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\t\n\t\t\tif ( actionsForClip !== undefined ) {\n\t\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\t\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\t\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\t\n\t\t\t\t\tthis._deactivateAction( action );\n\t\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\t\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\t\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\t\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function( root ) {\n\t\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\t\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\t\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\t\n\t\t\t\tif ( action !== undefined ) {\n\t\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\t\n\t\t\tif ( bindingByName !== undefined ) {\n\t\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\t\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function( clip, optionalRoot ) {\n\t\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\t\n\t\t\tif ( action !== null ) {\n\t\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t} );\n\t\n\tTHREE.AnimationMixer._Action = THREE.AnimationAction._new;\n\t\n\t// Implementation details:\n\t\n\tObject.assign( THREE.AnimationMixer.prototype, {\n\t\n\t\t_bindAction: function( action, prototypeAction ) {\n\t\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\t\n\t\t\tif ( bindingsByName === undefined ) {\n\t\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\t\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\t\n\t\t\t\tif ( binding !== undefined ) {\n\t\n\t\t\t\t\tbindings[ i ] = binding;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tbinding = bindings[ i ];\n\t\n\t\t\t\t\tif ( binding !== undefined ) {\n\t\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\t\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tcontinue;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\t\n\t\t\t\t\tbinding = new THREE.PropertyMixer(\n\t\t\t\t\t\t\tTHREE.PropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\t\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\t\n\t\t\t\t\tbindings[ i ] = binding;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t_activateAction: function( action ) {\n\t\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\t\n\t\t\t\tif ( action._cacheIndex === null ) {\n\t\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\t\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\t\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\t\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar bindings = action._propertyBindings;\n\t\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\tvar binding = bindings[ i ];\n\t\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\t\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis._lendAction( action );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t_deactivateAction: function( action ) {\n\t\n\t\t\tif ( this._isActiveAction( action ) ) {\n\t\n\t\t\t\tvar bindings = action._propertyBindings;\n\t\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\tvar binding = bindings[ i ];\n\t\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\t\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis._takeBackAction( action );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t// Memory manager\n\t\n\t\t_initMemoryManager: function() {\n\t\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\t\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \t\tknownActions: Array< _Action >\t- used as prototypes\n\t\t\t// \t\tactionByRoot: _Action\t\t\t- lookup\n\t\t\t// }\n\t\n\t\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\t\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\t\n\t\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tthis.stats = {\n\t\n\t\t\t\tactions: {\n\t\t\t\t\tget total() { return scope._actions.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveActions; }\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() { return scope._bindings.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveBindings; }\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() { return scope._controlInterpolants.length; },\n\t\t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t},\n\t\n\t\t// Memory management for _Action objects\n\t\n\t\t_isActiveAction: function( action ) {\n\t\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\t\n\t\t},\n\t\n\t\t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\t\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\t\n\t\t\tif ( actionsForClip === undefined ) {\n\t\n\t\t\t\tactionsForClip = {\n\t\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\t\n\t\t\t\t};\n\t\n\t\t\t\taction._byClipCacheIndex = 0;\n\t\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\t\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\t\n\t\t\t}\n\t\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\t\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\t\n\t\t},\n\t\n\t\t_removeInactiveAction: function( action ) {\n\t\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\t\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\t\n\t\t\taction._cacheIndex = null;\n\t\n\t\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\t\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\t\n\t\t\taction._byClipCacheIndex = null;\n\t\n\t\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\t\n\t\t\tdelete actionByRoot[ rootUuid ];\n\t\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\t\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\t\n\t\t\t}\n\t\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\t\n\t\t},\n\t\n\t\t_removeInactiveBindingsForAction: function( action ) {\n\t\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\t\n\t\t\t\tvar binding = bindings[ i ];\n\t\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\t\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t_lendAction: function( action ) {\n\t\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\t\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\t\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\t\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\t\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\t\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\t\n\t\t},\n\t\n\t\t_takeBackAction: function( action ) {\n\t\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\t\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\t\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\t\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\t\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\t\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\t\n\t\t},\n\t\n\t\t// Memory management for PropertyMixer objects\n\t\n\t\t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\t\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\t\n\t\t\t\tbindings = this._bindings;\n\t\n\t\t\tif ( bindingByName === undefined ) {\n\t\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\t\n\t\t\t}\n\t\n\t\t\tbindingByName[ trackName ] = binding;\n\t\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\t\n\t\t},\n\t\n\t\t_removeInactiveBinding: function( binding ) {\n\t\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\t\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\t\n\t\t\tdelete bindingByName[ trackName ];\n\t\n\t\t\tremove_empty_map: {\n\t\n\t\t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\t\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t_lendBinding: function( binding ) {\n\t\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\t\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\t\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\t\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\t\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\t\n\t\t},\n\t\n\t\t_takeBackBinding: function( binding ) {\n\t\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\t\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\t\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\t\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\t\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\t\n\t\t},\n\t\n\t\n\t\t// Memory management of Interpolants for weight and time scale\n\t\n\t\t_lendControlInterpolant: function() {\n\t\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\t\n\t\t\tif ( interpolant === undefined ) {\n\t\n\t\t\t\tinterpolant = new THREE.LinearInterpolant(\n\t\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\t\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\t\n\t\t\t}\n\t\n\t\t\treturn interpolant;\n\t\n\t\t},\n\t\n\t\t_takeBackControlInterpolant: function( interpolant ) {\n\t\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\t\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\t\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\t\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\t\n\t\t},\n\t\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\t\n\t} );\n\t\n\t// File:src/animation/AnimationObjectGroup.js\n\t\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t * \t-\tAdd objects you would otherwise pass as 'root' to the\n\t * \t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t * \t-\tInstead pass this object as 'root'.\n\t *\n\t * \t-\tYou can also add and remove objects later when the mixer\n\t * \t\tis running.\n\t *\n\t * Note:\n\t *\n\t *  \tObjects of this class appear as one object to the mixer,\n\t *  \tso cache control of the individual objects must be done\n\t *  \ton the group.\n\t *\n\t * Limitation:\n\t *\n\t * \t- \tThe animated properties must be compatible among the\n\t * \t\tall objects in the group.\n\t *\n\t *  -\tA single property can either be controlled through a\n\t *  \ttarget group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\t\n\tTHREE.AnimationObjectGroup = function( var_args ) {\n\t\n\t\tthis.uuid = THREE.Math.generateUUID();\n\t\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\t\n\t\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t\t// note: read by PropertyBinding.Composite\n\t\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\t\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\t\n\t\t}\n\t\n\t\tthis._paths = [];\t\t\t\t\t// inside: string\n\t\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\t\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\t\n\t\tvar scope = this;\n\t\n\t\tthis.stats = {\n\t\n\t\t\tobjects: {\n\t\t\t\tget total() { return scope._objects.length; },\n\t\t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n\t\t\t},\n\t\n\t\t\tget bindingsPerObject() { return scope._bindings.length; }\n\t\n\t\t};\n\t\n\t};\n\t\n\tTHREE.AnimationObjectGroup.prototype = {\n\t\n\t\tconstructor: THREE.AnimationObjectGroup,\n\t\n\t\tadd: function( var_args ) {\n\t\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\t\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t\t\t\tif ( index === undefined ) {\n\t\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\t\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t\t\t\t\t\tbindings[ j ].push(\n\t\t\t\t\t\t\t\tnew THREE.PropertyBinding(\n\t\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\t\n\t\t\t\t\tvar knownObject = objects[ index ];\n\t\n\t\t\t\t\t// move existing object to the ACTIVE region\n\t\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\t\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\t\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\t\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\t\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\n\t\t\t\t\t\tif ( binding === undefined ) {\n\t\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\t\n\t\t\t\t\t\t\tbinding = new THREE.PropertyBinding(\n\t\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( objects[ index ] !== knownObject) {\n\t\n\t\t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n\t\t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n\t\t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\t\n\t\t\t\t} // else the object is already where we want it to be\n\t\n\t\t\t} // for arguments\n\t\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t\t},\n\t\n\t\tremove: function( var_args ) {\n\t\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\t\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\t\n\t\t\t\t\t// move existing object into the CACHED region\n\t\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\t\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\t\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\t\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\t\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t} // for arguments\n\t\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t\t},\n\t\n\t\t// remove & forget\n\t\tuncache: function( var_args ) {\n\t\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\t\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\t\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\t\n\t\t\t\tif ( index !== undefined ) {\n\t\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\t\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\t\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\t\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\t\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\t\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\t\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\t\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\t\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\t\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\t\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\t\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} // cached or active\n\t\n\t\t\t\t} // if object is known\n\t\n\t\t\t} // for arguments\n\t\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\n\t\t},\n\t\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\t\n\t\tsubscribe_: function( path, parsedPath ) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\t\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\t\n\t\t\tif ( index !== undefined ) return bindings[ index ];\n\t\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\t\n\t\t\tindex = bindings.length;\n\t\n\t\t\tindicesByPath[ path ] = index;\n\t\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\t\n\t\t\tfor ( var i = nCachedObjects,\n\t\t\t\t\tn = objects.length; i !== n; ++ i ) {\n\t\n\t\t\t\tvar object = objects[ i ];\n\t\n\t\t\t\tbindingsForPath[ i ] =\n\t\t\t\t\t\tnew THREE.PropertyBinding( object, path, parsedPath );\n\t\n\t\t\t}\n\t\n\t\t\treturn bindingsForPath;\n\t\n\t\t},\n\t\n\t\tunsubscribe_: function( path ) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\t\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\t\n\t\t\tif ( index !== undefined ) {\n\t\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\t\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\t\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\t\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\t\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\t\n\t// File:src/animation/AnimationUtils.js\n\t\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\t\n\tTHREE.AnimationUtils = {\n\t\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function( array, from, to ) {\n\t\n\t\t\tif ( THREE.AnimationUtils.isTypedArray( array ) ) {\n\t\n\t\t\t\treturn new array.constructor( array.subarray( from, to ) );\n\t\n\t\t\t}\n\t\n\t\t\treturn array.slice( from, to );\n\t\n\t\t},\n\t\n\t\t// converts an array to a specific type\n\t\tconvertArray: function( array, type, forceClone ) {\n\t\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t\t! forceClone && array.constructor === type ) return array;\n\t\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\t\n\t\t\t\treturn new type( array ); // create typed array\n\t\n\t\t\t}\n\t\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\t\n\t\t},\n\t\n\t\tisTypedArray: function( object ) {\n\t\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t\t! ( object instanceof DataView );\n\t\n\t\t},\n\t\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function( times ) {\n\t\n\t\t\tfunction compareTime( i, j ) {\n\t\n\t\t\t\treturn times[ i ] - times[ j ];\n\t\n\t\t\t}\n\t\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\t\n\t\t\tresult.sort( compareTime );\n\t\n\t\t\treturn result;\n\t\n\t\t},\n\t\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function( values, stride, order ) {\n\t\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\t\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\t\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\t\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\t\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn result;\n\t\n\t\t},\n\t\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\t\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\t\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\t\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t\t\t}\n\t\n\t\t\tif ( key === undefined ) return; // no data\n\t\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) return; // no data\n\t\n\t\t\tif ( Array.isArray( value ) ) {\n\t\n\t\t\t\tdo {\n\t\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t\t\t\t\tif ( value !== undefined ) {\n\t\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t\t\t\t} while ( key !== undefined );\n\t\n\t\t\t} else if ( value.toArray !== undefined ) {\n\t\t\t\t// ...assume THREE.Math-ish\n\t\n\t\t\t\tdo {\n\t\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t\t\t\t\tif ( value !== undefined ) {\n\t\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t\t\t\t} while ( key !== undefined );\n\t\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\t\n\t\t\t\tdo {\n\t\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\t\n\t\t\t\t\tif ( value !== undefined ) {\n\t\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\t\n\t\t\t\t} while ( key !== undefined );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/animation/KeyframeTrack.js\n\t\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\t\n\tTHREE.KeyframeTrack = function ( name, times, values, interpolation ) {\n\t\n\t\tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\t\n\t\tif( times === undefined || times.length === 0 ) {\n\t\n\t\t\tthrow new Error( \"no keyframes in track named \" + name );\n\t\n\t\t}\n\t\n\t\tthis.name = name;\n\t\n\t\tthis.times = THREE.AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = THREE.AnimationUtils.convertArray( values, this.ValueBufferType );\n\t\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\t\n\t\tthis.validate();\n\t\tthis.optimize();\n\t\n\t};\n\t\n\tTHREE.KeyframeTrack.prototype = {\n\t\n\t\tconstructor: THREE.KeyframeTrack,\n\t\n\t\tTimeBufferType: Float32Array,\n\t\tValueBufferType: Float32Array,\n\t\n\t\tDefaultInterpolation: THREE.InterpolateLinear,\n\t\n\t\tInterpolantFactoryMethodDiscrete: function( result ) {\n\t\n\t\t\treturn new THREE.DiscreteInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t\t},\n\t\n\t\tInterpolantFactoryMethodLinear: function( result ) {\n\t\n\t\t\treturn new THREE.LinearInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t\t},\n\t\n\t\tInterpolantFactoryMethodSmooth: function( result ) {\n\t\n\t\t\treturn new THREE.CubicInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t\t},\n\t\n\t\tsetInterpolation: function( interpolation ) {\n\t\n\t\t\tvar factoryMethod;\n\t\n\t\t\tswitch ( interpolation ) {\n\t\n\t\t\t\tcase THREE.InterpolateDiscrete:\n\t\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase THREE.InterpolateLinear:\n\t\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase THREE.InterpolateSmooth:\n\t\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t}\n\t\n\t\t\tif ( factoryMethod === undefined ) {\n\t\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\t\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\t\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\t\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tconsole.warn( message );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tthis.createInterpolant = factoryMethod;\n\t\n\t\t},\n\t\n\t\tgetInterpolation: function() {\n\t\n\t\t\tswitch ( this.createInterpolant ) {\n\t\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\n\t\t\t\t\treturn THREE.InterpolateDiscrete;\n\t\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\n\t\t\t\t\treturn THREE.InterpolateLinear;\n\t\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\n\t\t\t\t\treturn THREE.InterpolateSmooth;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tgetValueSize: function() {\n\t\n\t\t\treturn this.values.length / this.times.length;\n\t\n\t\t},\n\t\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function( timeOffset ) {\n\t\n\t\t\tif( timeOffset !== 0.0 ) {\n\t\n\t\t\t\tvar times = this.times;\n\t\n\t\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function( timeScale ) {\n\t\n\t\t\tif( timeScale !== 1.0 ) {\n\t\n\t\t\t\tvar times = this.times;\n\t\n\t\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function( startTime, endTime ) {\n\t\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\t\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t\t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\t\n\t\t\t++ to; // inclusive -> exclusive bound\n\t\n\t\t\tif( from !== 0 || to !== nKeys ) {\n\t\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\t\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = THREE.AnimationUtils.\n\t\t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function() {\n\t\n\t\t\tvar valid = true;\n\t\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\t\n\t\t\t\tconsole.error( \"invalid value size in track\", this );\n\t\t\t\tvalid = false;\n\t\n\t\t\t}\n\t\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\t\n\t\t\t\tnKeys = times.length;\n\t\n\t\t\tif( nKeys === 0 ) {\n\t\n\t\t\t\tconsole.error( \"track is empty\", this );\n\t\t\t\tvalid = false;\n\t\n\t\t\t}\n\t\n\t\t\tvar prevTime = null;\n\t\n\t\t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\t\n\t\t\t\tvar currTime = times[ i ];\n\t\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\t\n\t\t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif( prevTime !== null && prevTime > currTime ) {\n\t\n\t\t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tprevTime = currTime;\n\t\n\t\t\t}\n\t\n\t\t\tif ( values !== undefined ) {\n\t\n\t\t\t\tif ( THREE.AnimationUtils.isTypedArray( values ) ) {\n\t\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\tvar value = values[ i ];\n\t\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\t\n\t\t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn valid;\n\t\n\t\t},\n\t\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function() {\n\t\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\t\t\t\tstride = this.getValueSize(),\n\t\n\t\t\t\twriteIndex = 1;\n\t\n\t\t\tfor( var i = 1, n = times.length - 1; i <= n; ++ i ) {\n\t\n\t\t\t\tvar keep = false;\n\t\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\t\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\t\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\t\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\t\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\t\n\t\t\t\t\t\tvar value = values[ offset + j ];\n\t\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\t\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// in-place compaction\n\t\n\t\t\t\tif ( keep ) {\n\t\n\t\t\t\t\tif ( i !== writeIndex ) {\n\t\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\t\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\t\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\t\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\t\n\t\t\t\t\t\t}\n\t\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t++ writeIndex;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( writeIndex !== times.length ) {\n\t\n\t\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = THREE.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// Static methods:\n\t\n\tObject.assign( THREE.KeyframeTrack, {\n\t\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\t\n\t\tparse: function( json ) {\n\t\n\t\t\tif( json.type === undefined ) {\n\t\n\t\t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\t\n\t\t\t}\n\t\n\t\t\tvar trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\t\n\t\t\tif ( json.times === undefined ) {\n\t\n\t\t\t\tvar times = [], values = [];\n\t\n\t\t\t\tTHREE.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\t\n\t\t\t\tjson.times = times;\n\t\t\t\tjson.values = values;\n\t\n\t\t\t}\n\t\n\t\t\t// derived classes can define a static parse method\n\t\t\tif ( trackType.parse !== undefined ) {\n\t\n\t\t\t\treturn trackType.parse( json );\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// by default, we asssume a constructor compatible with the base\n\t\t\t\treturn new trackType(\n\t\t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\ttoJSON: function( track ) {\n\t\n\t\t\tvar trackType = track.constructor;\n\t\n\t\t\tvar json;\n\t\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\t\n\t\t\t\tjson = trackType.toJSON( track );\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\t\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': THREE.AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': THREE.AnimationUtils.convertArray( track.values, Array )\n\t\n\t\t\t\t};\n\t\n\t\t\t\tvar interpolation = track.getInterpolation();\n\t\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\t\n\t\t\t\t\tjson.interpolation = interpolation;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\t\n\t\t\treturn json;\n\t\n\t\t},\n\t\n\t\t_getTrackTypeForValueTypeName: function( typeName ) {\n\t\n\t\t\tswitch( typeName.toLowerCase() ) {\n\t\n\t\t\t\tcase \"scalar\":\n\t\t\t\tcase \"double\":\n\t\t\t\tcase \"float\":\n\t\t\t\tcase \"number\":\n\t\t\t\tcase \"integer\":\n\t\n\t\t\t\t\treturn THREE.NumberKeyframeTrack;\n\t\n\t\t\t\tcase \"vector\":\n\t\t\t\tcase \"vector2\":\n\t\t\t\tcase \"vector3\":\n\t\t\t\tcase \"vector4\":\n\t\n\t\t\t\t\treturn THREE.VectorKeyframeTrack;\n\t\n\t\t\t\tcase \"color\":\n\t\n\t\t\t\t\treturn THREE.ColorKeyframeTrack;\n\t\n\t\t\t\tcase \"quaternion\":\n\t\n\t\t\t\t\treturn THREE.QuaternionKeyframeTrack;\n\t\n\t\t\t\tcase \"bool\":\n\t\t\t\tcase \"boolean\":\n\t\n\t\t\t\t\treturn THREE.BooleanKeyframeTrack;\n\t\n\t\t\t\tcase \"string\":\n\t\n\t\t\t\t\treturn THREE.StringKeyframeTrack;\n\t\n\t\t\t}\n\t\n\t\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/animation/PropertyBinding.js\n\t\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\t\n\tTHREE.PropertyBinding = function ( rootNode, path, parsedPath ) {\n\t\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath ||\n\t\t\t\tTHREE.PropertyBinding.parseTrackName( path );\n\t\n\t\tthis.node = THREE.PropertyBinding.findNode(\n\t\t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\t\n\t\tthis.rootNode = rootNode;\n\t\n\t};\n\t\n\tTHREE.PropertyBinding.prototype = {\n\t\n\t\tconstructor: THREE.PropertyBinding,\n\t\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\t\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\t\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\t\n\t\t},\n\t\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\t\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\t\n\t\t},\n\t\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function() {\n\t\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\t\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\t\n\t\t\tif ( ! targetObject ) {\n\t\n\t\t\t\ttargetObject = THREE.PropertyBinding.findNode(\n\t\t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\t\n\t\t\t\tthis.node = targetObject;\n\t\n\t\t\t}\n\t\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\t\n\t \t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\t\n\t\t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tif ( objectName ) {\n\t\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\t\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\t\n\t\t\t\t\tcase 'materials':\n\t\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\t\n\t\t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\t\n\t\t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'bones':\n\t\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\t\n\t\t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\t\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\t\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\t\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\t\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tdefault:\n\t\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\t\n\t\t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\t\n\t\t\t\t}\n\t\n\t\n\t\t\t\tif ( objectIndex !== undefined ) {\n\t\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\t\n\t\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\t\n\t\t\tif ( nodeProperty === undefined ) {\n\t\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\t\n\t\t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n\t\t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\t\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\t\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\t\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\t\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\t\n\t\t\t}\n\t\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\t\n\t\t\tif ( propertyIndex !== undefined ) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\t\n\t\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\t\n\t\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\t\n\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\t\n\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\n\t\t\t} else if ( nodeProperty.length !== undefined ) {\n\t\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.propertyName = propertyName;\n\t\n\t\t\t}\n\t\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\t\n\t\t},\n\t\n\t\tunbind: function() {\n\t\n\t\t\tthis.node = null;\n\t\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\n\t\t}\n\t\n\t};\n\t\n\tObject.assign( THREE.PropertyBinding.prototype, { // prototype, continued\n\t\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function() {},\n\t\t_setValue_unavailable: function() {},\n\t\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: THREE.PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: THREE.PropertyBinding.prototype.setValue,\n\t\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\t\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\t\n\t\tGetterByBindingType: [\n\t\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\t\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\t\n\t\t\t},\n\t\n\t\t\tfunction getValue_array( buffer, offset ) {\n\t\n\t\t\t\tvar source = this.resolvedProperty;\n\t\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\t\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\t\n\t\t\t},\n\t\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\t\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\t\n\t\t\t}\n\t\n\t\t],\n\t\n\t\tSetterByBindingTypeAndVersioning: [\n\t\n\t\t\t[\n\t\t\t\t// Direct\n\t\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\t\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\n\t\t\t\t},\n\t\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t\t\t\t},\n\t\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t], [\n\t\n\t\t\t\t// EntireArray\n\t\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\t\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t},\n\t\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t\t\t\t},\n\t\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\t\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t], [\n\t\n\t\t\t\t// ArrayElement\n\t\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\t\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\n\t\t\t\t},\n\t\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t\t\t\t},\n\t\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t], [\n\t\n\t\t\t\t// HasToFromArray\n\t\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\t\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\n\t\t\t\t},\n\t\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\t\n\t\t\t\t},\n\t\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\t\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t]\n\t\n\t\t]\n\t\n\t} );\n\t\n\tTHREE.PropertyBinding.Composite =\n\t\t\tfunction( targetGroup, path, optionalParsedPath ) {\n\t\n\t\tvar parsedPath = optionalParsedPath ||\n\t\t\t\tTHREE.PropertyBinding.parseTrackName( path );\n\t\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\t\n\t};\n\t\n\tTHREE.PropertyBinding.Composite.prototype = {\n\t\n\t\tconstructor: THREE.PropertyBinding.Composite,\n\t\n\t\tgetValue: function( array, offset ) {\n\t\n\t\t\tthis.bind(); // bind all binding\n\t\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\t\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\t\n\t\t},\n\t\n\t\tsetValue: function( array, offset ) {\n\t\n\t\t\tvar bindings = this._bindings;\n\t\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tbind: function() {\n\t\n\t\t\tvar bindings = this._bindings;\n\t\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t\t\t\tbindings[ i ].bind();\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tunbind: function() {\n\t\n\t\t\tvar bindings = this._bindings;\n\t\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\t\n\t\t\t\tbindings[ i ].unbind();\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.PropertyBinding.create = function( root, path, parsedPath ) {\n\t\n\t\tif ( ! ( root instanceof THREE.AnimationObjectGroup ) ) {\n\t\n\t\t\treturn new THREE.PropertyBinding( root, path, parsedPath );\n\t\n\t\t} else {\n\t\n\t\t\treturn new THREE.PropertyBinding.Composite( root, path, parsedPath );\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.PropertyBinding.parseTrackName = function( trackName ) {\n\t\n\t\t// matches strings in the form of:\n\t\t//    nodeName.property\n\t\t//    nodeName.property[accessor]\n\t\t//    nodeName.material.property[accessor]\n\t\t//    uuid.property[accessor]\n\t\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t\t//    parentName/nodeName.property\n\t\t//    parentName/parentName/nodeName.property[index]\n\t\t//\t  .bone[Armature.DEF_cog].position\n\t\t// created and tested via https://regex101.com/#javascript\n\t\n\t\tvar re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_.:\\- ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\n\t\tvar matches = re.exec( trackName );\n\t\n\t\tif ( ! matches ) {\n\t\n\t\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\t\n\t\t}\n\t\n\t\tif ( matches.index === re.lastIndex ) {\n\t\n\t\t\tre.lastIndex++;\n\t\n\t\t}\n\t\n\t\tvar results = {\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\tnodeName: matches[ 3 ], \t// allowed to be null, specified root node.\n\t\t\tobjectName: matches[ 5 ],\n\t\t\tobjectIndex: matches[ 7 ],\n\t\t\tpropertyName: matches[ 9 ],\n\t\t\tpropertyIndex: matches[ 11 ]\t// allowed to be null, specifies that the whole property is set.\n\t\t};\n\t\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\t\n\t\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\t\n\t\t}\n\t\n\t\treturn results;\n\t\n\t};\n\t\n\tTHREE.PropertyBinding.findNode = function( root, nodeName ) {\n\t\n\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\t\n\t\t\treturn root;\n\t\n\t\t}\n\t\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\t\n\t\t\tvar searchSkeleton = function( skeleton ) {\n\t\n\t\t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\t\n\t\t\t\t\tvar bone = skeleton.bones[ i ];\n\t\n\t\t\t\t\tif ( bone.name === nodeName ) {\n\t\n\t\t\t\t\t\treturn bone;\n\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn null;\n\t\n\t\t\t};\n\t\n\t\t\tvar bone = searchSkeleton( root.skeleton );\n\t\n\t\t\tif ( bone ) {\n\t\n\t\t\t\treturn bone;\n\t\n\t\t\t}\n\t\t}\n\t\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\t\n\t\t\tvar searchNodeSubtree = function( children ) {\n\t\n\t\t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\t\n\t\t\t\t\tvar childNode = children[ i ];\n\t\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\t\n\t\t\t\t\t\treturn childNode;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\t\n\t\t\t\t\tif ( result ) return result;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn null;\n\t\n\t\t\t};\n\t\n\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\t\n\t\t\tif ( subTreeNode ) {\n\t\n\t\t\t\treturn subTreeNode;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\treturn null;\n\t\n\t};\n\t\n\t// File:src/animation/PropertyMixer.js\n\t\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\t\n\tTHREE.PropertyMixer = function ( binding, typeName, valueSize ) {\n\t\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\t\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\t\n\t\tswitch ( typeName ) {\n\t\n\t\t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\t\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\n\t\t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\t\n\t\t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\t\n\t\t}\n\t\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\n\t\tthis._mixBufferRegion = mixFunction;\n\t\n\t\tthis.cumulativeWeight = 0;\n\t\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\t\n\t};\n\t\n\tTHREE.PropertyMixer.prototype = {\n\t\n\t\tconstructor: THREE.PropertyMixer,\n\t\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function( accuIndex, weight ) {\n\t\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\t\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\t\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\t\n\t\t\tif ( currentWeight === 0 ) {\n\t\n\t\t\t\t// accuN := incoming * weight\n\t\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tcurrentWeight = weight;\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// accuN := accuN + incoming * weight\n\t\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\t\n\t\t\t}\n\t\n\t\t\tthis.cumulativeWeight = currentWeight;\n\t\n\t\t},\n\t\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function( accuIndex ) {\n\t\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\t\n\t\t\t\tweight = this.cumulativeWeight,\n\t\n\t\t\t\tbinding = this.binding;\n\t\n\t\t\tthis.cumulativeWeight = 0;\n\t\n\t\t\tif ( weight < 1 ) {\n\t\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\n\t\t\t\tvar originalValueOffset = stride * 3;\n\t\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\t\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\t\n\t\t\t\t\t// value has changed -> update scene graph\n\t\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function() {\n\t\n\t\t\tvar binding = this.binding;\n\t\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\n\t\t\t\toriginalValueOffset = stride * 3;\n\t\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\t\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\t\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\t\n\t\t\t}\n\t\n\t\t\tthis.cumulativeWeight = 0;\n\t\n\t\t},\n\t\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function() {\n\t\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\t\n\t\t},\n\t\n\t\n\t\t// mix functions\n\t\n\t\t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t\t\tif ( t >= 0.5 ) {\n\t\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t\t\tTHREE.Quaternion.slerpFlat( buffer, dstOffset,\n\t\t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\t\n\t\t},\n\t\n\t\t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\t\n\t\t\tvar s = 1 - t;\n\t\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\t\n\t\t\t\tvar j = dstOffset + i;\n\t\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/animation/tracks/BooleanKeyframeTrack.js\n\t\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\t\n\tTHREE.BooleanKeyframeTrack = function ( name, times, values ) {\n\t\n\t\tTHREE.KeyframeTrack.call( this, name, times, values );\n\t\n\t};\n\t\n\tTHREE.BooleanKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\t\n\t\tconstructor: THREE.BooleanKeyframeTrack,\n\t\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\t\n\t\tDefaultInterpolation: THREE.InterpolateDiscrete,\n\t\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\t\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\t\n\t} );\n\t\n\t// File:src/animation/tracks/ColorKeyframeTrack.js\n\t\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\t\n\tTHREE.ColorKeyframeTrack = function ( name, times, values, interpolation ) {\n\t\n\t\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\t\n\t};\n\t\n\tTHREE.ColorKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\t\n\t\tconstructor: THREE.ColorKeyframeTrack,\n\t\n\t\tValueTypeName: 'color'\n\t\n\t\t// ValueBufferType is inherited\n\t\n\t\t// DefaultInterpolation is inherited\n\t\n\t\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\t\n\t} );\n\t\n\t// File:src/animation/tracks/NumberKeyframeTrack.js\n\t\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\t\n\tTHREE.NumberKeyframeTrack = function ( name, times, values, interpolation ) {\n\t\n\t\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\t\n\t};\n\t\n\tTHREE.NumberKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\t\n\t\tconstructor: THREE.NumberKeyframeTrack,\n\t\n\t\tValueTypeName: 'number',\n\t\n\t\t// ValueBufferType is inherited\n\t\n\t\t// DefaultInterpolation is inherited\n\t\n\t} );\n\t\n\t// File:src/animation/tracks/QuaternionKeyframeTrack.js\n\t\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\t\n\tTHREE.QuaternionKeyframeTrack = function ( name, times, values, interpolation ) {\n\t\n\t\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\t\n\t};\n\t\n\tTHREE.QuaternionKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\t\n\t\tconstructor: THREE.QuaternionKeyframeTrack,\n\t\n\t\tValueTypeName: 'quaternion',\n\t\n\t\t// ValueBufferType is inherited\n\t\n\t\tDefaultInterpolation: THREE.InterpolateLinear,\n\t\n\t\tInterpolantFactoryMethodLinear: function( result ) {\n\t\n\t\t\treturn new THREE.QuaternionLinearInterpolant(\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\t\n\t\t},\n\t\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\t\n\t} );\n\t\n\t// File:src/animation/tracks/StringKeyframeTrack.js\n\t\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\t\n\tTHREE.StringKeyframeTrack = function ( name, times, values, interpolation ) {\n\t\n\t\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\t\n\t};\n\t\n\tTHREE.StringKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\t\n\t\tconstructor: THREE.StringKeyframeTrack,\n\t\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\t\n\t\tDefaultInterpolation: THREE.InterpolateDiscrete,\n\t\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\n\t\tInterpolantFactoryMethodSmooth: undefined\n\t\n\t} );\n\t\n\t// File:src/animation/tracks/VectorKeyframeTrack.js\n\t\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\t\n\tTHREE.VectorKeyframeTrack = function ( name, times, values, interpolation ) {\n\t\n\t\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\t\n\t};\n\t\n\tTHREE.VectorKeyframeTrack.prototype =\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\t\n\t\tconstructor: THREE.VectorKeyframeTrack,\n\t\n\t\tValueTypeName: 'vector'\n\t\n\t\t// ValueBufferType is inherited\n\t\n\t\t// DefaultInterpolation is inherited\n\t\n\t} );\n\t\n\t// File:src/audio/Audio.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\t\n\tTHREE.Audio = function ( listener ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'Audio';\n\t\n\t\tthis.context = listener.context;\n\t\tthis.source = this.context.createBufferSource();\n\t\tthis.source.onended = this.onEnded.bind( this );\n\t\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\t\n\t\tthis.autoplay = false;\n\t\n\t\tthis.startTime = 0;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\t\n\t\tthis.filters = [];\n\t\n\t};\n\t\n\tTHREE.Audio.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\t\n\t\tconstructor: THREE.Audio,\n\t\n\t\tgetOutput: function () {\n\t\n\t\t\treturn this.gain;\n\t\n\t\t},\n\t\n\t\tsetNodeSource: function ( audioNode ) {\n\t\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetBuffer: function ( audioBuffer ) {\n\t\n\t\t\tthis.source.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\t\n\t\t\tif ( this.autoplay ) this.play();\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tplay: function () {\n\t\n\t\t\tif ( this.isPlaying === true ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tvar source = this.context.createBufferSource();\n\t\n\t\t\tsource.buffer = this.source.buffer;\n\t\t\tsource.loop = this.source.loop;\n\t\t\tsource.onended = this.source.onended;\n\t\t\tsource.start( 0, this.startTime );\n\t\t\tsource.playbackRate.value = this.playbackRate;\n\t\n\t\t\tthis.isPlaying = true;\n\t\n\t\t\tthis.source = source;\n\t\n\t\t\treturn this.connect();\n\t\n\t\t},\n\t\n\t\tpause: function () {\n\t\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tthis.source.stop();\n\t\t\tthis.startTime = this.context.currentTime;\n\t\t\tthis.isPlaying = false;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tstop: function () {\n\t\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tthis.source.stop();\n\t\t\tthis.startTime = 0;\n\t\t\tthis.isPlaying = false;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tconnect: function () {\n\t\n\t\t\tif ( this.filters.length > 0 ) {\n\t\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\t\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.source.connect( this.getOutput() );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdisconnect: function () {\n\t\n\t\t\tif ( this.filters.length > 0 ) {\n\t\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\t\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tgetFilters: function () {\n\t\n\t\t\treturn this.filters;\n\t\n\t\t},\n\t\n\t\tsetFilters: function ( value ) {\n\t\n\t\t\tif ( ! value ) value = [];\n\t\n\t\t\tif ( this.isPlaying === true ) {\n\t\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.filters = value;\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tgetFilter: function () {\n\t\n\t\t\treturn this.getFilters()[ 0 ];\n\t\n\t\t},\n\t\n\t\tsetFilter: function ( filter ) {\n\t\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\t\n\t\t},\n\t\n\t\tsetPlaybackRate: function ( value ) {\n\t\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tthis.playbackRate = value;\n\t\n\t\t\tif ( this.isPlaying === true ) {\n\t\n\t\t\t\tthis.source.playbackRate.value = this.playbackRate;\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tgetPlaybackRate: function () {\n\t\n\t\t\treturn this.playbackRate;\n\t\n\t\t},\n\t\n\t\tonEnded: function () {\n\t\n\t\t\tthis.isPlaying = false;\n\t\n\t\t},\n\t\n\t\tgetLoop: function () {\n\t\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\t\n\t\t\t}\n\t\n\t\t\treturn this.source.loop;\n\t\n\t\t},\n\t\n\t\tsetLoop: function ( value ) {\n\t\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tthis.source.loop = value;\n\t\n\t\t},\n\t\n\t\tgetVolume: function () {\n\t\n\t\t\treturn this.gain.gain.value;\n\t\n\t\t},\n\t\n\t\n\t\tsetVolume: function ( value ) {\n\t\n\t\t\tthis.gain.gain.value = value;\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/audio/AudioAnalyser.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.AudioAnalyser = function ( audio, fftSize ) {\n\t\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\t\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\t\n\t\taudio.getOutput().connect( this.analyser );\n\t\n\t};\n\t\n\tObject.assign( THREE.AudioAnalyser.prototype, {\n\t\n\t\tgetFrequencyData: function () {\n\t\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\t\n\t\t\treturn this.data;\n\t\n\t\t},\n\t\n\t\tgetAverageFrequency: function () {\n\t\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\t\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\t\n\t\t\t\tvalue += data[ i ];\n\t\n\t\t\t}\n\t\n\t\t\treturn value / data.length;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/audio/AudioContext.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tObject.defineProperty( THREE, 'AudioContext', {\n\t\n\t\tget: ( function () {\n\t\n\t\t\tvar context;\n\t\n\t\t\treturn function get() {\n\t\n\t\t\t\tif ( context === undefined ) {\n\t\n\t\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn context;\n\t\n\t\t\t};\n\t\n\t\t} )()\n\t\n\t} );\n\t\n\t// File:src/audio/PositionalAudio.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.PositionalAudio = function ( listener ) {\n\t\n\t\tTHREE.Audio.call( this, listener );\n\t\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.connect( this.gain );\n\t\n\t};\n\t\n\tTHREE.PositionalAudio.prototype = Object.assign( Object.create( THREE.Audio.prototype ), {\n\t\n\t\tconstructor: THREE.PositionalAudio,\n\t\n\t\tgetOutput: function () {\n\t\n\t\t\treturn this.panner;\n\t\n\t\t},\n\t\n\t\tgetRefDistance: function () {\n\t\n\t\t\treturn this.panner.refDistance;\n\t\n\t\t},\n\t\n\t\tsetRefDistance: function ( value ) {\n\t\n\t\t\tthis.panner.refDistance = value;\n\t\n\t\t},\n\t\n\t\tgetRolloffFactor: function () {\n\t\n\t\t\treturn this.panner.rolloffFactor;\n\t\n\t\t},\n\t\n\t\tsetRolloffFactor: function ( value ) {\n\t\n\t\t\tthis.panner.rolloffFactor = value;\n\t\n\t\t},\n\t\n\t\tgetDistanceModel: function () {\n\t\n\t\t\treturn this.panner.distanceModel;\n\t\n\t\t},\n\t\n\t\tsetDistanceModel: function ( value ) {\n\t\n\t\t\tthis.panner.distanceModel = value;\n\t\n\t\t},\n\t\n\t\tgetMaxDistance: function () {\n\t\n\t\t\treturn this.panner.maxDistance;\n\t\n\t\t},\n\t\n\t\tsetMaxDistance: function ( value ) {\n\t\n\t\t\tthis.panner.maxDistance = value;\n\t\n\t\t},\n\t\n\t\tupdateMatrixWorld: ( function () {\n\t\n\t\t\tvar position = new THREE.Vector3();\n\t\n\t\t\treturn function updateMatrixWorld( force ) {\n\t\n\t\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\t\n\t\t\t};\n\t\n\t\t} )()\n\t\n\t\n\t} );\n\t\n\t// File:src/audio/AudioListener.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.AudioListener = function () {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'AudioListener';\n\t\n\t\tthis.context = THREE.AudioContext;\n\t\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\t\n\t\tthis.filter = null;\n\t\n\t};\n\t\n\tTHREE.AudioListener.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\t\n\t\tconstructor: THREE.AudioListener,\n\t\n\t\tgetInput: function () {\n\t\n\t\t\treturn this.gain;\n\t\n\t\t},\n\t\n\t\tremoveFilter: function ( ) {\n\t\n\t\t\tif ( this.filter !== null ) {\n\t\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tgetFilter: function () {\n\t\n\t\t\treturn this.filter;\n\t\n\t\t},\n\t\n\t\tsetFilter: function ( value ) {\n\t\n\t\t\tif ( this.filter !== null ) {\n\t\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\t\n\t\t\t}\n\t\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\t\n\t\t},\n\t\n\t\tgetMasterVolume: function () {\n\t\n\t\t\treturn this.gain.gain.value;\n\t\n\t\t},\n\t\n\t\tsetMasterVolume: function ( value ) {\n\t\n\t\t\tthis.gain.gain.value = value;\n\t\n\t\t},\n\t\n\t\tupdateMatrixWorld: ( function () {\n\t\n\t\t\tvar position = new THREE.Vector3();\n\t\t\tvar quaternion = new THREE.Quaternion();\n\t\t\tvar scale = new THREE.Vector3();\n\t\n\t\t\tvar orientation = new THREE.Vector3();\n\t\n\t\t\treturn function updateMatrixWorld( force ) {\n\t\n\t\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\t\n\t\t\t\tvar listener = this.context.listener;\n\t\t\t\tvar up = this.up;\n\t\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\t\n\t\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\t\n\t\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\t\n\t\t\t};\n\t\n\t\t} )()\n\t\n\t} );\n\t\n\t// File:src/cameras/Camera.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\t\n\tTHREE.Camera = function () {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'Camera';\n\t\n\t\tthis.matrixWorldInverse = new THREE.Matrix4();\n\t\tthis.projectionMatrix = new THREE.Matrix4();\n\t\n\t};\n\t\n\tTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.Camera.prototype.constructor = THREE.Camera;\n\t\n\tTHREE.Camera.prototype.getWorldDirection = function () {\n\t\n\t\tvar quaternion = new THREE.Quaternion();\n\t\n\t\treturn function getWorldDirection( optionalTarget ) {\n\t\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\n\t\t\tthis.getWorldQuaternion( quaternion );\n\t\n\t\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\t\n\t\t};\n\t\n\t}();\n\t\n\tTHREE.Camera.prototype.lookAt = function () {\n\t\n\t\t// This routine does not support cameras with rotated and/or translated parent(s)\n\t\n\t\tvar m1 = new THREE.Matrix4();\n\t\n\t\treturn function lookAt( vector ) {\n\t\n\t\t\tm1.lookAt( this.position, vector, this.up );\n\t\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\t\n\t\t};\n\t\n\t}();\n\t\n\tTHREE.Camera.prototype.clone = function () {\n\t\n\t\treturn new this.constructor().copy( this );\n\t\n\t};\n\t\n\tTHREE.Camera.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\t\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/cameras/CubeCamera.js\n\t\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.CubeCamera = function ( near, far, cubeResolution ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'CubeCamera';\n\t\n\t\tvar fov = 90, aspect = 1;\n\t\n\t\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\t\n\t\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\t\n\t\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\t\n\t\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\t\n\t\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\t\n\t\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\t\n\t\tvar options = { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter };\n\t\n\t\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\t\n\t\tthis.updateCubeMap = function ( renderer, scene ) {\n\t\n\t\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\t\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\n\t\t\trenderTarget.activeCubeFace = 0;\n\t\t\trenderer.render( scene, cameraPX, renderTarget );\n\t\n\t\t\trenderTarget.activeCubeFace = 1;\n\t\t\trenderer.render( scene, cameraNX, renderTarget );\n\t\n\t\t\trenderTarget.activeCubeFace = 2;\n\t\t\trenderer.render( scene, cameraPY, renderTarget );\n\t\n\t\t\trenderTarget.activeCubeFace = 3;\n\t\t\trenderer.render( scene, cameraNY, renderTarget );\n\t\n\t\t\trenderTarget.activeCubeFace = 4;\n\t\t\trenderer.render( scene, cameraPZ, renderTarget );\n\t\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\n\t\t\trenderTarget.activeCubeFace = 5;\n\t\t\trenderer.render( scene, cameraNZ, renderTarget );\n\t\n\t\t\trenderer.setRenderTarget( null );\n\t\n\t\t};\n\t\n\t};\n\t\n\tTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.CubeCamera.prototype.constructor = THREE.CubeCamera;\n\t\n\t// File:src/cameras/OrthographicCamera.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\t\n\tTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\n\t\n\t\tTHREE.Camera.call( this );\n\t\n\t\tthis.type = 'OrthographicCamera';\n\t\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\t\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\t\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\t\n\t\tthis.updateProjectionMatrix();\n\t\n\t};\n\t\n\tTHREE.OrthographicCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\n\t\n\t\tconstructor: THREE.OrthographicCamera,\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tTHREE.Camera.prototype.copy.call( this, source );\n\t\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\t\n\t\t\tthis.view = {\n\t\t\t\tfullWidth: fullWidth,\n\t\t\t\tfullHeight: fullHeight,\n\t\t\t\toffsetX: x,\n\t\t\t\toffsetY: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\n\t\t\tthis.updateProjectionMatrix();\n\t\n\t\t},\n\t\n\t\tclearViewOffset: function() {\n\t\n\t\t\tthis.view = null;\n\t\t\tthis.updateProjectionMatrix();\n\t\n\t\t},\n\t\n\t\tupdateProjectionMatrix: function () {\n\t\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\t\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\t\n\t\t\tif ( this.view !== null ) {\n\t\n\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\t\n\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\t\n\t\t\t}\n\t\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\t\n\t\t},\n\t\n\t\ttoJSON: function ( meta ) {\n\t\n\t\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\t\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\t\n\t\t\treturn data;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/cameras/PerspectiveCamera.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\t\n\tTHREE.PerspectiveCamera = function ( fov, aspect, near, far ) {\n\t\n\t\tTHREE.Camera.call( this );\n\t\n\t\tthis.type = 'PerspectiveCamera';\n\t\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\t\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\t\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\t\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\t\n\t\tthis.updateProjectionMatrix();\n\t\n\t};\n\t\n\tTHREE.PerspectiveCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\n\t\n\t\tconstructor: THREE.PerspectiveCamera,\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tTHREE.Camera.prototype.copy.call( this, source );\n\t\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\t\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\t\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\t\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\t\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\n\t\t\tthis.fov = THREE.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\t\n\t\t},\n\t\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\t\n\t\t\tvar vExtentSlope = Math.tan( THREE.Math.DEG2RAD * 0.5 * this.fov );\n\t\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\n\t\t},\n\t\n\t\tgetEffectiveFOV: function () {\n\t\n\t\t\treturn THREE.Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\t\tMath.tan( THREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\t\n\t\t},\n\t\n\t\tgetFilmWidth: function () {\n\t\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\t\n\t\t},\n\t\n\t\tgetFilmHeight: function () {\n\t\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\t\n\t\t},\n\t\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\t\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\t\n\t\t\tthis.view = {\n\t\t\t\tfullWidth: fullWidth,\n\t\t\t\tfullHeight: fullHeight,\n\t\t\t\toffsetX: x,\n\t\t\t\toffsetY: y,\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\n\t\t\tthis.updateProjectionMatrix();\n\t\n\t\t},\n\t\n\t\tclearViewOffset: function() {\n\t\n\t\t\tthis.view = null;\n\t\t\tthis.updateProjectionMatrix();\n\t\n\t\t},\n\t\n\t\tupdateProjectionMatrix: function () {\n\t\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan(\n\t\t\t\t\t\tTHREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\t\n\t\t\tif ( view !== null ) {\n\t\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\t\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\t\n\t\t\t}\n\t\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\t\n\t\t\tthis.projectionMatrix.makeFrustum(\n\t\t\t\t\tleft, left + width, top - height, top, near, this.far );\n\t\n\t\t},\n\t\n\t\ttoJSON: function ( meta ) {\n\t\n\t\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\t\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\t\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\t\n\t\t\tdata.object.aspect = this.aspect;\n\t\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\t\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\n\t\t\treturn data;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/cameras/StereoCamera.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.StereoCamera = function () {\n\t\n\t\tthis.type = 'StereoCamera';\n\t\n\t\tthis.aspect = 1;\n\t\n\t\tthis.cameraL = new THREE.PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\n\t\tthis.cameraR = new THREE.PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\n\t};\n\t\n\tObject.assign( THREE.StereoCamera.prototype, {\n\t\n\t\tupdate: ( function () {\n\t\n\t\t\tvar focus, fov, aspect, near, far;\n\t\n\t\t\tvar eyeRight = new THREE.Matrix4();\n\t\t\tvar eyeLeft = new THREE.Matrix4();\n\t\n\t\t\treturn function update( camera ) {\n\t\n\t\t\t\tvar needsUpdate = focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far;\n\t\n\t\t\t\tif ( needsUpdate ) {\n\t\n\t\t\t\t\tfocus = camera.focus;\n\t\t\t\t\tfov = camera.fov;\n\t\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\t\tnear = camera.near;\n\t\t\t\t\tfar = camera.far;\n\t\n\t\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\t\n\t\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\t\tvar eyeSep = 0.064 / 2;\n\t\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\n\t\t\t\t\tvar xmin, xmax;\n\t\n\t\t\t\t\t// translate xOffset\n\t\n\t\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\t\n\t\t\t\t\t// for left eye\n\t\n\t\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\t\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\t\n\t\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\t\n\t\t\t\t\t// for right eye\n\t\n\t\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\t\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\t\n\t\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\t\n\t\t\t};\n\t\n\t\t} )()\n\t\n\t} );\n\t\n\t// File:src/lights/Light.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.Light = function ( color, intensity ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'Light';\n\t\n\t\tthis.color = new THREE.Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\t\n\t\tthis.receiveShadow = undefined;\n\t\n\t};\n\t\n\tTHREE.Light.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\t\n\t\tconstructor: THREE.Light,\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\t\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\ttoJSON: function ( meta ) {\n\t\n\t\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\t\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\t\n\t\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\t\n\t\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\t\n\t\t\treturn data;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/lights/LightShadow.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.LightShadow = function ( camera ) {\n\t\n\t\tthis.camera = camera;\n\t\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\t\n\t\tthis.mapSize = new THREE.Vector2( 512, 512 );\n\t\n\t\tthis.map = null;\n\t\tthis.matrix = new THREE.Matrix4();\n\t\n\t};\n\t\n\tObject.assign( THREE.LightShadow.prototype, {\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tthis.camera = source.camera.clone();\n\t\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\t\n\t\t\tthis.mapSize.copy( source.mapSize );\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/lights/AmbientLight.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.AmbientLight = function ( color, intensity ) {\n\t\n\t\tTHREE.Light.call( this, color, intensity );\n\t\n\t\tthis.type = 'AmbientLight';\n\t\n\t\tthis.castShadow = undefined;\n\t\n\t};\n\t\n\tTHREE.AmbientLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\t\n\t\tconstructor: THREE.AmbientLight\n\t\n\t} );\n\t\n\t// File:src/lights/DirectionalLight.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.DirectionalLight = function ( color, intensity ) {\n\t\n\t\tTHREE.Light.call( this, color, intensity );\n\t\n\t\tthis.type = 'DirectionalLight';\n\t\n\t\tthis.position.copy( THREE.Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\t\n\t\tthis.target = new THREE.Object3D();\n\t\n\t\tthis.shadow = new THREE.DirectionalLightShadow();\n\t\n\t};\n\t\n\tTHREE.DirectionalLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\t\n\t\tconstructor: THREE.DirectionalLight,\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tTHREE.Light.prototype.copy.call( this, source );\n\t\n\t\t\tthis.target = source.target.clone();\n\t\n\t\t\tthis.shadow = source.shadow.clone();\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/lights/DirectionalLightShadow.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.DirectionalLightShadow = function ( light ) {\n\t\n\t\tTHREE.LightShadow.call( this, new THREE.OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\t\n\t};\n\t\n\tTHREE.DirectionalLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\n\t\n\t\tconstructor: THREE.DirectionalLightShadow\n\t\n\t} );\n\t\n\t// File:src/lights/HemisphereLight.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {\n\t\n\t\tTHREE.Light.call( this, skyColor, intensity );\n\t\n\t\tthis.type = 'HemisphereLight';\n\t\n\t\tthis.castShadow = undefined;\n\t\n\t\tthis.position.copy( THREE.Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\t\n\t\tthis.groundColor = new THREE.Color( groundColor );\n\t\n\t};\n\t\n\tTHREE.HemisphereLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\t\n\t\tconstructor: THREE.HemisphereLight,\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tTHREE.Light.prototype.copy.call( this, source );\n\t\n\t\t\tthis.groundColor.copy( source.groundColor );\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/lights/PointLight.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\t\n\tTHREE.PointLight = function ( color, intensity, distance, decay ) {\n\t\n\t\tTHREE.Light.call( this, color, intensity );\n\t\n\t\tthis.type = 'PointLight';\n\t\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\t\n\t\t\t},\n\t\t\tset: function ( power ) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\t\t\t}\n\t\t} );\n\t\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\t\n\t\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\t\n\t};\n\t\n\tTHREE.PointLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\t\n\t\tconstructor: THREE.PointLight,\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tTHREE.Light.prototype.copy.call( this, source );\n\t\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\t\n\t\t\tthis.shadow = source.shadow.clone();\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/lights/SpotLight.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.SpotLight = function ( color, intensity, distance, angle, penumbra, decay ) {\n\t\n\t\tTHREE.Light.call( this, color, intensity );\n\t\n\t\tthis.type = 'SpotLight';\n\t\n\t\tthis.position.copy( THREE.Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\t\n\t\tthis.target = new THREE.Object3D();\n\t\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\t\t\t},\n\t\t\tset: function ( power ) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\t\t\t}\n\t\t} );\n\t\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\t\n\t\tthis.shadow = new THREE.SpotLightShadow();\n\t\n\t};\n\t\n\tTHREE.SpotLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\t\n\t\tconstructor: THREE.SpotLight,\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tTHREE.Light.prototype.copy.call( this, source );\n\t\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\t\n\t\t\tthis.target = source.target.clone();\n\t\n\t\t\tthis.shadow = source.shadow.clone();\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/lights/SpotLightShadow.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.SpotLightShadow = function () {\n\t\n\t\tTHREE.LightShadow.call( this, new THREE.PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\t\n\t};\n\t\n\tTHREE.SpotLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\n\t\n\t\tconstructor: THREE.SpotLightShadow,\n\t\n\t\tupdate: function ( light ) {\n\t\n\t\t\tvar fov = THREE.Math.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || 500;\n\t\n\t\t\tvar camera = this.camera;\n\t\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\t\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/loaders/AudioLoader.js\n\t\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\t\n\tTHREE.AudioLoader = function ( manager ) {\n\t\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\t\n\t};\n\t\n\tObject.assign( THREE.AudioLoader.prototype, {\n\t\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\t\n\t\t\t\tvar context = THREE.AudioContext;\n\t\n\t\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\t\n\t\t\t\t\tonLoad( audioBuffer );\n\t\n\t\t\t\t} );\n\t\n\t\t\t}, onProgress, onError );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/loaders/Cache.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.Cache = {\n\t\n\t\tenabled: false,\n\t\n\t\tfiles: {},\n\t\n\t\tadd: function ( key, file ) {\n\t\n\t\t\tif ( this.enabled === false ) return;\n\t\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\t\n\t\t\tthis.files[ key ] = file;\n\t\n\t\t},\n\t\n\t\tget: function ( key ) {\n\t\n\t\t\tif ( this.enabled === false ) return;\n\t\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\t\n\t\t\treturn this.files[ key ];\n\t\n\t\t},\n\t\n\t\tremove: function ( key ) {\n\t\n\t\t\tdelete this.files[ key ];\n\t\n\t\t},\n\t\n\t\tclear: function () {\n\t\n\t\t\tthis.files = {};\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/loaders/Loader.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.Loader = function () {\n\t\n\t\tthis.onLoadStart = function () {};\n\t\tthis.onLoadProgress = function () {};\n\t\tthis.onLoadComplete = function () {};\n\t\n\t};\n\t\n\tTHREE.Loader.prototype = {\n\t\n\t\tconstructor: THREE.Loader,\n\t\n\t\tcrossOrigin: undefined,\n\t\n\t\textractUrlBase: function ( url ) {\n\t\n\t\t\tvar parts = url.split( '/' );\n\t\n\t\t\tif ( parts.length === 1 ) return './';\n\t\n\t\t\tparts.pop();\n\t\n\t\t\treturn parts.join( '/' ) + '/';\n\t\n\t\t},\n\t\n\t\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\t\n\t\t\tvar array = [];\n\t\n\t\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\t\n\t\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\t\n\t\t\t}\n\t\n\t\t\treturn array;\n\t\n\t\t},\n\t\n\t\tcreateMaterial: ( function () {\n\t\n\t\t\tvar color, textureLoader, materialLoader;\n\t\n\t\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\t\n\t\t\t\tif ( color === undefined ) color = new THREE.Color();\n\t\t\t\tif ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();\n\t\t\t\tif ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();\n\t\n\t\t\t\t// convert from old material format\n\t\n\t\t\t\tvar textures = {};\n\t\n\t\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\t\n\t\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\t\tvar loader = THREE.Loader.Handlers.get( fullPath );\n\t\n\t\t\t\t\tvar texture;\n\t\n\t\t\t\t\tif ( loader !== null ) {\n\t\n\t\t\t\t\t\ttexture = loader.load( fullPath );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( repeat !== undefined ) {\n\t\n\t\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\t\n\t\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( offset !== undefined ) {\n\t\n\t\t\t\t\t\ttexture.offset.fromArray( offset );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( wrap !== undefined ) {\n\t\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;\n\t\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( anisotropy !== undefined ) {\n\t\n\t\t\t\t\t\ttexture.anisotropy = anisotropy;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar uuid = THREE.Math.generateUUID();\n\t\n\t\t\t\t\ttextures[ uuid ] = texture;\n\t\n\t\t\t\t\treturn uuid;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t//\n\t\n\t\t\t\tvar json = {\n\t\t\t\t\tuuid: THREE.Math.generateUUID(),\n\t\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t\t};\n\t\n\t\t\t\tfor ( var name in m ) {\n\t\n\t\t\t\t\tvar value = m[ name ];\n\t\n\t\t\t\t\tswitch ( name ) {\n\t\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\t\tjson.blending = THREE[ value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\t\tjson.side = THREE.BackSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\t\tjson.side = THREE.DoubleSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\t\tcase 'opacity':\n\t\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\t\tcase 'transparent':\n\t\t\t\t\t\tcase 'visible':\n\t\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\t\tif ( value === true ) json.vertexColors = THREE.VertexColors;\n\t\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = THREE.FaceColors;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\t\n\t\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\t\n\t\t\t\tmaterialLoader.setTextures( textures );\n\t\n\t\t\t\treturn materialLoader.parse( json );\n\t\n\t\t\t};\n\t\n\t\t} )()\n\t\n\t};\n\t\n\tTHREE.Loader.Handlers = {\n\t\n\t\thandlers: [],\n\t\n\t\tadd: function ( regex, loader ) {\n\t\n\t\t\tthis.handlers.push( regex, loader );\n\t\n\t\t},\n\t\n\t\tget: function ( file ) {\n\t\n\t\t\tvar handlers = this.handlers;\n\t\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\t\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader  = handlers[ i + 1 ];\n\t\n\t\t\t\tif ( regex.test( file ) ) {\n\t\n\t\t\t\t\treturn loader;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn null;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/loaders/XHRLoader.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.XHRLoader = function ( manager ) {\n\t\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\t\n\t};\n\t\n\tObject.assign( THREE.XHRLoader.prototype, {\n\t\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tvar cached = THREE.Cache.get( url );\n\t\n\t\t\tif ( cached !== undefined ) {\n\t\n\t\t\t\tscope.manager.itemStart( url );\n\t\n\t\t\t\tsetTimeout( function () {\n\t\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\t\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\n\t\t\t\t}, 0 );\n\t\n\t\t\t\treturn cached;\n\t\n\t\t\t}\n\t\n\t\t\tvar request = new XMLHttpRequest();\n\t\t\trequest.overrideMimeType( 'text/plain' );\n\t\t\trequest.open( 'GET', url, true );\n\t\n\t\t\trequest.addEventListener( 'load', function ( event ) {\n\t\n\t\t\t\tvar response = event.target.response;\n\t\n\t\t\t\tTHREE.Cache.add( url, response );\n\t\n\t\t\t\tif ( this.status === 200 ) {\n\t\n\t\t\t\t\tif ( onLoad ) onLoad( response );\n\t\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\n\t\t\t\t} else if ( this.status === 0 ) {\n\t\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\n\t\t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\t\n\t\t\t\t\tif ( onLoad ) onLoad( response );\n\t\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tif ( onError ) onError( event );\n\t\n\t\t\t\t\tscope.manager.itemError( url );\n\t\n\t\t\t\t}\n\t\n\t\t\t}, false );\n\t\n\t\t\tif ( onProgress !== undefined ) {\n\t\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\t\n\t\t\t\t\tonProgress( event );\n\t\n\t\t\t\t}, false );\n\t\n\t\t\t}\n\t\n\t\t\trequest.addEventListener( 'error', function ( event ) {\n\t\n\t\t\t\tif ( onError ) onError( event );\n\t\n\t\t\t\tscope.manager.itemError( url );\n\t\n\t\t\t}, false );\n\t\n\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\t\n\t\t\trequest.send( null );\n\t\n\t\t\tscope.manager.itemStart( url );\n\t\n\t\t\treturn request;\n\t\n\t\t},\n\t\n\t\tsetPath: function ( value ) {\n\t\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetResponseType: function ( value ) {\n\t\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetWithCredentials: function ( value ) {\n\t\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/loaders/FontLoader.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.FontLoader = function ( manager ) {\n\t\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\t\n\t};\n\t\n\tObject.assign( THREE.FontLoader.prototype, {\n\t\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.load( url, function ( text ) {\n\t\n\t\t\t\tvar json;\n\t\n\t\t\t\ttry {\n\t\n\t\t\t\t\tjson = JSON.parse( text );\n\t\n\t\t\t\t} catch ( e ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar font = scope.parse( json );\n\t\n\t\t\t\tif ( onLoad ) onLoad( font );\n\t\n\t\t\t}, onProgress, onError );\n\t\n\t\t},\n\t\n\t\tparse: function ( json ) {\n\t\n\t\t\treturn new THREE.Font( json );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/loaders/ImageLoader.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.ImageLoader = function ( manager ) {\n\t\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\t\n\t};\n\t\n\tObject.assign( THREE.ImageLoader.prototype, {\n\t\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\t\t\timage.onload = function () {\n\t\n\t\t\t\tURL.revokeObjectURL( image.src );\n\t\n\t\t\t\tif ( onLoad ) onLoad( image );\n\t\n\t\t\t\tscope.manager.itemEnd( url );\n\t\n\t\t\t};\n\t\n\t\t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\t\n\t\t\t\timage.src = url;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tvar loader = new THREE.XHRLoader();\n\t\t\t\tloader.setPath( this.path );\n\t\t\t\tloader.setResponseType( 'blob' );\n\t\t\t\tloader.load( url, function ( blob ) {\n\t\n\t\t\t\t\timage.src = URL.createObjectURL( blob );\n\t\n\t\t\t\t}, onProgress, onError );\n\t\n\t\t\t}\n\t\n\t\t\tscope.manager.itemStart( url );\n\t\n\t\t\treturn image;\n\t\n\t\t},\n\t\n\t\tsetCrossOrigin: function ( value ) {\n\t\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetPath: function ( value ) {\n\t\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/loaders/JSONLoader.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.JSONLoader = function ( manager ) {\n\t\n\t\tif ( typeof manager === 'boolean' ) {\n\t\n\t\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\t\tmanager = undefined;\n\t\n\t\t}\n\t\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\t\n\t\tthis.withCredentials = false;\n\t\n\t};\n\t\n\tObject.assign( THREE.JSONLoader.prototype, {\n\t\n\t\tload: function( url, onLoad, onProgress, onError ) {\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );\n\t\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\tloader.load( url, function ( text ) {\n\t\n\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\tvar metadata = json.metadata;\n\t\n\t\t\t\tif ( metadata !== undefined ) {\n\t\n\t\t\t\t\tvar type = metadata.type;\n\t\n\t\t\t\t\tif ( type !== undefined ) {\n\t\n\t\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\t\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\t\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\t\tonLoad( object.geometry, object.materials );\n\t\n\t\t\t}, onProgress, onError );\n\t\n\t\t},\n\t\n\t\tsetTexturePath: function ( value ) {\n\t\n\t\t\tthis.texturePath = value;\n\t\n\t\t},\n\t\n\t\tparse: function ( json, texturePath ) {\n\t\n\t\t\tvar geometry = new THREE.Geometry(),\n\t\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\t\n\t\t\tparseModel( scale );\n\t\n\t\t\tparseSkin();\n\t\t\tparseMorphing( scale );\n\t\t\tparseAnimations();\n\t\n\t\t\tgeometry.computeFaceNormals();\n\t\t\tgeometry.computeBoundingSphere();\n\t\n\t\t\tfunction parseModel( scale ) {\n\t\n\t\t\t\tfunction isBitSet( value, position ) {\n\t\n\t\t\t\t\treturn value & ( 1 << position );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar i, j, fi,\n\t\n\t\t\t\toffset, zLength,\n\t\n\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\t\n\t\t\t\ttype,\n\t\t\t\tisQuad,\n\t\t\t\thasMaterial,\n\t\t\t\thasFaceVertexUv,\n\t\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\t\thasFaceColor, hasFaceVertexColor,\n\t\n\t\t\tvertex, face, faceA, faceB, hex, normal,\n\t\n\t\t\t\tuvLayer, uv, u, v,\n\t\n\t\t\t\tfaces = json.faces,\n\t\t\t\tvertices = json.vertices,\n\t\t\t\tnormals = json.normals,\n\t\t\t\tcolors = json.colors,\n\t\n\t\t\t\tnUvLayers = 0;\n\t\n\t\t\t\tif ( json.uvs !== undefined ) {\n\t\n\t\t\t\t\t// disregard empty arrays\n\t\n\t\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\t\n\t\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = vertices.length;\n\t\n\t\t\t\twhile ( offset < zLength ) {\n\t\n\t\t\t\t\tvertex = new THREE.Vector3();\n\t\n\t\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\t\n\t\t\t\t\tgeometry.vertices.push( vertex );\n\t\n\t\t\t\t}\n\t\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = faces.length;\n\t\n\t\t\t\twhile ( offset < zLength ) {\n\t\n\t\t\t\t\ttype = faces[ offset ++ ];\n\t\n\t\n\t\t\t\t\tisQuad              = isBitSet( type, 0 );\n\t\t\t\t\thasMaterial         = isBitSet( type, 1 );\n\t\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\t\n\t\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\t\n\t\t\t\t\tif ( isQuad ) {\n\t\n\t\t\t\t\t\tfaceA = new THREE.Face3();\n\t\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\t\n\t\t\t\t\t\tfaceB = new THREE.Face3();\n\t\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\t\n\t\t\t\t\t\toffset += 4;\n\t\n\t\t\t\t\t\tif ( hasMaterial ) {\n\t\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\t\n\t\t\t\t\t\tfi = geometry.faces.length;\n\t\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\t\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\t\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\t\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\t\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\t\n\t\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\t\n\t\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\t\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\t\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\t\n\t\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\t\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\t\n\t\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\t\tfaceB.color.setHex( hex );\n\t\n\t\t\t\t\t\t}\n\t\n\t\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\t\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\t\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\t\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\t\tgeometry.faces.push( faceB );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tface = new THREE.Face3();\n\t\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\t\tface.c = faces[ offset ++ ];\n\t\n\t\t\t\t\t\tif ( hasMaterial ) {\n\t\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.materialIndex = materialIndex;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\t\n\t\t\t\t\t\tfi = geometry.faces.length;\n\t\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\t\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\t\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\t\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\t\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\t\n\t\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\t\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\t\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\t\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\t\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\t\n\t\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\t\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\t\n\t\t\t\t\t\t}\n\t\n\t\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\t\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\t\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tgeometry.faces.push( face );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction parseSkin() {\n\t\n\t\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\t\n\t\t\t\tif ( json.skinWeights ) {\n\t\n\t\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\t\n\t\t\t\t\t\tvar x =                               json.skinWeights[ i ];\n\t\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\t\n\t\t\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( json.skinIndices ) {\n\t\n\t\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\t\n\t\t\t\t\t\tvar a =                               json.skinIndices[ i ];\n\t\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\t\n\t\t\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tgeometry.bones = json.bones;\n\t\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\t\n\t\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction parseMorphing( scale ) {\n\t\n\t\t\t\tif ( json.morphTargets !== undefined ) {\n\t\n\t\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\t\n\t\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\t\n\t\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\t\n\t\t\t\t\t\t\tvar vertex = new THREE.Vector3();\n\t\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\t\n\t\t\t\t\t\t\tdstVertices.push( vertex );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\t\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\t\n\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction parseAnimations() {\n\t\n\t\t\t\tvar outputAnimations = [];\n\t\n\t\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\t\tvar animations = [];\n\t\n\t\t\t\tif ( json.animation !== undefined ) {\n\t\n\t\t\t\t\tanimations.push( json.animation );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( json.animations !== undefined ) {\n\t\n\t\t\t\t\tif ( json.animations.length ) {\n\t\n\t\t\t\t\t\tanimations = animations.concat( json.animations );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tanimations.push( json.animations );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\t\n\t\t\t\t\tvar clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// parse implicit morph animations\n\t\t\t\tif ( geometry.morphTargets ) {\n\t\n\t\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\t\tvar morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\t\n\t\t\t}\n\t\n\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\t\n\t\t\t\treturn { geometry: geometry };\n\t\n\t\t\t} else {\n\t\n\t\t\t\tvar materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\t\n\t\t\t\treturn { geometry: geometry, materials: materials };\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/loaders/LoadingManager.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\n\t\n\t\tvar scope = this;\n\t\n\t\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\t\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\t\n\t\tthis.itemStart = function ( url ) {\n\t\n\t\t\titemsTotal ++;\n\t\n\t\t\tif ( isLoading === false ) {\n\t\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\t\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tisLoading = true;\n\t\n\t\t};\n\t\n\t\tthis.itemEnd = function ( url ) {\n\t\n\t\t\titemsLoaded ++;\n\t\n\t\t\tif ( scope.onProgress !== undefined ) {\n\t\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\t\n\t\t\t}\n\t\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\t\n\t\t\t\tisLoading = false;\n\t\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\t\n\t\t\t\t\tscope.onLoad();\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.itemError = function ( url ) {\n\t\n\t\t\tif ( scope.onError !== undefined ) {\n\t\n\t\t\t\tscope.onError( url );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t};\n\t\n\tTHREE.DefaultLoadingManager = new THREE.LoadingManager();\n\t\n\t// File:src/loaders/BufferGeometryLoader.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.BufferGeometryLoader = function ( manager ) {\n\t\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\t\n\t};\n\t\n\tObject.assign( THREE.BufferGeometryLoader.prototype, {\n\t\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\t\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\t\n\t\t\t}, onProgress, onError );\n\t\n\t\t},\n\t\n\t\tparse: function ( json ) {\n\t\n\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\n\t\t\tvar index = json.data.index;\n\t\n\t\t\tvar TYPED_ARRAYS = {\n\t\t\t\t'Int8Array': Int8Array,\n\t\t\t\t'Uint8Array': Uint8Array,\n\t\t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n\t\t\t\t'Int16Array': Int16Array,\n\t\t\t\t'Uint16Array': Uint16Array,\n\t\t\t\t'Int32Array': Int32Array,\n\t\t\t\t'Uint32Array': Uint32Array,\n\t\t\t\t'Float32Array': Float32Array,\n\t\t\t\t'Float64Array': Float64Array\n\t\t\t};\n\t\n\t\t\tif ( index !== undefined ) {\n\t\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );\n\t\n\t\t\t}\n\t\n\t\t\tvar attributes = json.data.attributes;\n\t\n\t\t\tfor ( var key in attributes ) {\n\t\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\n\t\t\t\tgeometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\t\n\t\t\t}\n\t\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\t\n\t\t\tif ( groups !== undefined ) {\n\t\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\t\n\t\t\t\t\tvar group = groups[ i ];\n\t\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\t\n\t\t\tif ( boundingSphere !== undefined ) {\n\t\n\t\t\t\tvar center = new THREE.Vector3();\n\t\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\t\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tgeometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );\n\t\n\t\t\t}\n\t\n\t\t\treturn geometry;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/loaders/MaterialLoader.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.MaterialLoader = function ( manager ) {\n\t\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\t\tthis.textures = {};\n\t\n\t};\n\t\n\tObject.assign( THREE.MaterialLoader.prototype, {\n\t\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\t\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\t\n\t\t\t}, onProgress, onError );\n\t\n\t\t},\n\t\n\t\tsetTextures: function ( value ) {\n\t\n\t\t\tthis.textures = value;\n\t\n\t\t},\n\t\n\t\tgetTexture: function ( name ) {\n\t\n\t\t\tvar textures = this.textures;\n\t\n\t\t\tif ( textures[ name ] === undefined ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\t\n\t\t\t}\n\t\n\t\t\treturn textures[ name ];\n\t\n\t\t},\n\t\n\t\tparse: function ( json ) {\n\t\n\t\t\tvar material = new THREE[ json.type ];\n\t\n\t\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\n\t\t\t// for PointsMaterial\n\t\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\t\n\t\t\t// maps\n\t\n\t\t\tif ( json.map !== undefined ) material.map = this.getTexture( json.map );\n\t\n\t\t\tif ( json.alphaMap !== undefined ) {\n\t\n\t\t\t\tmaterial.alphaMap = this.getTexture( json.alphaMap );\n\t\t\t\tmaterial.transparent = true;\n\t\n\t\t\t}\n\t\n\t\t\tif ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );\n\t\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\t\n\t\t\tif ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );\n\t\t\tif ( json.normalScale !== undefined ) {\n\t\n\t\t\t\tvar normalScale = json.normalScale;\n\t\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\t\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tmaterial.normalScale = new THREE.Vector2().fromArray( normalScale );\n\t\n\t\t\t}\n\t\n\t\t\tif ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );\n\t\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\t\n\t\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = this.getTexture( json.roughnessMap );\n\t\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = this.getTexture( json.metalnessMap );\n\t\n\t\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = this.getTexture( json.emissiveMap );\n\t\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\t\n\t\t\tif ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );\n\t\n\t\t\tif ( json.envMap !== undefined ) {\n\t\n\t\t\t\tmaterial.envMap = this.getTexture( json.envMap );\n\t\t\t\tmaterial.combine = THREE.MultiplyOperation;\n\t\n\t\t\t}\n\t\n\t\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\n\t\t\tif ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );\n\t\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\t\n\t\t\tif ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );\n\t\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\t\n\t\t\t// MultiMaterial\n\t\n\t\t\tif ( json.materials !== undefined ) {\n\t\n\t\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn material;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/loaders/ObjectLoader.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.ObjectLoader = function ( manager ) {\n\t\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\t\tthis.texturePath = '';\n\t\n\t};\n\t\n\tObject.assign( THREE.ObjectLoader.prototype, {\n\t\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\tif ( this.texturePath === '' ) {\n\t\n\t\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\t\n\t\t\t}\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\t\n\t\t\t\tscope.parse( JSON.parse( text ), onLoad );\n\t\n\t\t\t}, onProgress, onError );\n\t\n\t\t},\n\t\n\t\tsetTexturePath: function ( value ) {\n\t\n\t\t\tthis.texturePath = value;\n\t\n\t\t},\n\t\n\t\tsetCrossOrigin: function ( value ) {\n\t\n\t\t\tthis.crossOrigin = value;\n\t\n\t\t},\n\t\n\t\tparse: function ( json, onLoad ) {\n\t\n\t\t\tvar geometries = this.parseGeometries( json.geometries );\n\t\n\t\t\tvar images = this.parseImages( json.images, function () {\n\t\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\t\n\t\t\t} );\n\t\n\t\t\tvar textures  = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\t\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\t\n\t\t\tif ( json.animations ) {\n\t\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\t\n\t\t\t}\n\t\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\t\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\t\n\t\t\t}\n\t\n\t\t\treturn object;\n\t\n\t\t},\n\t\n\t\tparseGeometries: function ( json ) {\n\t\n\t\t\tvar geometries = {};\n\t\n\t\t\tif ( json !== undefined ) {\n\t\n\t\t\t\tvar geometryLoader = new THREE.JSONLoader();\n\t\t\t\tvar bufferGeometryLoader = new THREE.BufferGeometryLoader();\n\t\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\t\n\t\t\t\t\tswitch ( data.type ) {\n\t\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\t\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\t\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\t\n\t\t\t\t\t\t\tgeometry = new THREE [ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\t\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\t\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\t\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\t\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase 'Geometry':\n\t\n\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tdefault:\n\t\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\t\n\t\t\t\t\t\t\tcontinue;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\n\t\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn geometries;\n\t\n\t\t},\n\t\n\t\tparseMaterials: function ( json, textures ) {\n\t\n\t\t\tvar materials = {};\n\t\n\t\t\tif ( json !== undefined ) {\n\t\n\t\t\t\tvar loader = new THREE.MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\t\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar material = loader.parse( json[ i ] );\n\t\t\t\t\tmaterials[ material.uuid ] = material;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn materials;\n\t\n\t\t},\n\t\n\t\tparseAnimations: function ( json ) {\n\t\n\t\t\tvar animations = [];\n\t\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\t\n\t\t\t\tvar clip = THREE.AnimationClip.parse( json[ i ] );\n\t\n\t\t\t\tanimations.push( clip );\n\t\n\t\t\t}\n\t\n\t\t\treturn animations;\n\t\n\t\t},\n\t\n\t\tparseImages: function ( json, onLoad ) {\n\t\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\t\n\t\t\tfunction loadImage( url ) {\n\t\n\t\t\t\tscope.manager.itemStart( url );\n\t\n\t\t\t\treturn loader.load( url, function () {\n\t\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\n\t\t\t\t} );\n\t\n\t\t\t}\n\t\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\t\n\t\t\t\tvar manager = new THREE.LoadingManager( onLoad );\n\t\n\t\t\t\tvar loader = new THREE.ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\t\n\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn images;\n\t\n\t\t},\n\t\n\t\tparseTextures: function ( json, images ) {\n\t\n\t\t\tfunction parseConstant( value ) {\n\t\n\t\t\t\tif ( typeof( value ) === 'number' ) return value;\n\t\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\t\n\t\t\t\treturn THREE[ value ];\n\t\n\t\t\t}\n\t\n\t\t\tvar textures = {};\n\t\n\t\t\tif ( json !== undefined ) {\n\t\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar data = json[ i ];\n\t\n\t\t\t\t\tif ( data.image === undefined ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar texture = new THREE.Texture( images[ data.image ] );\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t\t\t\t\ttexture.uuid = data.uuid;\n\t\n\t\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\t\n\t\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );\n\t\n\t\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\t\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ] );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );\n\t\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );\n\t\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\t\n\t\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\t\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn textures;\n\t\n\t\t},\n\t\n\t\tparseObject: function () {\n\t\n\t\t\tvar matrix = new THREE.Matrix4();\n\t\n\t\t\treturn function parseObject( data, geometries, materials ) {\n\t\n\t\t\t\tvar object;\n\t\n\t\t\t\tfunction getGeometry( name ) {\n\t\n\t\t\t\t\tif ( geometries[ name ] === undefined ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn geometries[ name ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction getMaterial( name ) {\n\t\n\t\t\t\t\tif ( name === undefined ) return undefined;\n\t\n\t\t\t\t\tif ( materials[ name ] === undefined ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn materials[ name ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tswitch ( data.type ) {\n\t\n\t\t\t\t\tcase 'Scene':\n\t\n\t\t\t\t\t\tobject = new THREE.Scene();\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'PerspectiveCamera':\n\t\n\t\t\t\t\t\tobject = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\t\n\t\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'OrthographicCamera':\n\t\n\t\t\t\t\t\tobject = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'AmbientLight':\n\t\n\t\t\t\t\t\tobject = new THREE.AmbientLight( data.color, data.intensity );\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'DirectionalLight':\n\t\n\t\t\t\t\t\tobject = new THREE.DirectionalLight( data.color, data.intensity );\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'PointLight':\n\t\n\t\t\t\t\t\tobject = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'SpotLight':\n\t\n\t\t\t\t\t\tobject = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'HemisphereLight':\n\t\n\t\t\t\t\t\tobject = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'Mesh':\n\t\n\t\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\t\tvar material = getMaterial( data.material );\n\t\n\t\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\t\n\t\t\t\t\t\t\tobject = new THREE.SkinnedMesh( geometry, material );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tobject = new THREE.Mesh( geometry, material );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'LOD':\n\t\n\t\t\t\t\t\tobject = new THREE.LOD();\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'Line':\n\t\n\t\t\t\t\t\tobject = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'PointCloud':\n\t\t\t\t\tcase 'Points':\n\t\n\t\t\t\t\t\tobject = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'Sprite':\n\t\n\t\t\t\t\t\tobject = new THREE.Sprite( getMaterial( data.material ) );\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase 'Group':\n\t\n\t\t\t\t\t\tobject = new THREE.Group();\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tdefault:\n\t\n\t\t\t\t\t\tobject = new THREE.Object3D();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tobject.uuid = data.uuid;\n\t\n\t\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\t\t\tif ( data.matrix !== undefined ) {\n\t\n\t\t\t\t\tmatrix.fromArray( data.matrix );\n\t\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\t\n\t\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\n\t\t\t\tif ( data.children !== undefined ) {\n\t\n\t\t\t\t\tfor ( var child in data.children ) {\n\t\n\t\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( data.type === 'LOD' ) {\n\t\n\t\t\t\t\tvar levels = data.levels;\n\t\n\t\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\t\n\t\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\t\n\t\t\t\t\t\tif ( child !== undefined ) {\n\t\n\t\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn object;\n\t\n\t\t\t};\n\t\n\t\t}()\n\t\n\t} );\n\t\n\t// File:src/loaders/TextureLoader.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.TextureLoader = function ( manager ) {\n\t\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\t\n\t};\n\t\n\tObject.assign( THREE.TextureLoader.prototype, {\n\t\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\tvar texture = new THREE.Texture();\n\t\n\t\t\tvar loader = new THREE.ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( image ) {\n\t\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\t\n\t\t\t\ttexture.format = isJPEG ? THREE.RGBFormat : THREE.RGBAFormat;\n\t\t\t\ttexture.image = image;\n\t\t\t\ttexture.needsUpdate = true;\n\t\n\t\t\t\tif ( onLoad !== undefined ) {\n\t\n\t\t\t\t\tonLoad( texture );\n\t\n\t\t\t\t}\n\t\n\t\t\t}, onProgress, onError );\n\t\n\t\t\treturn texture;\n\t\n\t\t},\n\t\n\t\tsetCrossOrigin: function ( value ) {\n\t\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetPath: function ( value ) {\n\t\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/loaders/CubeTextureLoader.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.CubeTextureLoader = function ( manager ) {\n\t\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\t\n\t};\n\t\n\tObject.assign( THREE.CubeTextureLoader.prototype, {\n\t\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\t\n\t\t\tvar texture = new THREE.CubeTexture();\n\t\n\t\t\tvar loader = new THREE.ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\t\n\t\t\tvar loaded = 0;\n\t\n\t\t\tfunction loadTexture( i ) {\n\t\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\t\n\t\t\t\t\ttexture.images[ i ] = image;\n\t\n\t\t\t\t\tloaded ++;\n\t\n\t\t\t\t\tif ( loaded === 6 ) {\n\t\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}, undefined, onError );\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\t\n\t\t\t\tloadTexture( i );\n\t\n\t\t\t}\n\t\n\t\t\treturn texture;\n\t\n\t\t},\n\t\n\t\tsetCrossOrigin: function ( value ) {\n\t\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tsetPath: function ( value ) {\n\t\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/loaders/BinaryTextureLoader.js\n\t\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t */\n\t\n\tTHREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {\n\t\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\t\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\t\n\t};\n\t\n\tObject.assign( THREE.BinaryTextureLoader.prototype, {\n\t\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tvar texture = new THREE.DataTexture();\n\t\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\n\t\t\tloader.load( url, function ( buffer ) {\n\t\n\t\t\t\tvar texData = scope._parser( buffer );\n\t\n\t\t\t\tif ( ! texData ) return;\n\t\n\t\t\t\tif ( undefined !== texData.image ) {\n\t\n\t\t\t\t\ttexture.image = texData.image;\n\t\n\t\t\t\t} else if ( undefined !== texData.data ) {\n\t\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\t\n\t\t\t\t}\n\t\n\t\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\n\t\n\t\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\n\t\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\n\t\n\t\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\t\n\t\t\t\tif ( undefined !== texData.format ) {\n\t\n\t\t\t\t\ttexture.format = texData.format;\n\t\n\t\t\t\t}\n\t\t\t\tif ( undefined !== texData.type ) {\n\t\n\t\t\t\t\ttexture.type = texData.type;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( undefined !== texData.mipmaps ) {\n\t\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( 1 === texData.mipmapCount ) {\n\t\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\t\n\t\t\t\t}\n\t\n\t\t\t\ttexture.needsUpdate = true;\n\t\n\t\t\t\tif ( onLoad ) onLoad( texture, texData );\n\t\n\t\t\t}, onProgress, onError );\n\t\n\t\n\t\t\treturn texture;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/loaders/CompressedTextureLoader.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t */\n\t\n\tTHREE.CompressedTextureLoader = function ( manager ) {\n\t\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\t\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\t\n\t};\n\t\n\tObject.assign( THREE.CompressedTextureLoader.prototype, {\n\t\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tvar images = [];\n\t\n\t\t\tvar texture = new THREE.CompressedTexture();\n\t\t\ttexture.image = images;\n\t\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\n\t\t\tfunction loadTexture( i ) {\n\t\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\t\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\t\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\t\n\t\t\t\t\tloaded += 1;\n\t\n\t\t\t\t\tif ( loaded === 6 ) {\n\t\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\t\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}, onProgress, onError );\n\t\n\t\t\t}\n\t\n\t\t\tif ( Array.isArray( url ) ) {\n\t\n\t\t\t\tvar loaded = 0;\n\t\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\t\n\t\t\t\t\tloadTexture( i );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\n\t\t\t\tloader.load( url, function ( buffer ) {\n\t\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\t\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\t\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\t\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\t\n\t\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\t\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\t\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\t\n\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\t\n\t\t\t\t}, onProgress, onError );\n\t\n\t\t\t}\n\t\n\t\t\treturn texture;\n\t\n\t\t},\n\t\n\t\tsetPath: function ( value ) {\n\t\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/materials/Material.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.Material = function () {\n\t\n\t\tObject.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );\n\t\n\t\tthis.uuid = THREE.Math.generateUUID();\n\t\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\t\n\t\tthis.fog = true;\n\t\tthis.lights = true;\n\t\n\t\tthis.blending = THREE.NormalBlending;\n\t\tthis.side = THREE.FrontSide;\n\t\tthis.shading = THREE.SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\t\tthis.vertexColors = THREE.NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\t\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\t\n\t\tthis.blendSrc = THREE.SrcAlphaFactor;\n\t\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = THREE.AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\t\n\t\tthis.depthFunc = THREE.LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\t\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipShadows = false;\n\t\n\t\tthis.colorWrite = true;\n\t\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\t\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\t\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\t\n\t\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\t\n\t\tthis.visible = true;\n\t\n\t\tthis._needsUpdate = true;\n\t\n\t};\n\t\n\tTHREE.Material.prototype = {\n\t\n\t\tconstructor: THREE.Material,\n\t\n\t\tget needsUpdate() {\n\t\n\t\t\treturn this._needsUpdate;\n\t\n\t\t},\n\t\n\t\tset needsUpdate( value ) {\n\t\n\t\t\tif ( value === true ) this.update();\n\t\t\tthis._needsUpdate = value;\n\t\n\t\t},\n\t\n\t\tsetValues: function ( values ) {\n\t\n\t\t\tif ( values === undefined ) return;\n\t\n\t\t\tfor ( var key in values ) {\n\t\n\t\t\t\tvar newValue = values[ key ];\n\t\n\t\t\t\tif ( newValue === undefined ) {\n\t\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar currentValue = this[ key ];\n\t\n\t\t\t\tif ( currentValue === undefined ) {\n\t\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( currentValue instanceof THREE.Color ) {\n\t\n\t\t\t\t\tcurrentValue.set( newValue );\n\t\n\t\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\n\t\n\t\t\t\t\tcurrentValue.copy( newValue );\n\t\n\t\t\t\t} else if ( key === 'overdraw' ) {\n\t\n\t\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\t\tthis[ key ] = Number( newValue );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis[ key ] = newValue;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\ttoJSON: function ( meta ) {\n\t\n\t\t\tvar isRoot = meta === undefined;\n\t\n\t\t\tif ( isRoot ) {\n\t\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\t\n\t\t\tif ( this.color instanceof THREE.Color ) data.color = this.color.getHex();\n\t\n\t\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\t\n\t\t\tif ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();\n\t\t\tif ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();\n\t\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\n\t\t\tif ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;\n\t\t\tif ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\t\tif ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tif ( this.bumpMap instanceof THREE.Texture ) {\n\t\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\n\t\t\t}\n\t\t\tif ( this.normalMap instanceof THREE.Texture ) {\n\t\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\n\t\t\t}\n\t\t\tif ( this.displacementMap instanceof THREE.Texture ) {\n\t\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\n\t\t\t}\n\t\t\tif ( this.roughnessMap instanceof THREE.Texture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\t\tif ( this.metalnessMap instanceof THREE.Texture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\t\n\t\t\tif ( this.emissiveMap instanceof THREE.Texture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\t\tif ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\n\t\t\tif ( this.envMap instanceof THREE.Texture ) {\n\t\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\t\n\t\t\tif ( this.blending !== THREE.NormalBlending ) data.blending = this.blending;\n\t\t\tif ( this.shading !== THREE.SmoothShading ) data.shading = this.shading;\n\t\t\tif ( this.side !== THREE.FrontSide ) data.side = this.side;\n\t\t\tif ( this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;\n\t\n\t\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\t\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\n\t\t\t// TODO: Copied from Object3D.toJSON\n\t\n\t\t\tfunction extractFromCache ( cache ) {\n\t\n\t\t\t\tvar values = [];\n\t\n\t\t\t\tfor ( var key in cache ) {\n\t\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn values;\n\t\n\t\t\t}\n\t\n\t\t\tif ( isRoot ) {\n\t\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\t\n\t\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\t\tif ( images.length > 0 ) data.images = images;\n\t\n\t\t\t}\n\t\n\t\t\treturn data;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tthis.name = source.name;\n\t\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.lights = source.lights;\n\t\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.shading = source.shading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\t\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\t\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\t\n\t\t\tthis.colorWrite = source.colorWrite;\n\t\n\t\t\tthis.precision = source.precision;\n\t\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\n\t\t\tthis.overdraw = source.overdraw;\n\t\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\t\n\t\t\tif ( srcPlanes !== null ) {\n\t\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\t\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\t\n\t\t\t}\n\t\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tupdate: function () {\n\t\n\t\t\tthis.dispatchEvent( { type: 'update' } );\n\t\n\t\t},\n\t\n\t\tdispose: function () {\n\t\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t\t}\n\t\n\t};\n\t\n\tObject.assign( THREE.Material.prototype, THREE.EventDispatcher.prototype );\n\t\n\tTHREE.MaterialIdCount = 0;\n\t\n\t// File:src/materials/LineBasicMaterial.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\t\n\tTHREE.LineBasicMaterial = function ( parameters ) {\n\t\n\t\tTHREE.Material.call( this );\n\t\n\t\tthis.type = 'LineBasicMaterial';\n\t\n\t\tthis.color = new THREE.Color( 0xffffff );\n\t\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\t\n\t\tthis.lights = false;\n\t\n\t\tthis.setValues( parameters );\n\t\n\t};\n\t\n\tTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\n\t\n\tTHREE.LineBasicMaterial.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\t\n\t\tthis.color.copy( source.color );\n\t\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/materials/LineDashedMaterial.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\t\n\tTHREE.LineDashedMaterial = function ( parameters ) {\n\t\n\t\tTHREE.Material.call( this );\n\t\n\t\tthis.type = 'LineDashedMaterial';\n\t\n\t\tthis.color = new THREE.Color( 0xffffff );\n\t\n\t\tthis.linewidth = 1;\n\t\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\t\n\t\tthis.lights = false;\n\t\n\t\tthis.setValues( parameters );\n\t\n\t};\n\t\n\tTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\n\t\n\tTHREE.LineDashedMaterial.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\t\n\t\tthis.color.copy( source.color );\n\t\n\t\tthis.linewidth = source.linewidth;\n\t\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/materials/MeshBasicMaterial.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  shading: THREE.SmoothShading,\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\t\n\tTHREE.MeshBasicMaterial = function ( parameters ) {\n\t\n\t\tTHREE.Material.call( this );\n\t\n\t\tthis.type = 'MeshBasicMaterial';\n\t\n\t\tthis.color = new THREE.Color( 0xffffff ); // emissive\n\t\n\t\tthis.map = null;\n\t\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\n\t\tthis.specularMap = null;\n\t\n\t\tthis.alphaMap = null;\n\t\n\t\tthis.envMap = null;\n\t\tthis.combine = THREE.MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\n\t\tthis.lights = false;\n\t\n\t\tthis.setValues( parameters );\n\t\n\t};\n\t\n\tTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\n\t\n\tTHREE.MeshBasicMaterial.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\t\n\t\tthis.color.copy( source.color );\n\t\n\t\tthis.map = source.map;\n\t\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t\tthis.specularMap = source.specularMap;\n\t\n\t\tthis.alphaMap = source.alphaMap;\n\t\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/materials/MeshDepthMaterial.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\t\n\tTHREE.MeshDepthMaterial = function ( parameters ) {\n\t\n\t\tTHREE.Material.call( this );\n\t\n\t\tthis.type = 'MeshDepthMaterial';\n\t\n\t\tthis.depthPacking = THREE.BasicDepthPacking;\n\t\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\n\t\tthis.map = null;\n\t\n\t\tthis.alphaMap = null;\n\t\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\t\n\t\tthis.setValues( parameters );\n\t\n\t};\n\t\n\tTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\n\t\n\tTHREE.MeshDepthMaterial.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\t\n\t\tthis.depthPacking = source.depthPacking;\n\t\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\n\t\tthis.map = source.map;\n\t\n\t\tthis.alphaMap = source.alphaMap;\n\t\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/materials/MeshLambertMaterial.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\t\n\tTHREE.MeshLambertMaterial = function ( parameters ) {\n\t\n\t\tTHREE.Material.call( this );\n\t\n\t\tthis.type = 'MeshLambertMaterial';\n\t\n\t\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\t\n\t\tthis.map = null;\n\t\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\n\t\tthis.emissive = new THREE.Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\n\t\tthis.specularMap = null;\n\t\n\t\tthis.alphaMap = null;\n\t\n\t\tthis.envMap = null;\n\t\tthis.combine = THREE.MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\n\t\tthis.setValues( parameters );\n\t\n\t};\n\t\n\tTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\n\t\n\tTHREE.MeshLambertMaterial.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\t\n\t\tthis.color.copy( source.color );\n\t\n\t\tthis.map = source.map;\n\t\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t\tthis.specularMap = source.specularMap;\n\t\n\t\tthis.alphaMap = source.alphaMap;\n\t\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/materials/MeshNormalMaterial.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\t\n\tTHREE.MeshNormalMaterial = function ( parameters ) {\n\t\n\t\tTHREE.Material.call( this, parameters );\n\t\n\t\tthis.type = 'MeshNormalMaterial';\n\t\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\t\tthis.morphTargets = false;\n\t\n\t\tthis.setValues( parameters );\n\t\n\t};\n\t\n\tTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\n\t\n\tTHREE.MeshNormalMaterial.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\t\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/materials/MeshPhongMaterial.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\t\n\tTHREE.MeshPhongMaterial = function ( parameters ) {\n\t\n\t\tTHREE.Material.call( this );\n\t\n\t\tthis.type = 'MeshPhongMaterial';\n\t\n\t\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\t\tthis.specular = new THREE.Color( 0x111111 );\n\t\tthis.shininess = 30;\n\t\n\t\tthis.map = null;\n\t\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\n\t\tthis.emissive = new THREE.Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new THREE.Vector2( 1, 1 );\n\t\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\n\t\tthis.specularMap = null;\n\t\n\t\tthis.alphaMap = null;\n\t\n\t\tthis.envMap = null;\n\t\tthis.combine = THREE.MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\t\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\n\t\tthis.setValues( parameters );\n\t\n\t};\n\t\n\tTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\n\t\n\tTHREE.MeshPhongMaterial.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\t\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\t\n\t\tthis.map = source.map;\n\t\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\t\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\n\t\tthis.specularMap = source.specularMap;\n\t\n\t\tthis.alphaMap = source.alphaMap;\n\t\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/materials/MeshStandardMaterial.js\n\t\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\t\n\tTHREE.MeshStandardMaterial = function ( parameters ) {\n\t\n\t\tTHREE.Material.call( this );\n\t\n\t\tthis.defines = { 'STANDARD': '' };\n\t\n\t\tthis.type = 'MeshStandardMaterial';\n\t\n\t\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 0.5;\n\t\tthis.metalness = 0.5;\n\t\n\t\tthis.map = null;\n\t\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\n\t\tthis.emissive = new THREE.Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\n\t\tthis.normalMap = null;\n\t\tthis.normalScale = new THREE.Vector2( 1, 1 );\n\t\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\n\t\tthis.roughnessMap = null;\n\t\n\t\tthis.metalnessMap = null;\n\t\n\t\tthis.alphaMap = null;\n\t\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\t\n\t\tthis.refractionRatio = 0.98;\n\t\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\n\t\tthis.setValues( parameters );\n\t\n\t};\n\t\n\tTHREE.MeshStandardMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;\n\t\n\tTHREE.MeshStandardMaterial.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\t\n\t\tthis.defines = { 'STANDARD': '' };\n\t\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\t\n\t\tthis.map = source.map;\n\t\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalScale.copy( source.normalScale );\n\t\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\n\t\tthis.roughnessMap = source.roughnessMap;\n\t\n\t\tthis.metalnessMap = source.metalnessMap;\n\t\n\t\tthis.alphaMap = source.alphaMap;\n\t\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/materials/MeshPhysicalMaterial.js\n\t\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  reflectivity: <float>\n\t * }\n\t */\n\t\n\tTHREE.MeshPhysicalMaterial = function ( parameters ) {\n\t\n\t\tTHREE.MeshStandardMaterial.call( this );\n\t\n\t\tthis.defines = { 'PHYSICAL': '' };\n\t\n\t\tthis.type = 'MeshPhysicalMaterial';\n\t\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\t\n\t\tthis.clearCoat = 0.0;\n\t\tthis.clearCoatRoughness = 0.0;\n\t\n\t\tthis.setValues( parameters );\n\t\n\t};\n\t\n\tTHREE.MeshPhysicalMaterial.prototype = Object.create( THREE.MeshStandardMaterial.prototype );\n\tTHREE.MeshPhysicalMaterial.prototype.constructor = THREE.MeshPhysicalMaterial;\n\t\n\tTHREE.MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.MeshStandardMaterial.prototype.copy.call( this, source );\n\t\n\t\tthis.defines = { 'PHYSICAL': '' };\n\t\n\t\tthis.reflectivity = source.reflectivity;\n\t\n\t\tthis.clearCoat = source.clearCoat;\n\t\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/materials/MultiMaterial.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.MultiMaterial = function ( materials ) {\n\t\n\t\tthis.uuid = THREE.Math.generateUUID();\n\t\n\t\tthis.type = 'MultiMaterial';\n\t\n\t\tthis.materials = materials instanceof Array ? materials : [];\n\t\n\t\tthis.visible = true;\n\t\n\t};\n\t\n\tTHREE.MultiMaterial.prototype = {\n\t\n\t\tconstructor: THREE.MultiMaterial,\n\t\n\t\ttoJSON: function ( meta ) {\n\t\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.2,\n\t\t\t\t\ttype: 'material',\n\t\t\t\t\tgenerator: 'MaterialExporter'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\ttype: this.type,\n\t\t\t\tmaterials: []\n\t\t\t};\n\t\n\t\t\tvar materials = this.materials;\n\t\n\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar material = materials[ i ].toJSON( meta );\n\t\t\t\tdelete material.metadata;\n\t\n\t\t\t\toutput.materials.push( material );\n\t\n\t\t\t}\n\t\n\t\t\toutput.visible = this.visible;\n\t\n\t\t\treturn output;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\tvar material = new this.constructor();\n\t\n\t\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\t\n\t\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\t\n\t\t\t}\n\t\n\t\t\tmaterial.visible = this.visible;\n\t\n\t\t\treturn material;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/materials/PointsMaterial.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\t\n\tTHREE.PointsMaterial = function ( parameters ) {\n\t\n\t\tTHREE.Material.call( this );\n\t\n\t\tthis.type = 'PointsMaterial';\n\t\n\t\tthis.color = new THREE.Color( 0xffffff );\n\t\n\t\tthis.map = null;\n\t\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\t\n\t\tthis.lights = false;\n\t\n\t\tthis.setValues( parameters );\n\t\n\t};\n\t\n\tTHREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\n\t\n\tTHREE.PointsMaterial.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\t\n\t\tthis.color.copy( source.color );\n\t\n\t\tthis.map = source.map;\n\t\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/materials/ShaderMaterial.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\t\n\tTHREE.ShaderMaterial = function ( parameters ) {\n\t\n\t\tTHREE.Material.call( this );\n\t\n\t\tthis.type = 'ShaderMaterial';\n\t\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\n\t\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\t\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\t\n\t\tthis.linewidth = 1;\n\t\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\t\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\t\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\t\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\t\n\t\tthis.index0AttributeName = undefined;\n\t\n\t\tif ( parameters !== undefined ) {\n\t\n\t\t\tif ( parameters.attributes !== undefined ) {\n\t\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\t\n\t\t\t}\n\t\n\t\t\tthis.setValues( parameters );\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\n\t\n\tTHREE.ShaderMaterial.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\t\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\t\n\t\tthis.uniforms = THREE.UniformsUtils.clone( source.uniforms );\n\t\n\t\tthis.defines = source.defines;\n\t\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\t\n\t\tthis.skinning = source.skinning;\n\t\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\n\t\tthis.extensions = source.extensions;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\tTHREE.ShaderMaterial.prototype.toJSON = function ( meta ) {\n\t\n\t\tvar data = THREE.Material.prototype.toJSON.call( this, meta );\n\t\n\t\tdata.uniforms = this.uniforms;\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\t\n\t\treturn data;\n\t\n\t};\n\t\n\t// File:src/materials/RawShaderMaterial.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.RawShaderMaterial = function ( parameters ) {\n\t\n\t\tTHREE.ShaderMaterial.call( this, parameters );\n\t\n\t\tthis.type = 'RawShaderMaterial';\n\t\n\t};\n\t\n\tTHREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\n\tTHREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;\n\t\n\t// File:src/materials/SpriteMaterial.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *\tuvOffset: new THREE.Vector2(),\n\t *\tuvScale: new THREE.Vector2()\n\t * }\n\t */\n\t\n\tTHREE.SpriteMaterial = function ( parameters ) {\n\t\n\t\tTHREE.Material.call( this );\n\t\n\t\tthis.type = 'SpriteMaterial';\n\t\n\t\tthis.color = new THREE.Color( 0xffffff );\n\t\tthis.map = null;\n\t\n\t\tthis.rotation = 0;\n\t\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\t\n\t\tthis.setValues( parameters );\n\t\n\t};\n\t\n\tTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\n\tTHREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\n\t\n\tTHREE.SpriteMaterial.prototype.copy = function ( source ) {\n\t\n\t\tTHREE.Material.prototype.copy.call( this, source );\n\t\n\t\tthis.color.copy( source.color );\n\t\tthis.map = source.map;\n\t\n\t\tthis.rotation = source.rotation;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/materials/ShadowMaterial.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.ShadowMaterial = function () {\n\t\n\t\tTHREE.ShaderMaterial.call( this, {\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\t\t\tTHREE.UniformsLib[ \"lights\" ],\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\t\t\tvertexShader: THREE.ShaderChunk[ 'shadow_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'shadow_frag' ]\n\t\t} );\n\t\n\t\tthis.lights = true;\n\t\tthis.transparent = true;\n\t\n\t\tObject.defineProperties( this, {\n\t\t\topacity: {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function () {\n\t\t\t\t\treturn this.uniforms.opacity.value;\n\t\t\t\t},\n\t\t\t\tset: function ( value ) {\n\t\t\t\t\tthis.uniforms.opacity.value = value;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t};\n\t\n\tTHREE.ShadowMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\n\tTHREE.ShadowMaterial.prototype.constructor = THREE.ShadowMaterial;\n\t\n\t// File:src/textures/Texture.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\t\n\tTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\t\n\t\tObject.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );\n\t\n\t\tthis.uuid = THREE.Math.generateUUID();\n\t\n\t\tthis.name = '';\n\t\tthis.sourceFile = '';\n\t\n\t\tthis.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\t\n\t\tthis.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\n\t\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\n\t\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\n\t\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\t\n\t\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\n\t\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\n\t\n\t\tthis.offset = new THREE.Vector2( 0, 0 );\n\t\tthis.repeat = new THREE.Vector2( 1, 1 );\n\t\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\n\t\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding :  THREE.LinearEncoding;\n\t\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\t\n\t};\n\t\n\tTHREE.Texture.DEFAULT_IMAGE = undefined;\n\tTHREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\n\t\n\tTHREE.Texture.prototype = {\n\t\n\t\tconstructor: THREE.Texture,\n\t\n\t\tset needsUpdate( value ) {\n\t\n\t\t\tif ( value === true ) this.version ++;\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\t\n\t\t\tthis.mapping = source.mapping;\n\t\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\t\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\t\n\t\t\tthis.anisotropy = source.anisotropy;\n\t\n\t\t\tthis.format = source.format;\n\t\t\tthis.type = source.type;\n\t\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\t\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\ttoJSON: function ( meta ) {\n\t\n\t\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\t\n\t\t\t\treturn meta.textures[ this.uuid ];\n\t\n\t\t\t}\n\t\n\t\t\tfunction getDataURL( image ) {\n\t\n\t\t\t\tvar canvas;\n\t\n\t\t\t\tif ( image.toDataURL !== undefined ) {\n\t\n\t\t\t\t\tcanvas = image;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\t\tcanvas.width = image.width;\n\t\t\t\t\tcanvas.height = image.height;\n\t\n\t\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\t\n\t\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.4,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\t\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\t\n\t\t\t\tmapping: this.mapping,\n\t\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\t\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\t\n\t\t\t\tflipY: this.flipY\n\t\t\t};\n\t\n\t\t\tif ( this.image !== undefined ) {\n\t\n\t\t\t\t// TODO: Move to THREE.Image\n\t\n\t\t\t\tvar image = this.image;\n\t\n\t\t\t\tif ( image.uuid === undefined ) {\n\t\n\t\t\t\t\timage.uuid = THREE.Math.generateUUID(); // UGH\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\t\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t\t};\n\t\n\t\t\t\t}\n\t\n\t\t\t\toutput.image = image.uuid;\n\t\n\t\t\t}\n\t\n\t\t\tmeta.textures[ this.uuid ] = output;\n\t\n\t\t\treturn output;\n\t\n\t\t},\n\t\n\t\tdispose: function () {\n\t\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t\t},\n\t\n\t\ttransformUv: function ( uv ) {\n\t\n\t\t\tif ( this.mapping !== THREE.UVMapping )  return;\n\t\n\t\t\tuv.multiply( this.repeat );\n\t\t\tuv.add( this.offset );\n\t\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\t\n\t\t\t\tswitch ( this.wrapS ) {\n\t\n\t\t\t\t\tcase THREE.RepeatWrapping:\n\t\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase THREE.ClampToEdgeWrapping:\n\t\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase THREE.MirroredRepeatWrapping:\n\t\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\t\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\t\n\t\t\t\tswitch ( this.wrapT ) {\n\t\n\t\t\t\t\tcase THREE.RepeatWrapping:\n\t\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase THREE.ClampToEdgeWrapping:\n\t\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase THREE.MirroredRepeatWrapping:\n\t\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\t\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.flipY ) {\n\t\n\t\t\t\tuv.y = 1 - uv.y;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\tObject.assign( THREE.Texture.prototype, THREE.EventDispatcher.prototype );\n\t\n\tTHREE.TextureIdCount = 0;\n\t\n\t// File:src/textures/DepthTexture.js\n\t\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t */\n\t\n\tTHREE.DepthTexture = function ( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\n\t\n\t  THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, THREE.DepthFormat, type, anisotropy );\n\t\n\t  this.image = { width: width, height: height };\n\t\n\t  this.type = type !== undefined ? type : THREE.UnsignedShortType;\n\t\n\t  this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n\t  this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n\t\n\t  this.flipY = false;\n\t  this.generateMipmaps  = false;\n\t\n\t};\n\t\n\tTHREE.DepthTexture.prototype = Object.create( THREE.Texture.prototype );\n\tTHREE.DepthTexture.prototype.constructor = THREE.DepthTexture;\n\t\n\t// File:src/textures/CanvasTexture.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\t\n\t\tTHREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t\tthis.needsUpdate = true;\n\t\n\t};\n\t\n\tTHREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );\n\tTHREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;\n\t\n\t// File:src/textures/CubeTexture.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\t\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\n\t\n\t\tTHREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t\tthis.flipY = false;\n\t\n\t};\n\t\n\tTHREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );\n\tTHREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\n\t\n\tObject.defineProperty( THREE.CubeTexture.prototype, 'images', {\n\t\n\t\tget: function () {\n\t\n\t\t\treturn this.image;\n\t\n\t\t},\n\t\n\t\tset: function ( value ) {\n\t\n\t\t\tthis.image = value;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/textures/CompressedTexture.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\t\n\t\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\t\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\t\n\t\tthis.flipY = false;\n\t\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\t\n\t\tthis.generateMipmaps = false;\n\t\n\t};\n\t\n\tTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\n\tTHREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;\n\t\n\t// File:src/textures/DataTexture.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\t\n\t\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\t\n\t\tthis.image = { data: data, width: width, height: height };\n\t\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n\t\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps  = false;\n\t\n\t};\n\t\n\tTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\n\tTHREE.DataTexture.prototype.constructor = THREE.DataTexture;\n\t\n\t// File:src/textures/VideoTexture.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\t\n\t\tTHREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\t\n\t\tthis.generateMipmaps = false;\n\t\n\t\tvar scope = this;\n\t\n\t\tfunction update() {\n\t\n\t\t\trequestAnimationFrame( update );\n\t\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\t\n\t\t\t\tscope.needsUpdate = true;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tupdate();\n\t\n\t};\n\t\n\tTHREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );\n\tTHREE.VideoTexture.prototype.constructor = THREE.VideoTexture;\n\t\n\t// File:src/objects/Group.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.Group = function () {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'Group';\n\t\n\t};\n\t\n\tTHREE.Group.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\t\n\t\tconstructor: THREE.Group\n\t\n\t} );\n\t\n\t// File:src/objects/Points.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.Points = function ( geometry, material ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'Points';\n\t\n\t\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t};\n\t\n\tTHREE.Points.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\t\n\t\tconstructor: THREE.Points,\n\t\n\t\traycast: ( function () {\n\t\n\t\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\t\tvar ray = new THREE.Ray();\n\t\t\tvar sphere = new THREE.Sphere();\n\t\n\t\t\treturn function raycast( raycaster, intersects ) {\n\t\n\t\t\t\tvar object = this;\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\t\tvar threshold = raycaster.params.Points.threshold;\n\t\n\t\t\t\t// Checking boundingSphere distance to ray\n\t\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t\t\t\t//\n\t\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\t\tvar position = new THREE.Vector3();\n\t\n\t\t\t\tfunction testPoint( point, index ) {\n\t\n\t\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\t\n\t\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\t\n\t\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\t\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\t\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\t\n\t\t\t\t\t\tintersects.push( {\n\t\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tobject: object\n\t\n\t\t\t\t\t\t} );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\tif ( index !== null ) {\n\t\n\t\t\t\t\t\tvar indices = index.array;\n\t\n\t\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\t\n\t\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\t\n\t\t\t\t\t\t\ttestPoint( position, a );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\t\n\t\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\t\n\t\t\t\t\t\t\ttestPoint( position, i );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\n\t\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\ttestPoint( vertices[ i ], i );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}() ),\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/objects/Line.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.Line = function ( geometry, material, mode ) {\n\t\n\t\tif ( mode === 1 ) {\n\t\n\t\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\t\treturn new THREE.LineSegments( geometry, material );\n\t\n\t\t}\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'Line';\n\t\n\t\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t};\n\t\n\tTHREE.Line.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\t\n\t\tconstructor: THREE.Line,\n\t\n\t\traycast: ( function () {\n\t\n\t\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\t\tvar ray = new THREE.Ray();\n\t\t\tvar sphere = new THREE.Sphere();\n\t\n\t\t\treturn function raycast( raycaster, intersects ) {\n\t\n\t\t\t\tvar precision = raycaster.linePrecision;\n\t\t\t\tvar precisionSq = precision * precision;\n\t\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\t\n\t\t\t\t// Checking boundingSphere distance to ray\n\t\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t\t\t\t//\n\t\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t\t\t\tvar vStart = new THREE.Vector3();\n\t\t\t\tvar vEnd = new THREE.Vector3();\n\t\t\t\tvar interSegment = new THREE.Vector3();\n\t\t\t\tvar interRay = new THREE.Vector3();\n\t\t\t\tvar step = this instanceof THREE.LineSegments ? 2 : 1;\n\t\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\tif ( index !== null ) {\n\t\n\t\t\t\t\t\tvar indices = index.array;\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\t\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\t\n\t\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\t\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\t\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t\t\t\t\t\t\tintersects.push( {\n\t\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\t\n\t\t\t\t\t\t\t} );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\t\n\t\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\t\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\t\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t\t\t\t\t\t\tintersects.push( {\n\t\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\t\n\t\t\t\t\t\t\t} );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar nbVertices = vertices.length;\n\t\n\t\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\t\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\t\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\t\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\t\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\t\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\t\n\t\t\t\t\t\tintersects.push( {\n\t\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\n\t\t\t\t\t\t} );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}() ),\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/objects/LineSegments.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.LineSegments = function ( geometry, material ) {\n\t\n\t\tTHREE.Line.call( this, geometry, material );\n\t\n\t\tthis.type = 'LineSegments';\n\t\n\t};\n\t\n\tTHREE.LineSegments.prototype = Object.assign( Object.create( THREE.Line.prototype ), {\n\t\n\t\tconstructor: THREE.LineSegments\n\t\n\t} );\n\t\n\t// File:src/objects/Mesh.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\t\n\tTHREE.Mesh = function ( geometry, material ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'Mesh';\n\t\n\t\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\t\n\t\tthis.drawMode = THREE.TrianglesDrawMode;\n\t\n\t\tthis.updateMorphTargets();\n\t\n\t};\n\t\n\tTHREE.Mesh.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\t\n\t\tconstructor: THREE.Mesh,\n\t\n\t\tsetDrawMode: function ( value ) {\n\t\n\t\t\tthis.drawMode = value;\n\t\n\t\t},\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\t\n\t\t\tthis.drawMode = source.drawMode;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tupdateMorphTargets: function () {\n\t\n\t\t\tif ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {\n\t\n\t\t\t\tthis.morphTargetBase = - 1;\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\t\n\t\t\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\n\t\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tgetMorphTargetIndexByName: function ( name ) {\n\t\n\t\t\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\n\t\n\t\t\t\treturn this.morphTargetDictionary[ name ];\n\t\n\t\t\t}\n\t\n\t\t\tconsole.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );\n\t\n\t\t\treturn 0;\n\t\n\t\t},\n\t\n\t\traycast: ( function () {\n\t\n\t\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\t\tvar ray = new THREE.Ray();\n\t\t\tvar sphere = new THREE.Sphere();\n\t\n\t\t\tvar vA = new THREE.Vector3();\n\t\t\tvar vB = new THREE.Vector3();\n\t\t\tvar vC = new THREE.Vector3();\n\t\n\t\t\tvar tempA = new THREE.Vector3();\n\t\t\tvar tempB = new THREE.Vector3();\n\t\t\tvar tempC = new THREE.Vector3();\n\t\n\t\t\tvar uvA = new THREE.Vector2();\n\t\t\tvar uvB = new THREE.Vector2();\n\t\t\tvar uvC = new THREE.Vector2();\n\t\n\t\t\tvar barycoord = new THREE.Vector3();\n\t\n\t\t\tvar intersectionPoint = new THREE.Vector3();\n\t\t\tvar intersectionPointWorld = new THREE.Vector3();\n\t\n\t\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\t\n\t\t\t\tTHREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\t\n\t\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\t\tuv3.multiplyScalar( barycoord.z );\n\t\n\t\t\t\tuv1.add( uv2 ).add( uv3 );\n\t\n\t\t\t\treturn uv1.clone();\n\t\n\t\t\t}\n\t\n\t\t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\t\n\t\t\t\tvar intersect;\n\t\t\t\tvar material = object.material;\n\t\n\t\t\t\tif ( material.side === THREE.BackSide ) {\n\t\n\t\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( intersect === null ) return null;\n\t\n\t\t\t\tintersectionPointWorld.copy( point );\n\t\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\t\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\t\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\t\n\t\t\t\treturn {\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\t\tobject: object\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\t\n\t\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\t\tvC.fromArray( positions, c * 3 );\n\t\n\t\t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\t\n\t\t\t\tif ( intersection ) {\n\t\n\t\t\t\t\tif ( uvs ) {\n\t\n\t\t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\t\n\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tintersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );\n\t\t\t\t\tintersection.faceIndex = a;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn intersection;\n\t\n\t\t\t}\n\t\n\t\t\treturn function raycast( raycaster, intersects ) {\n\t\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar material = this.material;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\t\n\t\t\t\tif ( material === undefined ) return;\n\t\n\t\t\t\t// Checking boundingSphere distance to ray\n\t\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\t\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\t\n\t\t\t\t//\n\t\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\t\n\t\t\t\t// Check boundingBox before continuing\n\t\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\t\n\t\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar uvs, intersection;\n\t\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\t\tvar a, b, c;\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\t\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\t\n\t\t\t\t\t\tuvs = attributes.uv.array;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( index !== null ) {\n\t\n\t\t\t\t\t\tvar indices = index.array;\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\t\t\ta = indices[ i ];\n\t\t\t\t\t\t\tb = indices[ i + 1 ];\n\t\t\t\t\t\t\tc = indices[ i + 2 ];\n\t\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\t\n\t\t\t\t\t\t\tif ( intersection ) {\n\t\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\t\n\t\t\t\t\t\t\ta = i / 3;\n\t\t\t\t\t\t\tb = a + 1;\n\t\t\t\t\t\t\tc = a + 2;\n\t\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\t\n\t\t\t\t\t\t\tif ( intersection ) {\n\t\n\t\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\t\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\t\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\t\n\t\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\t\n\t\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\t\n\t\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\t\tfvC = vertices[ face.c ];\n\t\n\t\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\t\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\t\n\t\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\t\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\t\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\t\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\t\n\t\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\t\n\t\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\t\tvC.add( fvC );\n\t\n\t\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\t\tfvC = vC;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\t\n\t\t\t\t\t\tif ( intersection ) {\n\t\n\t\t\t\t\t\t\tif ( uvs ) {\n\t\n\t\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\t\n\t\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}() ),\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/objects/Bone.js\n\t\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\t\n\tTHREE.Bone = function ( skin ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'Bone';\n\t\n\t\tthis.skin = skin;\n\t\n\t};\n\t\n\tTHREE.Bone.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\t\n\t\tconstructor: THREE.Bone,\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\t\n\t\t\tthis.skin = source.skin;\n\t\n\t\t\treturn this;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/objects/Skeleton.js\n\t\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\t\n\tTHREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {\n\t\n\t\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\t\n\t\tthis.identityMatrix = new THREE.Matrix4();\n\t\n\t\t// copy the bone array\n\t\n\t\tbones = bones || [];\n\t\n\t\tthis.bones = bones.slice( 0 );\n\t\n\t\t// create a bone texture or an array of floats\n\t\n\t\tif ( this.useVertexTexture ) {\n\t\n\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\n\t\n\t\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\tsize = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );\n\t\t\tsize = Math.max( size, 4 );\n\t\n\t\t\tthis.boneTextureWidth = size;\n\t\t\tthis.boneTextureHeight = size;\n\t\n\t\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n\t\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\n\t\n\t\t} else {\n\t\n\t\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\t\n\t\t}\n\t\n\t\t// use the supplied bone inverses or calculate the inverses\n\t\n\t\tif ( boneInverses === undefined ) {\n\t\n\t\t\tthis.calculateInverses();\n\t\n\t\t} else {\n\t\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\t\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\t\n\t\t\t\tthis.boneInverses = [];\n\t\n\t\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t\t\t\t\tthis.boneInverses.push( new THREE.Matrix4() );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\tObject.assign( THREE.Skeleton.prototype, {\n\t\n\t\tcalculateInverses: function () {\n\t\n\t\t\tthis.boneInverses = [];\n\t\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t\t\t\tvar inverse = new THREE.Matrix4();\n\t\n\t\t\t\tif ( this.bones[ b ] ) {\n\t\n\t\t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.boneInverses.push( inverse );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tpose: function () {\n\t\n\t\t\tvar bone;\n\t\n\t\t\t// recover the bind-time world matrices\n\t\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t\t\t\tbone = this.bones[ b ];\n\t\n\t\t\t\tif ( bone ) {\n\t\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// compute the local matrices, positions, rotations and scales\n\t\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t\t\t\tbone = this.bones[ b ];\n\t\n\t\t\t\tif ( bone ) {\n\t\n\t\t\t\t\tif ( bone.parent instanceof THREE.Bone ) {\n\t\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tupdate: ( function () {\n\t\n\t\t\tvar offsetMatrix = new THREE.Matrix4();\n\t\n\t\t\treturn function update() {\n\t\n\t\t\t\t// flatten bone matrices to array\n\t\n\t\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\t\n\t\t\t\t\t// compute the offset between the current and the original transform\n\t\n\t\t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\t\n\t\t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n\t\t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.useVertexTexture ) {\n\t\n\t\t\t\t\tthis.boneTexture.needsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t} )(),\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/objects/SkinnedMesh.js\n\t\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\t\n\tTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\n\t\n\t\tTHREE.Mesh.call( this, geometry, material );\n\t\n\t\tthis.type = 'SkinnedMesh';\n\t\n\t\tthis.bindMode = \"attached\";\n\t\tthis.bindMatrix = new THREE.Matrix4();\n\t\tthis.bindMatrixInverse = new THREE.Matrix4();\n\t\n\t\t// init bones\n\t\n\t\t// TODO: remove bone creation as there is no reason (other than\n\t\t// convenience) for THREE.SkinnedMesh to do this.\n\t\n\t\tvar bones = [];\n\t\n\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\t\n\t\t\tvar bone, gbone;\n\t\n\t\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\t\n\t\t\t\tgbone = this.geometry.bones[ b ];\n\t\n\t\t\t\tbone = new THREE.Bone( this );\n\t\t\t\tbones.push( bone );\n\t\n\t\t\t\tbone.name = gbone.name;\n\t\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\t\n\t\t\t\tgbone = this.geometry.bones[ b ];\n\t\n\t\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n\t\t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\t\n\t\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthis.add( bones[ b ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tthis.normalizeSkinWeights();\n\t\n\t\tthis.updateMatrixWorld( true );\n\t\tthis.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\t\n\t};\n\t\n\t\n\tTHREE.SkinnedMesh.prototype = Object.assign( Object.create( THREE.Mesh.prototype ), {\n\t\n\t\tconstructor: THREE.SkinnedMesh,\n\t\n\t\tbind: function( skeleton, bindMatrix ) {\n\t\n\t\t\tthis.skeleton = skeleton;\n\t\n\t\t\tif ( bindMatrix === undefined ) {\n\t\n\t\t\t\tthis.updateMatrixWorld( true );\n\t\n\t\t\t\tthis.skeleton.calculateInverses();\n\t\n\t\t\t\tbindMatrix = this.matrixWorld;\n\t\n\t\t\t}\n\t\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\t\n\t\t},\n\t\n\t\tpose: function () {\n\t\n\t\t\tthis.skeleton.pose();\n\t\n\t\t},\n\t\n\t\tnormalizeSkinWeights: function () {\n\t\n\t\t\tif ( this.geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\t\n\t\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\t\n\t\t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\t\n\t\t\t\t\tif ( scale !== Infinity ) {\n\t\n\t\t\t\t\t\tsw.multiplyScalar( scale );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( this.geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\tvar vec = new THREE.Vector4();\n\t\n\t\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\t\n\t\t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\t\n\t\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\t\tvec.w = skinWeight.getW( i );\n\t\n\t\t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\t\n\t\t\t\t\tif ( scale !== Infinity ) {\n\t\n\t\t\t\t\t\tvec.multiplyScalar( scale );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tupdateMatrixWorld: function( force ) {\n\t\n\t\t\tTHREE.Mesh.prototype.updateMatrixWorld.call( this, true );\n\t\n\t\t\tif ( this.bindMode === \"attached\" ) {\n\t\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\t\n\t\t\t} else if ( this.bindMode === \"detached\" ) {\n\t\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tclone: function() {\n\t\n\t\t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/objects/LOD.js\n\t\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.LOD = function () {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'LOD';\n\t\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\t\n\t};\n\t\n\t\n\tTHREE.LOD.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\t\n\t\tconstructor: THREE.LOD,\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tTHREE.Object3D.prototype.copy.call( this, source, false );\n\t\n\t\t\tvar levels = source.levels;\n\t\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar level = levels[ i ];\n\t\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\taddLevel: function ( object, distance ) {\n\t\n\t\t\tif ( distance === undefined ) distance = 0;\n\t\n\t\t\tdistance = Math.abs( distance );\n\t\n\t\t\tvar levels = this.levels;\n\t\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\t\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\t\n\t\t\tthis.add( object );\n\t\n\t\t},\n\t\n\t\tgetObjectForDistance: function ( distance ) {\n\t\n\t\t\tvar levels = this.levels;\n\t\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\t\n\t\t\t\tif ( distance < levels[ i ].distance ) {\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn levels[ i - 1 ].object;\n\t\n\t\t},\n\t\n\t\traycast: ( function () {\n\t\n\t\t\tvar matrixPosition = new THREE.Vector3();\n\t\n\t\t\treturn function raycast( raycaster, intersects ) {\n\t\n\t\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\t\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\t\n\t\t\t};\n\t\n\t\t}() ),\n\t\n\t\tupdate: function () {\n\t\n\t\t\tvar v1 = new THREE.Vector3();\n\t\t\tvar v2 = new THREE.Vector3();\n\t\n\t\t\treturn function update( camera ) {\n\t\n\t\t\t\tvar levels = this.levels;\n\t\n\t\t\t\tif ( levels.length > 1 ) {\n\t\n\t\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\t\n\t\t\t\t\tvar distance = v1.distanceTo( v2 );\n\t\n\t\t\t\t\tlevels[ 0 ].object.visible = true;\n\t\n\t\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\t\n\t\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( ; i < l; i ++ ) {\n\t\n\t\t\t\t\t\tlevels[ i ].object.visible = false;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}(),\n\t\n\t\ttoJSON: function ( meta ) {\n\t\n\t\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\t\n\t\t\tdata.object.levels = [];\n\t\n\t\t\tvar levels = this.levels;\n\t\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar level = levels[ i ];\n\t\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\t\n\t\t\t}\n\t\n\t\t\treturn data;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/objects/Sprite.js\n\t\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.Sprite = function ( material ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'Sprite';\n\t\n\t\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\n\t\n\t};\n\t\n\tTHREE.Sprite.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\t\n\t\tconstructor: THREE.Sprite,\n\t\n\t\traycast: ( function () {\n\t\n\t\t\tvar matrixPosition = new THREE.Vector3();\n\t\n\t\t\treturn function raycast( raycaster, intersects ) {\n\t\n\t\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\t\n\t\t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n\t\t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\t\n\t\t\t\tif ( distanceSq > guessSizeSq ) {\n\t\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tintersects.push( {\n\t\n\t\t\t\t\tdistance: Math.sqrt( distanceSq ),\n\t\t\t\t\tpoint: this.position,\n\t\t\t\t\tface: null,\n\t\t\t\t\tobject: this\n\t\n\t\t\t\t} );\n\t\n\t\t\t};\n\t\n\t\t}() ),\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/objects/LensFlare.js\n\t\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.lensFlares = [];\n\t\n\t\tthis.positionScreen = new THREE.Vector3();\n\t\tthis.customUpdateCallback = undefined;\n\t\n\t\tif ( texture !== undefined ) {\n\t\n\t\t\tthis.add( texture, size, distance, blending, color );\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.LensFlare.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\t\n\t\tconstructor: THREE.LensFlare,\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\t\n\t\t\tthis.positionScreen.copy( source.positionScreen );\n\t\t\tthis.customUpdateCallback = source.customUpdateCallback;\n\t\n\t\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\t\n\t\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tadd: function ( texture, size, distance, blending, color, opacity ) {\n\t\n\t\t\tif ( size === undefined ) size = - 1;\n\t\t\tif ( distance === undefined ) distance = 0;\n\t\t\tif ( opacity === undefined ) opacity = 1;\n\t\t\tif ( color === undefined ) color = new THREE.Color( 0xffffff );\n\t\t\tif ( blending === undefined ) blending = THREE.NormalBlending;\n\t\n\t\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\t\n\t\t\tthis.lensFlares.push( {\n\t\t\t\ttexture: texture,\t// THREE.Texture\n\t\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t\t\t\tscale: 1, \t\t// scale\n\t\t\t\trotation: 0, \t\t// rotation\n\t\t\t\topacity: opacity,\t// opacity\n\t\t\t\tcolor: color,\t\t// color\n\t\t\t\tblending: blending\t// blending\n\t\t\t} );\n\t\n\t\t},\n\t\n\t\t/*\n\t\t * Update lens flares update positions on all flares based on the screen position\n\t\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t\t */\n\t\n\t\tupdateLensFlares: function () {\n\t\n\t\t\tvar f, fl = this.lensFlares.length;\n\t\t\tvar flare;\n\t\t\tvar vecX = - this.positionScreen.x * 2;\n\t\t\tvar vecY = - this.positionScreen.y * 2;\n\t\n\t\t\tfor ( f = 0; f < fl; f ++ ) {\n\t\n\t\t\t\tflare = this.lensFlares[ f ];\n\t\n\t\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\t\n\t\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/scenes/Scene.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.Scene = function () {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.type = 'Scene';\n\t\n\t\tthis.background = null;\n\t\tthis.fog = null;\n\t\tthis.overrideMaterial = null;\n\t\n\t\tthis.autoUpdate = true; // checked by the renderer\n\t\n\t};\n\t\n\tTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.Scene.prototype.constructor = THREE.Scene;\n\t\n\tTHREE.Scene.prototype.copy = function ( source, recursive ) {\n\t\n\t\tTHREE.Object3D.prototype.copy.call( this, source, recursive );\n\t\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\t\n\t\tthis.autoUpdate = source.autoUpdate;\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t// File:src/scenes/Fog.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.Fog = function ( color, near, far ) {\n\t\n\t\tthis.name = '';\n\t\n\t\tthis.color = new THREE.Color( color );\n\t\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\t\n\t};\n\t\n\tTHREE.Fog.prototype.clone = function () {\n\t\n\t\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\n\t\n\t};\n\t\n\t// File:src/scenes/FogExp2.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.FogExp2 = function ( color, density ) {\n\t\n\t\tthis.name = '';\n\t\n\t\tthis.color = new THREE.Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\t\n\t};\n\t\n\tTHREE.FogExp2.prototype.clone = function () {\n\t\n\t\treturn new THREE.FogExp2( this.color.getHex(), this.density );\n\t\n\t};\n\t\n\t// File:src/renderers/shaders/ShaderChunk.js\n\t\n\tTHREE.ShaderChunk = {};\n\t\n\t// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'alphamap_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'alphamap_pars_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'alphatest_fragment' ] = \"#ifdef ALPHATEST\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'aomap_fragment' ] = \"#ifdef USE_AOMAP\\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\t#endif\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'aomap_pars_fragment' ] = \"#ifdef USE_AOMAP\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'begin_vertex' ] = \"\\nvec3 transformed = vec3( position );\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'beginnormal_vertex' ] = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/bsdfs.glsl\n\t\n\tTHREE.ShaderChunk[ 'bsdfs' ] = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\t\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\t\t}\\n\t\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat alpha = pow2( roughness );\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\tfloat D = D_GGX( alpha, dotNH );\\n\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\tvec4 r = roughness * c0 + c1;\\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_BlinnPhong_Implicit( );\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'bumpmap_pars_fragment' ] = \"#ifdef USE_BUMPMAP\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\tvec2 dHdxy_fwd() {\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\t\treturn vec2( dBx, dBy );\\n\t}\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\t}\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'clipping_planes_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\t\tvec4 plane = clippingPlanes[ i ];\\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\t}\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'clipping_planes_pars_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\t\tvarying vec3 vViewPosition;\\n\t#endif\\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'clipping_planes_pars_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'clipping_planes_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'color_fragment' ] = \"#ifdef USE_COLOR\\n\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'color_pars_fragment' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'color_pars_vertex' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'color_vertex' ] = \"#ifdef USE_COLOR\\n\tvColor.xyz = color.xyz;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/common.glsl\n\t\n\tTHREE.ShaderChunk[ 'common' ] = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\tvec3 color;\\n\tvec3 direction;\\n\tbool visible;\\n};\\nstruct ReflectedLight {\\n\tvec3 directDiffuse;\\n\tvec3 directSpecular;\\n\tvec3 indirectDiffuse;\\n\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\tvec3 position;\\n\tvec3 normal;\\n\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'cube_uv_reflection_fragment' ] = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\tvec3 absDirection = abs(direction);\\n\tint face = -1;\\n\tif( absDirection.x > absDirection.z ) {\\n\t\tif(absDirection.x > absDirection.y )\\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\telse {\\n\t\tif(absDirection.z > absDirection.y )\\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\tfloat dxRoughness = dFdx(roughness);\\n\tfloat dyRoughness = dFdy(roughness);\\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\tfloat mipLevel = 0.5 * log2(d);\\n\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\tbool bRes = mipLevel == 0.0;\\n\tscale =  bRes && (scale < a) ? a : scale;\\n\tvec3 r;\\n\tvec2 offset;\\n\tint face = getFaceFromDirection(direction);\\n\tfloat rcpPowScale = 1.0 / powScale;\\n\tif( face == 0) {\\n\t\tr = vec3(direction.x, -direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 1) {\\n\t\tr = vec3(direction.y, direction.x, direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 2) {\\n\t\tr = vec3(direction.z, direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 3) {\\n\t\tr = vec3(direction.x, direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse if( face == 4) {\\n\t\tr = vec3(direction.y, direction.x, -direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse {\\n\t\tr = vec3(direction.z, -direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\tr = normalize(r);\\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\tvec2 base = offset + vec2( texelOffset );\\n\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\tfloat r1 = floor(roughnessVal);\\n\tfloat r2 = r1 + 1.0;\\n\tfloat t = fract(roughnessVal);\\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\tfloat s = mipInfo.y;\\n\tfloat level0 = mipInfo.x;\\n\tfloat level1 = level0 + 1.0;\\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\tvec4 result = mix(color10, color20, t);\\n\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'defaultnormal_vertex' ] = \"#ifdef FLIP_SIDED\\n\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'displacementmap_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'displacementmap_pars_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'emissivemap_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'emissivemap_pars_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'encodings_pars_fragment' ] = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/encodings_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'encodings_fragment' ] = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'envmap_fragment' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#else\\n\t\tvec3 reflectVec = vReflect;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\tenvColor = envMapTexelToLinear( envColor );\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\t#endif\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'envmap_pars_fragment' ] = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\tuniform float reflectivity;\\n\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\t\tvarying vec3 vWorldPosition;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\t\tuniform float refractionRatio;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t#endif\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'envmap_pars_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvarying vec3 vWorldPosition;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t\tuniform float refractionRatio;\\n\t#endif\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'envmap_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvWorldPosition = worldPosition.xyz;\\n\t#else\\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#endif\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'fog_fragment' ] = \"#ifdef USE_FOG\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\t#else\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\t#endif\\n\t#ifdef FOG_EXP2\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\t#else\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\t#endif\\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'fog_pars_fragment' ] = \"#ifdef USE_FOG\\n\tuniform vec3 fogColor;\\n\t#ifdef FOG_EXP2\\n\t\tuniform float fogDensity;\\n\t#else\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'lightmap_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'lightmap_pars_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'lights_lambert_vertex' ] = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\t\t#endif\\n\t}\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/lights_pars.glsl\n\t\n\tTHREE.ShaderChunk[ 'lights_pars' ] = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\tvec3 irradiance = ambientLightColor;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\tstruct DirectionalLight {\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tdirectLight.color = directionalLight.color;\\n\t\tdirectLight.direction = directionalLight.direction;\\n\t\tdirectLight.visible = true;\\n\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\tstruct PointLight {\\n\t\tvec3 position;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tvec3 lVector = pointLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\t\t\tdirectLight.color = pointLight.color;\\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tstruct SpotLight {\\n\t\tvec3 position;\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tfloat coneCos;\\n\t\tfloat penumbraCos;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\t\tvec3 lVector = spotLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\t\t\tdirectLight.color = spotLight.color;\\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tstruct HemisphereLight {\\n\t\tvec3 direction;\\n\t\tvec3 skyColor;\\n\t\tvec3 groundColor;\\n\t};\\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tirradiance *= PI;\\n\t\t#endif\\n\t\treturn irradiance;\\n\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\t\t#include <normal_flip>\\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\t\t#else\\n\t\t\tvec4 envMapColor = vec4( 0.0 );\\n\t\t#endif\\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\\n\t}\\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\t}\\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\t\t#endif\\n\t\t#include <normal_flip>\\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\t\tvec2 sampleUV;\\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#endif\\n\t\treturn envMapColor.rgb * envMapIntensity;\\n\t}\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'lights_phong_fragment' ] = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'lights_phong_pars_fragment' ] = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\tvec3\tdiffuseColor;\\n\tvec3\tspecularColor;\\n\tfloat\tspecularShininess;\\n\tfloat\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\t(0)\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'lights_physical_fragment' ] = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'lights_physical_pars_fragment' ] = \"struct PhysicalMaterial {\\n\tvec3\tdiffuseColor;\\n\tfloat\tspecularRoughness;\\n\tvec3\tspecularColor;\\n\t#ifndef STANDARD\\n\t\tfloat clearCoat;\\n\t\tfloat clearCoatRoughness;\\n\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\t#ifndef STANDARD\\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\t#else\\n\t\tfloat clearCoatDHR = 0.0;\\n\t#endif\\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\t#ifndef STANDARD\\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\t#ifndef STANDARD\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\tfloat dotNL = dotNV;\\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\t#else\\n\t\tfloat clearCoatDHR = 0.0;\\n\t#endif\\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\t#ifndef STANDARD\\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\t#endif\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/lights_template.glsl\n\t\n\tTHREE.ShaderChunk[ 'lights_template' ] = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\t#ifdef USE_LIGHTMAP\\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tlightMapIrradiance *= PI;\\n\t\t#endif\\n\t\tirradiance += lightMapIrradiance;\\n\t#endif\\n\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t}\\n\t#endif\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\t#endif\\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\t#ifndef STANDARD\\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\t#else\\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\t#endif\\n\t\t\\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'logdepthbuf_fragment' ] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'logdepthbuf_pars_fragment' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tuniform float logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'logdepthbuf_pars_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n\tuniform float logDepthBufFC;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'logdepthbuf_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\t#else\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\t#endif\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'map_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 texelColor = texture2D( map, vUv );\\n\ttexelColor = mapTexelToLinear( texelColor );\\n\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'map_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform sampler2D map;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'map_particle_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'map_particle_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'metalnessmap_fragment' ] = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'metalnessmap_pars_fragment' ] = \"#ifdef USE_METALNESSMAP\\n\tuniform sampler2D metalnessMap;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'morphnormal_vertex' ] = \"#ifdef USE_MORPHNORMALS\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'morphtarget_pars_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\t#ifndef USE_MORPHNORMALS\\n\tuniform float morphTargetInfluences[ 8 ];\\n\t#else\\n\tuniform float morphTargetInfluences[ 4 ];\\n\t#endif\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'morphtarget_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\t#ifndef USE_MORPHNORMALS\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\t#endif\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/normal_flip.glsl\n\t\n\tTHREE.ShaderChunk[ 'normal_flip' ] = \"#ifdef DOUBLE_SIDED\\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'normal_fragment' ] = \"#ifdef FLAT_SHADED\\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'normalmap_pars_fragment' ] = \"#ifdef USE_NORMALMAP\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\t}\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/packing.glsl\n\t\n\tTHREE.ShaderChunk[ 'packing' ] = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'premultiplied_alpha_fragment' ] = \"#ifdef PREMULTIPLIED_ALPHA\\n\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'project_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'roughnessmap_fragment' ] = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'roughnessmap_pars_fragment' ] = \"#ifdef USE_ROUGHNESSMAP\\n\tuniform sampler2D roughnessMap;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'shadowmap_pars_fragment' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\t}\\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\t\tvec2 f = fract( uv * size + 0.5 );\\n\t\tfloat a = mix( lb, lt, f.y );\\n\t\tfloat b = mix( rb, rt, f.y );\\n\t\tfloat c = mix( a, b, f.x );\\n\t\treturn c;\\n\t}\\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tshadowCoord.xyz /= shadowCoord.w;\\n\t\tshadowCoord.z += shadowBias;\\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\tbool inFrustum = all( inFrustumVec );\\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\t\tbool frustumTest = all( frustumTestVec );\\n\t\tif ( frustumTest ) {\\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\t\t#endif\\n\t\t}\\n\t\treturn 1.0;\\n\t}\\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\t\tvec3 absV = abs( v );\\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\tabsV *= scaleToCube;\\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\t\tvec2 planar = v.xy;\\n\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\tfloat almostOne = 1.0 - almostATexel;\\n\t\tif ( absV.z >= almostOne ) {\\n\t\t\tif ( v.z > 0.0 )\\n\t\t\t\tplanar.x = 4.0 - v.x;\\n\t\t} else if ( absV.x >= almostOne ) {\\n\t\t\tfloat signX = sign( v.x );\\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\t\t} else if ( absV.y >= almostOne ) {\\n\t\t\tfloat signY = sign( v.y );\\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\tplanar.y = v.z * signY - 2.0;\\n\t\t}\\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\t}\\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\t\tvec3 lightToPosition = shadowCoord.xyz;\\n\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\t\t#endif\\n\t}\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'shadowmap_pars_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'shadowmap_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'shadowmask_pars_fragment' ] = \"float getShadowMask() {\\n\tfloat shadow = 1.0;\\n\t#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#endif\\n\treturn shadow;\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'skinbase_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'skinning_pars_vertex' ] = \"#ifdef USE_SKINNING\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\t#ifdef BONE_TEXTURE\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\t\t\ty = dy * ( y + 0.5 );\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\t\t\treturn bone;\\n\t\t}\\n\t#else\\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\t\t}\\n\t#endif\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'skinning_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'skinnormal_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'specularmap_fragment' ] = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n#else\\n\tspecularStrength = 1.0;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'specularmap_pars_fragment' ] = \"#ifdef USE_SPECULARMAP\\n\tuniform sampler2D specularMap;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'tonemapping_fragment' ] = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'tonemapping_pars_fragment' ] = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'uv2_pars_fragment' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvarying vec2 vUv2;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'uv2_pars_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'uv2_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvUv2 = uv2;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\n\t\n\tTHREE.ShaderChunk[ 'uv_pars_fragment' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'uv_pars_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'uv_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\t\n\t// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\n\t\n\tTHREE.ShaderChunk[ 'worldpos_vertex' ] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\t#ifdef USE_SKINNING\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\t#else\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\t#endif\\n#endif\\n\";\n\t\n\t// File:src/renderers/shaders/UniformsUtils.js\n\t\n\t/**\n\t * Uniform Utilities\n\t */\n\t\n\tTHREE.UniformsUtils = {\n\t\n\t\tmerge: function ( uniforms ) {\n\t\n\t\t\tvar merged = {};\n\t\n\t\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\t\n\t\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\t\n\t\t\t\tfor ( var p in tmp ) {\n\t\n\t\t\t\t\tmerged[ p ] = tmp[ p ];\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn merged;\n\t\n\t\t},\n\t\n\t\tclone: function ( uniforms_src ) {\n\t\n\t\t\tvar uniforms_dst = {};\n\t\n\t\t\tfor ( var u in uniforms_src ) {\n\t\n\t\t\t\tuniforms_dst[ u ] = {};\n\t\n\t\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\t\n\t\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\t\n\t\t\t\t\tif ( parameter_src instanceof THREE.Color ||\n\t\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\n\t\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\n\t\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\n\t\t\t\t\t\t parameter_src instanceof THREE.Matrix3 ||\n\t\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\n\t\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\n\t\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\t\n\t\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\t\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn uniforms_dst;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/renderers/shaders/UniformsLib.js\n\t\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\t\n\tTHREE.UniformsLib = {\n\t\n\t\tcommon: {\n\t\n\t\t\t\"diffuse\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\t\"opacity\": { value: 1.0 },\n\t\n\t\t\t\"map\": { value: null },\n\t\t\t\"offsetRepeat\": { value: new THREE.Vector4( 0, 0, 1, 1 ) },\n\t\n\t\t\t\"specularMap\": { value: null },\n\t\t\t\"alphaMap\": { value: null },\n\t\n\t\t\t\"envMap\": { value: null },\n\t\t\t\"flipEnvMap\": { value: - 1 },\n\t\t\t\"reflectivity\": { value: 1.0 },\n\t\t\t\"refractionRatio\": { value: 0.98 }\n\t\n\t\t},\n\t\n\t\taomap: {\n\t\n\t\t\t\"aoMap\": { value: null },\n\t\t\t\"aoMapIntensity\": { value: 1 }\n\t\n\t\t},\n\t\n\t\tlightmap: {\n\t\n\t\t\t\"lightMap\": { value: null },\n\t\t\t\"lightMapIntensity\": { value: 1 }\n\t\n\t\t},\n\t\n\t\temissivemap: {\n\t\n\t\t\t\"emissiveMap\": { value: null }\n\t\n\t\t},\n\t\n\t\tbumpmap: {\n\t\n\t\t\t\"bumpMap\": { value: null },\n\t\t\t\"bumpScale\": { value: 1 }\n\t\n\t\t},\n\t\n\t\tnormalmap: {\n\t\n\t\t\t\"normalMap\": { value: null },\n\t\t\t\"normalScale\": { value: new THREE.Vector2( 1, 1 ) }\n\t\n\t\t},\n\t\n\t\tdisplacementmap: {\n\t\n\t\t\t\"displacementMap\": { value: null },\n\t\t\t\"displacementScale\": { value: 1 },\n\t\t\t\"displacementBias\": { value: 0 }\n\t\n\t\t},\n\t\n\t\troughnessmap: {\n\t\n\t\t\t\"roughnessMap\": { value: null }\n\t\n\t\t},\n\t\n\t\tmetalnessmap: {\n\t\n\t\t\t\"metalnessMap\": { value: null }\n\t\n\t\t},\n\t\n\t\tfog: {\n\t\n\t\t\t\"fogDensity\": { value: 0.00025 },\n\t\t\t\"fogNear\": { value: 1 },\n\t\t\t\"fogFar\": { value: 2000 },\n\t\t\t\"fogColor\": { value: new THREE.Color( 0xffffff ) }\n\t\n\t\t},\n\t\n\t\tlights: {\n\t\n\t\t\t\"ambientLightColor\": { value: [] },\n\t\n\t\t\t\"directionalLights\": { value: [], properties: {\n\t\t\t\t\"direction\": {},\n\t\t\t\t\"color\": {},\n\t\n\t\t\t\t\"shadow\": {},\n\t\t\t\t\"shadowBias\": {},\n\t\t\t\t\"shadowRadius\": {},\n\t\t\t\t\"shadowMapSize\": {}\n\t\t\t} },\n\t\n\t\t\t\"directionalShadowMap\": { value: [] },\n\t\t\t\"directionalShadowMatrix\": { value: [] },\n\t\n\t\t\t\"spotLights\": { value: [], properties: {\n\t\t\t\t\"color\": {},\n\t\t\t\t\"position\": {},\n\t\t\t\t\"direction\": {},\n\t\t\t\t\"distance\": {},\n\t\t\t\t\"coneCos\": {},\n\t\t\t\t\"penumbraCos\": {},\n\t\t\t\t\"decay\": {},\n\t\n\t\t\t\t\"shadow\": {},\n\t\t\t\t\"shadowBias\": {},\n\t\t\t\t\"shadowRadius\": {},\n\t\t\t\t\"shadowMapSize\": {}\n\t\t\t} },\n\t\n\t\t\t\"spotShadowMap\": { value: [] },\n\t\t\t\"spotShadowMatrix\": { value: [] },\n\t\n\t\t\t\"pointLights\": { value: [], properties: {\n\t\t\t\t\"color\": {},\n\t\t\t\t\"position\": {},\n\t\t\t\t\"decay\": {},\n\t\t\t\t\"distance\": {},\n\t\n\t\t\t\t\"shadow\": {},\n\t\t\t\t\"shadowBias\": {},\n\t\t\t\t\"shadowRadius\": {},\n\t\t\t\t\"shadowMapSize\": {}\n\t\t\t} },\n\t\n\t\t\t\"pointShadowMap\": { value: [] },\n\t\t\t\"pointShadowMatrix\": { value: [] },\n\t\n\t\t\t\"hemisphereLights\": { value: [], properties: {\n\t\t\t\t\"direction\": {},\n\t\t\t\t\"skyColor\": {},\n\t\t\t\t\"groundColor\": {}\n\t\t\t} }\n\t\n\t\t},\n\t\n\t\tpoints: {\n\t\n\t\t\t\"diffuse\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\t\"opacity\": { value: 1.0 },\n\t\t\t\"size\": { value: 1.0 },\n\t\t\t\"scale\": { value: 1.0 },\n\t\t\t\"map\": { value: null },\n\t\t\t\"offsetRepeat\": { value: new THREE.Vector4( 0, 0, 1, 1 ) }\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/renderers/shaders/ShaderLib/cube_frag.glsl\n\t\n\tTHREE.ShaderChunk[ 'cube_frag' ] = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\tgl_FragColor.a *= opacity;\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/cube_vert.glsl\n\t\n\tTHREE.ShaderChunk[ 'cube_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/depth_frag.glsl\n\t\n\tTHREE.ShaderChunk[ 'depth_frag' ] = \"#if DEPTH_PACKING == 3200\\n\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( 1.0 );\\n\t#if DEPTH_PACKING == 3200\\n\t\tdiffuseColor.a = opacity;\\n\t#endif\\n\t#include <map_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <logdepthbuf_fragment>\\n\t#if DEPTH_PACKING == 3200\\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\t#elif DEPTH_PACKING == 3201\\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\t#endif\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/depth_vert.glsl\n\t\n\tTHREE.ShaderChunk[ 'depth_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl\n\t\n\tTHREE.ShaderChunk[ 'distanceRGBA_frag' ] = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl\n\t\n\tTHREE.ShaderChunk[ 'distanceRGBA_vert' ] = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvWorldPosition = worldPosition;\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/equirect_frag.glsl\n\t\n\tTHREE.ShaderChunk[ 'equirect_frag' ] = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tvec3 direction = normalize( vWorldPosition );\\n\tvec2 sampleUV;\\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/equirect_vert.glsl\n\t\n\tTHREE.ShaderChunk[ 'equirect_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/linedashed_frag.glsl\n\t\n\tTHREE.ShaderChunk[ 'linedashed_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\t\tdiscard;\\n\t}\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <color_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/linedashed_vert.glsl\n\t\n\tTHREE.ShaderChunk[ 'linedashed_vert' ] = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\tvLineDistance = scale * lineDistance;\\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\tgl_Position = projectionMatrix * mvPosition;\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/meshbasic_frag.glsl\n\t\n\tTHREE.ShaderChunk[ 'meshbasic_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\tReflectedLight reflectedLight;\\n\treflectedLight.directDiffuse = vec3( 0.0 );\\n\treflectedLight.directSpecular = vec3( 0.0 );\\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\t#include <normal_flip>\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/meshbasic_vert.glsl\n\t\n\tTHREE.ShaderChunk[ 'meshbasic_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <skinbase_vertex>\\n\t#ifdef USE_ENVMAP\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#endif\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <envmap_vertex>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/meshlambert_frag.glsl\n\t\n\tTHREE.ShaderChunk[ 'meshlambert_frag' ] = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <emissivemap_fragment>\\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\t#include <lightmap_fragment>\\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\t#ifdef DOUBLE_SIDED\\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\t#else\\n\t\treflectedLight.directDiffuse = vLightFront;\\n\t#endif\\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\t#include <normal_flip>\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/meshlambert_vert.glsl\n\t\n\tTHREE.ShaderChunk[ 'meshlambert_vert' ] = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <lights_lambert_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/meshphong_frag.glsl\n\t\n\tTHREE.ShaderChunk[ 'meshphong_frag' ] = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <normal_flip>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_phong_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/meshphong_vert.glsl\n\t\n\tTHREE.ShaderChunk[ 'meshphong_vert' ] = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/meshphysical_frag.glsl\n\t\n\tTHREE.ShaderChunk[ 'meshphysical_frag' ] = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\tuniform float clearCoat;\\n\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <roughnessmap_fragment>\\n\t#include <metalnessmap_fragment>\\n\t#include <normal_flip>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_physical_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/meshphysical_vert.glsl\n\t\n\tTHREE.ShaderChunk[ 'meshphysical_vert' ] = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/normal_frag.glsl\n\t\n\tTHREE.ShaderChunk[ 'normal_frag' ] = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/normal_vert.glsl\n\t\n\tTHREE.ShaderChunk[ 'normal_vert' ] = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvNormal = normalize( normalMatrix * normal );\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/points_frag.glsl\n\t\n\tTHREE.ShaderChunk[ 'points_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_particle_fragment>\\n\t#include <color_fragment>\\n\t#include <alphatest_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/points_vert.glsl\n\t\n\tTHREE.ShaderChunk[ 'points_vert' ] = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#ifdef USE_SIZEATTENUATION\\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\t#else\\n\t\tgl_PointSize = size;\\n\t#endif\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/shadow_frag.glsl\n\t\n\tTHREE.ShaderChunk[ 'shadow_frag' ] = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib/shadow_vert.glsl\n\t\n\tTHREE.ShaderChunk[ 'shadow_vert' ] = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\t\n\t// File:src/renderers/shaders/ShaderLib.js\n\t\n\t/**\n\t * Webgl Shader Library for three.js\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\t\n\t\n\tTHREE.ShaderLib = {\n\t\n\t\t'basic': {\n\t\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\n\t\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\t\tTHREE.UniformsLib[ 'fog' ]\n\t\n\t\t\t] ),\n\t\n\t\t\tvertexShader: THREE.ShaderChunk[ 'meshbasic_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'meshbasic_frag' ]\n\t\n\t\t},\n\t\n\t\t'lambert': {\n\t\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\n\t\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\t\tTHREE.UniformsLib[ 'lights' ],\n\t\n\t\t\t\t{\n\t\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) }\n\t\t\t\t}\n\t\n\t\t\t] ),\n\t\n\t\t\tvertexShader: THREE.ShaderChunk[ 'meshlambert_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'meshlambert_frag' ]\n\t\n\t\t},\n\t\n\t\t'phong': {\n\t\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\n\t\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'normalmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\t\tTHREE.UniformsLib[ 'lights' ],\n\t\n\t\t\t\t{\n\t\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\t\"specular\" : { value: new THREE.Color( 0x111111 ) },\n\t\t\t\t\t\"shininess\": { value: 30 }\n\t\t\t\t}\n\t\n\t\t\t] ),\n\t\n\t\t\tvertexShader: THREE.ShaderChunk[ 'meshphong_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'meshphong_frag' ]\n\t\n\t\t},\n\t\n\t\t'standard': {\n\t\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\n\t\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'normalmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'roughnessmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'metalnessmap' ],\n\t\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\t\tTHREE.UniformsLib[ 'lights' ],\n\t\n\t\t\t\t{\n\t\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\t\"roughness\": { value: 0.5 },\n\t\t\t\t\t\"metalness\": { value: 0 },\n\t\t\t\t\t\"envMapIntensity\" : { value: 1 }, // temporary\n\t\t\t\t}\n\t\n\t\t\t] ),\n\t\n\t\t\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\n\t\n\t\t},\n\t\n\t\t'points': {\n\t\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\n\t\t\t\tTHREE.UniformsLib[ 'points' ],\n\t\t\t\tTHREE.UniformsLib[ 'fog' ]\n\t\n\t\t\t] ),\n\t\n\t\t\tvertexShader: THREE.ShaderChunk[ 'points_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'points_frag' ]\n\t\n\t\t},\n\t\n\t\t'dashed': {\n\t\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\n\t\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\n\t\t\t\t{\n\t\t\t\t\t\"scale\"    : { value: 1 },\n\t\t\t\t\t\"dashSize\" : { value: 1 },\n\t\t\t\t\t\"totalSize\": { value: 2 }\n\t\t\t\t}\n\t\n\t\t\t] ),\n\t\n\t\t\tvertexShader: THREE.ShaderChunk[ 'linedashed_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'linedashed_frag' ]\n\t\n\t\t},\n\t\n\t\t'depth': {\n\t\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\n\t\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\t\tTHREE.UniformsLib[ 'displacementmap' ]\n\t\n\t\t\t] ),\n\t\n\t\t\tvertexShader: THREE.ShaderChunk[ 'depth_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'depth_frag' ]\n\t\n\t\t},\n\t\n\t\t'normal': {\n\t\n\t\t\tuniforms: {\n\t\n\t\t\t\t\"opacity\" : { value: 1.0 }\n\t\n\t\t\t},\n\t\n\t\t\tvertexShader: THREE.ShaderChunk[ 'normal_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'normal_frag' ]\n\t\n\t\t},\n\t\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\n\t\t'cube': {\n\t\n\t\t\tuniforms: {\n\t\t\t\t\"tCube\": { value: null },\n\t\t\t\t\"tFlip\": { value: - 1 },\n\t\t\t\t\"opacity\": { value: 1.0 }\n\t\t\t},\n\t\n\t\t\tvertexShader: THREE.ShaderChunk[ 'cube_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'cube_frag' ]\n\t\n\t\t},\n\t\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\n\t\t'equirect': {\n\t\n\t\t\tuniforms: {\n\t\t\t\t\"tEquirect\": { value: null },\n\t\t\t\t\"tFlip\": { value: - 1 }\n\t\t\t},\n\t\n\t\t\tvertexShader: THREE.ShaderChunk[ 'equirect_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'equirect_frag' ]\n\t\n\t\t},\n\t\n\t\t'distanceRGBA': {\n\t\n\t\t\tuniforms: {\n\t\n\t\t\t\t\"lightPos\": { value: new THREE.Vector3() }\n\t\n\t\t\t},\n\t\n\t\t\tvertexShader: THREE.ShaderChunk[ 'distanceRGBA_vert' ],\n\t\t\tfragmentShader: THREE.ShaderChunk[ 'distanceRGBA_frag' ]\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.ShaderLib[ 'physical' ] = {\n\t\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\n\t\t\tTHREE.ShaderLib[ 'standard' ].uniforms,\n\t\n\t\t\t{\n\t\t\t\t\"clearCoat\": { value: 0 },\n\t\t\t\t\"clearCoatRoughness\": { value: 0 }\n\t\t\t}\n\t\n\t\t] ),\n\t\n\t\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\n\t\n\t};\n\t\n\t// File:src/renderers/WebGLRenderer.js\n\t\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\t\n\tTHREE.WebGLRenderer = function ( parameters ) {\n\t\n\t\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\n\t\n\t\tparameters = parameters || {};\n\t\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\t\n\t\tvar lights = [];\n\t\n\t\tvar opaqueObjects = [];\n\t\tvar opaqueObjectsLastIndex = - 1;\n\t\tvar transparentObjects = [];\n\t\tvar transparentObjectsLastIndex = - 1;\n\t\n\t\tvar morphInfluences = new Float32Array( 8 );\n\t\n\t\tvar sprites = [];\n\t\tvar lensFlares = [];\n\t\n\t\t// public properties\n\t\n\t\tthis.domElement = _canvas;\n\t\tthis.context = null;\n\t\n\t\t// clearing\n\t\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\t\n\t\t// scene graph\n\t\n\t\tthis.sortObjects = true;\n\t\n\t\t// user-defined clipping\n\t\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\t\n\t\t// physically based shading\n\t\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.gammaInput = false;\n\t\tthis.gammaOutput = false;\n\t\n\t\t// physical lights\n\t\n\t\tthis.physicallyCorrectLights = false;\n\t\n\t\t// tone mapping\n\t\n\t\tthis.toneMapping = THREE.LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\t\n\t\t// morphs\n\t\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\t\n\t\t// internal properties\n\t\n\t\tvar _this = this,\n\t\n\t\t// internal state cache\n\t\n\t\t_currentProgram = null,\n\t\t_currentRenderTarget = null,\n\t\t_currentFramebuffer = null,\n\t\t_currentMaterialId = - 1,\n\t\t_currentGeometryProgram = '',\n\t\t_currentCamera = null,\n\t\n\t\t_currentScissor = new THREE.Vector4(),\n\t\t_currentScissorTest = null,\n\t\n\t\t_currentViewport = new THREE.Vector4(),\n\t\n\t\t//\n\t\n\t\t_usedTextureUnits = 0,\n\t\n\t\t//\n\t\n\t\t_clearColor = new THREE.Color( 0x000000 ),\n\t\t_clearAlpha = 0,\n\t\n\t\t_width = _canvas.width,\n\t\t_height = _canvas.height,\n\t\n\t\t_pixelRatio = 1,\n\t\n\t\t_scissor = new THREE.Vector4( 0, 0, _width, _height ),\n\t\t_scissorTest = false,\n\t\n\t\t_viewport = new THREE.Vector4( 0, 0, _width, _height ),\n\t\n\t\t// frustum\n\t\n\t\t_frustum = new THREE.Frustum(),\n\t\n\t\t// clipping\n\t\n\t\t_clipping = new THREE.WebGLClipping(),\n\t\t_clippingEnabled = false,\n\t\t_localClippingEnabled = false,\n\t\n\t\t_sphere = new THREE.Sphere(),\n\t\n\t\t// camera matrices cache\n\t\n\t\t_projScreenMatrix = new THREE.Matrix4(),\n\t\n\t\t_vector3 = new THREE.Vector3(),\n\t\n\t\t// light arrays cache\n\t\n\t\t_lights = {\n\t\n\t\t\thash: '',\n\t\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\tpoint: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: [],\n\t\n\t\t\tshadows: []\n\t\n\t\t},\n\t\n\t\t// info\n\t\n\t\t_infoRender = {\n\t\n\t\t\tcalls: 0,\n\t\t\tvertices: 0,\n\t\t\tfaces: 0,\n\t\t\tpoints: 0\n\t\n\t\t};\n\t\n\t\tthis.info = {\n\t\n\t\t\trender: _infoRender,\n\t\t\tmemory: {\n\t\n\t\t\t\tgeometries: 0,\n\t\t\t\ttextures: 0\n\t\n\t\t\t},\n\t\t\tprograms: null\n\t\n\t\t};\n\t\n\t\n\t\t// initialize\n\t\n\t\tvar _gl;\n\t\n\t\ttry {\n\t\n\t\t\tvar attributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t\t\t};\n\t\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\t\n\t\t\tif ( _gl === null ) {\n\t\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\t\n\t\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tthrow 'Error creating WebGL context.';\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\t\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\t\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\t\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\n\t\t} catch ( error ) {\n\t\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\t\n\t\t}\n\t\n\t\tvar extensions = new THREE.WebGLExtensions( _gl );\n\t\n\t\textensions.get( 'WEBGL_depth_texture' );\n\t\textensions.get( 'OES_texture_float' );\n\t\textensions.get( 'OES_texture_float_linear' );\n\t\textensions.get( 'OES_texture_half_float' );\n\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\textensions.get( 'OES_standard_derivatives' );\n\t\textensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t\tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\t\n\t\t\tTHREE.BufferGeometry.MaxIndex = 4294967296;\n\t\n\t\t}\n\t\n\t\tvar capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );\n\t\n\t\tvar state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );\n\t\tvar properties = new THREE.WebGLProperties();\n\t\tvar textures = new THREE.WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n\t\tvar objects = new THREE.WebGLObjects( _gl, properties, this.info );\n\t\tvar programCache = new THREE.WebGLPrograms( this, capabilities );\n\t\tvar lightCache = new THREE.WebGLLights();\n\t\n\t\tthis.info.programs = programCache.programs;\n\t\n\t\tvar bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );\n\t\tvar indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\t\n\t\t//\n\t\n\t\tvar backgroundCamera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tvar backgroundCamera2 = new THREE.PerspectiveCamera();\n\t\tvar backgroundPlaneMesh = new THREE.Mesh(\n\t\t\tnew THREE.PlaneBufferGeometry( 2, 2 ),\n\t\t\tnew THREE.MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t\t);\n\t\tvar backgroundBoxShader = THREE.ShaderLib[ 'cube' ];\n\t\tvar backgroundBoxMesh = new THREE.Mesh(\n\t\t\tnew THREE.BoxBufferGeometry( 5, 5, 5 ),\n\t\t\tnew THREE.ShaderMaterial( {\n\t\t\t\tuniforms: backgroundBoxShader.uniforms,\n\t\t\t\tvertexShader: backgroundBoxShader.vertexShader,\n\t\t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n\t\t\t\tside: THREE.BackSide,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\tfog: false\n\t\t\t} )\n\t\t);\n\t\n\t\t//\n\t\n\t\tfunction getTargetPixelRatio() {\n\t\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\n\t\t}\n\t\n\t\tfunction glClearColor( r, g, b, a ) {\n\t\n\t\t\tif ( _premultipliedAlpha === true ) {\n\t\n\t\t\t\tr *= a; g *= a; b *= a;\n\t\n\t\t\t}\n\t\n\t\t\tstate.clearColor( r, g, b, a );\n\t\n\t\t}\n\t\n\t\tfunction setDefaultGLState() {\n\t\n\t\t\tstate.init();\n\t\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\t\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t\t}\n\t\n\t\tfunction resetGLState() {\n\t\n\t\t\t_currentProgram = null;\n\t\t\t_currentCamera = null;\n\t\n\t\t\t_currentGeometryProgram = '';\n\t\t\t_currentMaterialId = - 1;\n\t\n\t\t\tstate.reset();\n\t\n\t\t}\n\t\n\t\tsetDefaultGLState();\n\t\n\t\tthis.context = _gl;\n\t\tthis.capabilities = capabilities;\n\t\tthis.extensions = extensions;\n\t\tthis.properties = properties;\n\t\tthis.state = state;\n\t\n\t\t// shadow map\n\t\n\t\tvar shadowMap = new THREE.WebGLShadowMap( this, _lights, objects, capabilities );\n\t\n\t\tthis.shadowMap = shadowMap;\n\t\n\t\n\t\t// Plugins\n\t\n\t\tvar spritePlugin = new THREE.SpritePlugin( this, sprites );\n\t\tvar lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );\n\t\n\t\t// API\n\t\n\t\tthis.getContext = function () {\n\t\n\t\t\treturn _gl;\n\t\n\t\t};\n\t\n\t\tthis.getContextAttributes = function () {\n\t\n\t\t\treturn _gl.getContextAttributes();\n\t\n\t\t};\n\t\n\t\tthis.forceContextLoss = function () {\n\t\n\t\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\t\n\t\t};\n\t\n\t\tthis.getMaxAnisotropy = function () {\n\t\n\t\t\treturn capabilities.getMaxAnisotropy();\n\t\n\t\t};\n\t\n\t\tthis.getPrecision = function () {\n\t\n\t\t\treturn capabilities.precision;\n\t\n\t\t};\n\t\n\t\tthis.getPixelRatio = function () {\n\t\n\t\t\treturn _pixelRatio;\n\t\n\t\t};\n\t\n\t\tthis.setPixelRatio = function ( value ) {\n\t\n\t\t\tif ( value === undefined ) return;\n\t\n\t\t\t_pixelRatio = value;\n\t\n\t\t\tthis.setSize( _viewport.z, _viewport.w, false );\n\t\n\t\t};\n\t\n\t\tthis.getSize = function () {\n\t\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\t\n\t\t};\n\t\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\t\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\n\t\t\t_canvas.width = width * _pixelRatio;\n\t\t\t_canvas.height = height * _pixelRatio;\n\t\n\t\t\tif ( updateStyle !== false ) {\n\t\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\n\t\t\t}\n\t\n\t\t\tthis.setViewport( 0, 0, width, height );\n\t\n\t\t};\n\t\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\t\n\t\t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\t\n\t\t};\n\t\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\t\n\t\t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\t\n\t\t};\n\t\n\t\tthis.setScissorTest = function ( boolean ) {\n\t\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\t\n\t\t};\n\t\n\t\t// Clearing\n\t\n\t\tthis.getClearColor = function () {\n\t\n\t\t\treturn _clearColor;\n\t\n\t\t};\n\t\n\t\tthis.setClearColor = function ( color, alpha ) {\n\t\n\t\t\t_clearColor.set( color );\n\t\n\t\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\t\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t\t};\n\t\n\t\tthis.getClearAlpha = function () {\n\t\n\t\t\treturn _clearAlpha;\n\t\n\t\t};\n\t\n\t\tthis.setClearAlpha = function ( alpha ) {\n\t\n\t\t\t_clearAlpha = alpha;\n\t\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t\t};\n\t\n\t\tthis.clear = function ( color, depth, stencil ) {\n\t\n\t\t\tvar bits = 0;\n\t\n\t\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\t\n\t\t\t_gl.clear( bits );\n\t\n\t\t};\n\t\n\t\tthis.clearColor = function () {\n\t\n\t\t\tthis.clear( true, false, false );\n\t\n\t\t};\n\t\n\t\tthis.clearDepth = function () {\n\t\n\t\t\tthis.clear( false, true, false );\n\t\n\t\t};\n\t\n\t\tthis.clearStencil = function () {\n\t\n\t\t\tthis.clear( false, false, true );\n\t\n\t\t};\n\t\n\t\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\t\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\t\n\t\t};\n\t\n\t\t// Reset\n\t\n\t\tthis.resetGLState = resetGLState;\n\t\n\t\tthis.dispose = function() {\n\t\n\t\t\ttransparentObjects = [];\n\t\t\ttransparentObjectsLastIndex = -1;\n\t\t\topaqueObjects = [];\n\t\t\topaqueObjectsLastIndex = -1;\n\t\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\n\t\t};\n\t\n\t\t// Events\n\t\n\t\tfunction onContextLost( event ) {\n\t\n\t\t\tevent.preventDefault();\n\t\n\t\t\tresetGLState();\n\t\t\tsetDefaultGLState();\n\t\n\t\t\tproperties.clear();\n\t\n\t\t}\n\t\n\t\tfunction onMaterialDispose( event ) {\n\t\n\t\t\tvar material = event.target;\n\t\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\t\n\t\t\tdeallocateMaterial( material );\n\t\n\t\t}\n\t\n\t\t// Buffer deallocation\n\t\n\t\tfunction deallocateMaterial( material ) {\n\t\n\t\t\treleaseMaterialProgramReference( material );\n\t\n\t\t\tproperties.delete( material );\n\t\n\t\t}\n\t\n\t\n\t\tfunction releaseMaterialProgramReference( material ) {\n\t\n\t\t\tvar programInfo = properties.get( material ).program;\n\t\n\t\t\tmaterial.program = undefined;\n\t\n\t\t\tif ( programInfo !== undefined ) {\n\t\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// Buffer rendering\n\t\n\t\tthis.renderBufferImmediate = function ( object, program, material ) {\n\t\n\t\t\tstate.initAttributes();\n\t\n\t\t\tvar buffers = properties.get( object );\n\t\n\t\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\t\n\t\t\tvar attributes = program.getAttributes();\n\t\n\t\t\tif ( object.hasPositions ) {\n\t\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\t\n\t\t\t\tstate.enableAttribute( attributes.position );\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t\t\t}\n\t\n\t\t\tif ( object.hasNormals ) {\n\t\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\t\n\t\t\t\tif ( material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.type !== 'MeshPhysicalMaterial' && material.shading === THREE.FlatShading ) {\n\t\n\t\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\t\n\t\t\t\t\t\tvar array = object.normalArray;\n\t\n\t\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\t\n\t\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\t\tarray[ i + 2 ] = nz;\n\t\n\t\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\t\tarray[ i + 5 ] = nz;\n\t\n\t\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\t\tarray[ i + 8 ] = nz;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\t\n\t\t\t\tstate.enableAttribute( attributes.normal );\n\t\n\t\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t\t\t}\n\t\n\t\t\tif ( object.hasUvs && material.map ) {\n\t\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\t\n\t\t\t\tstate.enableAttribute( attributes.uv );\n\t\n\t\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\t\n\t\t\t}\n\t\n\t\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\n\t\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\t\n\t\t\t\tstate.enableAttribute( attributes.color );\n\t\n\t\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\t\n\t\t\t}\n\t\n\t\t\tstate.disableUnusedAttributes();\n\t\n\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\t\n\t\t\tobject.count = 0;\n\t\n\t\t};\n\t\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\t\n\t\t\tsetMaterial( material );\n\t\n\t\t\tvar program = setProgram( camera, fog, material, object );\n\t\n\t\t\tvar updateBuffers = false;\n\t\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\t\n\t\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\t\n\t\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\t\tupdateBuffers = true;\n\t\n\t\t\t}\n\t\n\t\t\t// morph targets\n\t\n\t\t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\t\n\t\t\tif ( morphTargetInfluences !== undefined ) {\n\t\n\t\t\t\tvar activeInfluences = [];\n\t\n\t\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t\t\t\t\tactiveInfluences.push( [ influence, i ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tactiveInfluences.sort( absNumericalSort );\n\t\n\t\t\t\tif ( activeInfluences.length > 8 ) {\n\t\n\t\t\t\t\tactiveInfluences.length = 8;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\n\t\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar influence = activeInfluences[ i ];\n\t\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\t\n\t\t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\t\n\t\t\t\t\t\tvar index = influence[ 1 ];\n\t\n\t\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tprogram.getUniforms().setValue(\n\t\t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\t\n\t\t\t\tupdateBuffers = true;\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\t\n\t\t\tif ( material.wireframe === true ) {\n\t\n\t\t\t\tindex = objects.getWireframeAttribute( geometry );\n\t\n\t\t\t}\n\t\n\t\t\tvar renderer;\n\t\n\t\t\tif ( index !== null ) {\n\t\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( index );\n\t\n\t\t\t} else {\n\t\n\t\t\t\trenderer = bufferRenderer;\n\t\n\t\t\t}\n\t\n\t\t\tif ( updateBuffers ) {\n\t\n\t\t\t\tsetupVertexAttributes( material, program, geometry );\n\t\n\t\t\t\tif ( index !== null ) {\n\t\n\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tvar dataStart = 0;\n\t\t\tvar dataCount = Infinity;\n\t\n\t\t\tif ( index !== null ) {\n\t\n\t\t\t\tdataCount = index.count;\n\t\n\t\t\t} else if ( position !== undefined ) {\n\t\n\t\t\t\tdataCount = position.count;\n\t\n\t\t\t}\n\t\n\t\t\tvar rangeStart = geometry.drawRange.start;\n\t\t\tvar rangeCount = geometry.drawRange.count;\n\t\n\t\t\tvar groupStart = group !== null ? group.start : 0;\n\t\t\tvar groupCount = group !== null ? group.count : Infinity;\n\t\n\t\t\tvar drawStart = Math.max( dataStart, rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\t\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\t\n\t\t\t//\n\t\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\t\n\t\t\t\tif ( material.wireframe === true ) {\n\t\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tswitch ( object.drawMode ) {\n\t\n\t\t\t\t\t\tcase THREE.TrianglesDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase THREE.TriangleStripDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase THREE.TriangleFanDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\n\t\t\t} else if ( object instanceof THREE.Line ) {\n\t\n\t\t\t\tvar lineWidth = material.linewidth;\n\t\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\t\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\t\n\t\t\t\tif ( object instanceof THREE.LineSegments ) {\n\t\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( object instanceof THREE.Points ) {\n\t\n\t\t\t\trenderer.setMode( _gl.POINTS );\n\t\n\t\t\t}\n\t\n\t\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\n\t\n\t\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\t\n\t\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\trenderer.render( drawStart, drawCount );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\t\n\t\t\tvar extension;\n\t\n\t\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\n\t\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t\t\t\tif ( extension === null ) {\n\t\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( startIndex === undefined ) startIndex = 0;\n\t\n\t\t\tstate.initAttributes();\n\t\n\t\t\tvar geometryAttributes = geometry.attributes;\n\t\n\t\t\tvar programAttributes = program.getAttributes();\n\t\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\t\n\t\t\tfor ( var name in programAttributes ) {\n\t\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\t\n\t\t\t\tif ( programAttribute >= 0 ) {\n\t\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\t\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\t\n\t\t\t\t\t\tvar type = _gl.FLOAT;\n\t\t\t\t\t\tvar array = geometryAttribute.array;\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\n\t\t\t\t\t\tif ( array instanceof Float32Array ) {\n\t\n\t\t\t\t\t\t\ttype = _gl.FLOAT;\n\t\n\t\t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\t\n\t\t\t\t\t\t\tconsole.warn(\"Unsupported data buffer format: Float64Array\");\n\t\n\t\t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\t\n\t\t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\n\t\t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\t\n\t\t\t\t\t\t\ttype = _gl.SHORT;\n\t\n\t\t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\t\n\t\t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\t\n\t\t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\t\n\t\t\t\t\t\t\ttype = _gl.INT;\n\t\n\t\t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\t\n\t\t\t\t\t\t\ttype = _gl.BYTE;\n\t\n\t\t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\t\n\t\t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\t\n\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {\n\t\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\t\n\t\t\t\t\t\t\tif ( data instanceof THREE.InstancedInterleavedBuffer ) {\n\t\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\t\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\t\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {\n\t\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\t\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\t\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\t\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\t\n\t\t\t\t\t\tif ( value !== undefined ) {\n\t\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\t\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tstate.disableUnusedAttributes();\n\t\n\t\t}\n\t\n\t\t// Sorting\n\t\n\t\tfunction absNumericalSort( a, b ) {\n\t\n\t\t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\t\n\t\t}\n\t\n\t\tfunction painterSortStable ( a, b ) {\n\t\n\t\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\t\n\t\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\t\n\t\t\t} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {\n\t\n\t\t\t\treturn a.material.program.id - b.material.program.id;\n\t\n\t\t\t} else if ( a.material.id !== b.material.id ) {\n\t\n\t\t\t\treturn a.material.id - b.material.id;\n\t\n\t\t\t} else if ( a.z !== b.z ) {\n\t\n\t\t\t\treturn a.z - b.z;\n\t\n\t\t\t} else {\n\t\n\t\t\t\treturn a.id - b.id;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction reversePainterSortStable ( a, b ) {\n\t\n\t\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\t\n\t\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\t\n\t\t\t} if ( a.z !== b.z ) {\n\t\n\t\t\t\treturn b.z - a.z;\n\t\n\t\t\t} else {\n\t\n\t\t\t\treturn a.id - b.id;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// Rendering\n\t\n\t\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\t\n\t\t\tif ( camera instanceof THREE.Camera === false ) {\n\t\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tvar fog = scene.fog;\n\t\n\t\t\t// reset caching for this frame\n\t\n\t\t\t_currentGeometryProgram = '';\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\t\n\t\t\t// update scene graph\n\t\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\n\t\t\t// update camera matrices and frustum\n\t\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\t\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\t\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\t\n\t\t\tlights.length = 0;\n\t\n\t\t\topaqueObjectsLastIndex = - 1;\n\t\t\ttransparentObjectsLastIndex = - 1;\n\t\n\t\t\tsprites.length = 0;\n\t\t\tlensFlares.length = 0;\n\t\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\t\n\t\t\tprojectObject( scene, camera );\n\t\n\t\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n\t\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\t\n\t\t\tif ( _this.sortObjects === true ) {\n\t\n\t\t\t\topaqueObjects.sort( painterSortStable );\n\t\t\t\ttransparentObjects.sort( reversePainterSortStable );\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\t\n\t\t\tsetupShadows( lights );\n\t\n\t\t\tshadowMap.render( scene, camera );\n\t\n\t\t\tsetupLights( lights, camera );\n\t\n\t\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\t\n\t\t\t//\n\t\n\t\t\t_infoRender.calls = 0;\n\t\t\t_infoRender.vertices = 0;\n\t\t\t_infoRender.faces = 0;\n\t\t\t_infoRender.points = 0;\n\t\n\t\t\tif ( renderTarget === undefined ) {\n\t\n\t\t\t\trenderTarget = null;\n\t\n\t\t\t}\n\t\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\n\t\t\t//\n\t\n\t\t\tvar background = scene.background;\n\t\n\t\t\tif ( background === null ) {\n\t\n\t\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\t\n\t\t\t} else if ( background instanceof THREE.Color ) {\n\t\n\t\t\t\tglClearColor( background.r, background.g, background.b, 1 );\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.autoClear || forceClear ) {\n\t\n\t\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\t\n\t\t\t}\n\t\n\t\t\tif ( background instanceof THREE.CubeTexture ) {\n\t\n\t\t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\t\n\t\t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n\t\t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\t\n\t\t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n\t\t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\t\n\t\t\t\tobjects.update( backgroundBoxMesh );\n\t\n\t\t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\t\n\t\t\t} else if ( background instanceof THREE.Texture ) {\n\t\n\t\t\t\tbackgroundPlaneMesh.material.map = background;\n\t\n\t\t\t\tobjects.update( backgroundPlaneMesh );\n\t\n\t\t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tif ( scene.overrideMaterial ) {\n\t\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\t\n\t\t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n\t\t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// opaque pass (front-to-back order)\n\t\n\t\t\t\tstate.setBlending( THREE.NoBlending );\n\t\t\t\trenderObjects( opaqueObjects, camera, fog );\n\t\n\t\t\t\t// transparent pass (back-to-front order)\n\t\n\t\t\t\trenderObjects( transparentObjects, camera, fog );\n\t\n\t\t\t}\n\t\n\t\t\t// custom render plugins (post pass)\n\t\n\t\t\tspritePlugin.render( scene, camera );\n\t\t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\t\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\n\t\t\tif ( renderTarget ) {\n\t\n\t\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\t\n\t\t\t}\n\t\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\t\n\t\t\tstate.setDepthTest( true );\n\t\t\tstate.setDepthWrite( true );\n\t\t\tstate.setColorWrite( true );\n\t\n\t\t\t// _gl.finish();\n\t\n\t\t};\n\t\n\t\tfunction pushRenderItem( object, geometry, material, z, group ) {\n\t\n\t\t\tvar array, index;\n\t\n\t\t\t// allocate the next position in the appropriate array\n\t\n\t\t\tif ( material.transparent ) {\n\t\n\t\t\t\tarray = transparentObjects;\n\t\t\t\tindex = ++ transparentObjectsLastIndex;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tarray = opaqueObjects;\n\t\t\t\tindex = ++ opaqueObjectsLastIndex;\n\t\n\t\t\t}\n\t\n\t\t\t// recycle existing render item or grow the array\n\t\n\t\t\tvar renderItem = array[ index ];\n\t\n\t\t\tif ( renderItem !== undefined ) {\n\t\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.z = _vector3.z;\n\t\t\t\trenderItem.group = group;\n\t\n\t\t\t} else {\n\t\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tz: _vector3.z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\t\n\t\t\t\t// assert( index === array.length );\n\t\t\t\tarray.push( renderItem );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// TODO Duplicated code (Frustum)\n\t\n\t\tfunction isObjectViewable( object ) {\n\t\n\t\t\tvar geometry = object.geometry;\n\t\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\t\n\t\t\t_sphere.copy( geometry.boundingSphere ).\n\t\t\t\tapplyMatrix4( object.matrixWorld );\n\t\n\t\t\treturn isSphereViewable( _sphere );\n\t\n\t\t}\n\t\n\t\tfunction isSpriteViewable( sprite ) {\n\t\n\t\t\t_sphere.center.set( 0, 0, 0 );\n\t\t\t_sphere.radius = 0.7071067811865476;\n\t\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\t\n\t\t\treturn isSphereViewable( _sphere );\n\t\n\t\t}\n\t\n\t\tfunction isSphereViewable( sphere ) {\n\t\n\t\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\t\n\t\t\tvar numPlanes = _clipping.numPlanes;\n\t\n\t\t\tif ( numPlanes === 0 ) return true;\n\t\n\t\t\tvar planes = _this.clippingPlanes,\n\t\n\t\t\t\tcenter = sphere.center,\n\t\t\t\tnegRad = - sphere.radius,\n\t\t\t\ti = 0;\n\t\n\t\t\tdo {\n\t\n\t\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\t\n\t\t\t} while ( ++ i !== numPlanes );\n\t\n\t\t\treturn true;\n\t\n\t\t}\n\t\n\t\tfunction projectObject( object, camera ) {\n\t\n\t\t\tif ( object.visible === false ) return;\n\t\n\t\t\tif ( object.layers.test( camera.layers ) ) {\n\t\n\t\t\t\tif ( object instanceof THREE.Light ) {\n\t\n\t\t\t\t\tlights.push( object );\n\t\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\t\n\t\t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\t\n\t\t\t\t\t\tsprites.push( object );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( object instanceof THREE.LensFlare ) {\n\t\n\t\t\t\t\tlensFlares.push( object );\n\t\n\t\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject ) {\n\t\n\t\t\t\t\tif ( _this.sortObjects === true ) {\n\t\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\t\n\t\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\n\t\n\t\t\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\n\t\n\t\t\t\t\t\tobject.skeleton.update();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\t\n\t\t\t\t\t\tvar material = object.material;\n\t\n\t\t\t\t\t\tif ( material.visible === true ) {\n\t\n\t\t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\t\n\t\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\n\t\t\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\n\t\n\t\t\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\t\t\tvar materials = material.materials;\n\t\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\t\n\t\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\t\n\t\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\t\n\t\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar children = object.children;\n\t\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t\t\t\tprojectObject( children[ i ], camera );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\t\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar renderItem = renderList[ i ];\n\t\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\t\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\t\n\t\t\t\tif ( object instanceof THREE.ImmediateRenderObject ) {\n\t\n\t\t\t\t\tsetMaterial( material );\n\t\n\t\t\t\t\tvar program = setProgram( camera, fog, material, object );\n\t\n\t\t\t\t\t_currentGeometryProgram = '';\n\t\n\t\t\t\t\tobject.render( function ( object ) {\n\t\n\t\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\t\n\t\t\t\t\t} );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction initMaterial( material, fog, object ) {\n\t\n\t\t\tvar materialProperties = properties.get( material );\n\t\n\t\t\tvar parameters = programCache.getParameters(\n\t\t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\t\n\t\t\tvar code = programCache.getProgramCode( material, parameters );\n\t\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\t\n\t\t\tif ( program === undefined ) {\n\t\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\t\n\t\t\t} else if ( program.code !== code ) {\n\t\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\t\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\t\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\t\n\t\t\t}\n\t\n\t\t\tif ( programChange ) {\n\t\n\t\t\t\tif ( parameters.shaderID ) {\n\t\n\t\t\t\t\tvar shader = THREE.ShaderLib[ parameters.shaderID ];\n\t\n\t\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t\t};\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t\t};\n\t\n\t\t\t\t}\n\t\n\t\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\t\n\t\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\t\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterial.program = program;\n\t\n\t\t\t}\n\t\n\t\t\tvar attributes = program.getAttributes();\n\t\n\t\t\tif ( material.morphTargets ) {\n\t\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\t\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\t\n\t\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\t\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.morphNormals ) {\n\t\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\t\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\t\n\t\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\t\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\t\n\t\t\tif ( ! ( material instanceof THREE.ShaderMaterial ) &&\n\t\t\t\t\t! ( material instanceof THREE.RawShaderMaterial ) ||\n\t\t\t\t\tmaterial.clipping === true ) {\n\t\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.lights ) {\n\t\n\t\t\t\t// store the light setup it was created for\n\t\n\t\t\t\tmaterialProperties.lightsHash = _lights.hash;\n\t\n\t\t\t\t// wire up the material to this renderer's lighting state\n\t\n\t\t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n\t\t\t\tuniforms.directionalLights.value = _lights.directional;\n\t\t\t\tuniforms.spotLights.value = _lights.spot;\n\t\t\t\tuniforms.pointLights.value = _lights.point;\n\t\t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\t\n\t\t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\t\n\t\t\t}\n\t\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\t\tTHREE.WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\t\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t\tmaterialProperties.dynamicUniforms =\n\t\t\t\t\tTHREE.WebGLUniforms.splitDynamic( uniformsList, uniforms );\n\t\n\t\t}\n\t\n\t\tfunction setMaterial( material ) {\n\t\n\t\t\tif ( material.side !== THREE.DoubleSide )\n\t\t\t\tstate.enable( _gl.CULL_FACE );\n\t\t\telse\n\t\t\t\tstate.disable( _gl.CULL_FACE );\n\t\n\t\t\tstate.setFlipSided( material.side === THREE.BackSide );\n\t\n\t\t\tif ( material.transparent === true ) {\n\t\n\t\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tstate.setBlending( THREE.NoBlending );\n\t\n\t\t\t}\n\t\n\t\t\tstate.setDepthFunc( material.depthFunc );\n\t\t\tstate.setDepthTest( material.depthTest );\n\t\t\tstate.setDepthWrite( material.depthWrite );\n\t\t\tstate.setColorWrite( material.colorWrite );\n\t\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\t\n\t\t}\n\t\n\t\tfunction setProgram( camera, fog, material, object ) {\n\t\n\t\t\t_usedTextureUnits = 0;\n\t\n\t\t\tvar materialProperties = properties.get( material );\n\t\n\t\t\tif ( _clippingEnabled ) {\n\t\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\t\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\t\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n\t\t\t\t\t\t\tcamera, materialProperties, useCache );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\t\n\t\t\t\t\tmaterial.needsUpdate = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( materialProperties.program === undefined ) {\n\t\n\t\t\t\tmaterial.needsUpdate = true;\n\t\n\t\t\t}\n\t\n\t\t\tif ( materialProperties.lightsHash !== undefined &&\n\t\t\t\tmaterialProperties.lightsHash !== _lights.hash ) {\n\t\n\t\t\t\tmaterial.needsUpdate = true;\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.needsUpdate ) {\n\t\n\t\t\t\tinitMaterial( material, fog, object );\n\t\t\t\tmaterial.needsUpdate = false;\n\t\n\t\t\t}\n\t\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\t\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\t\n\t\t\tif ( program.id !== _currentProgram ) {\n\t\n\t\t\t\t_gl.useProgram( program.program );\n\t\t\t\t_currentProgram = program.id;\n\t\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\t\n\t\t\t\t_currentMaterialId = material.id;\n\t\n\t\t\t\trefreshMaterial = true;\n\t\n\t\t\t}\n\t\n\t\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\t\n\t\t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\t\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\t\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\t\n\t\t\t\t}\n\t\n\t\n\t\t\t\tif ( camera !== _currentCamera ) {\n\t\n\t\t\t\t\t_currentCamera = camera;\n\t\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\t\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\t\n\t\t\t\tif ( material instanceof THREE.ShaderMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t\t material.envMap ) {\n\t\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\t\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\t\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t\t material instanceof THREE.ShaderMaterial ||\n\t\t\t\t\t material.skinning ) {\n\t\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n\t\t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\t\n\t\t\t}\n\t\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// not sure why, but otherwise weird things happen\n\t\n\t\t\tif ( material.skinning ) {\n\t\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\t\n\t\t\t\tvar skeleton = object.skeleton;\n\t\n\t\t\t\tif ( skeleton ) {\n\t\n\t\t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\t\n\t\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n\t\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n\t\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( refreshMaterial ) {\n\t\n\t\t\t\tif ( material.lights ) {\n\t\n\t\t\t\t\t// the current material requires lighting info\n\t\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\t\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// refresh uniforms common to several materials\n\t\n\t\t\t\tif ( fog && material.fog ) {\n\t\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t\t material instanceof THREE.MeshDepthMaterial ) {\n\t\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// refresh single material specific uniforms\n\t\n\t\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\t\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\n\t\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\t\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\t\n\t\t\t\t} else if ( material instanceof THREE.PointsMaterial ) {\n\t\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\t\n\t\t\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\n\t\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\t\n\t\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\n\t\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\t\n\t\t\t\t} else if ( material instanceof THREE.MeshPhysicalMaterial ) {\n\t\n\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\t\n\t\t\t\t} else if ( material instanceof THREE.MeshStandardMaterial ) {\n\t\n\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\t\n\t\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\n\t\n\t\t\t\t\tif ( material.displacementMap ) {\n\t\n\t\t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n\t\t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n\t\t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\t\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tTHREE.WebGLUniforms.upload(\n\t\t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\t\n\t\t\t}\n\t\n\t\n\t\t\t// common matrices\n\t\n\t\t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n\t\t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\t\n\t\n\t\t\t// dynamic uniforms\n\t\n\t\t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\t\n\t\t\tif ( dynUniforms !== null ) {\n\t\n\t\t\t\tTHREE.WebGLUniforms.evalDynamic(\n\t\t\t\t\t\tdynUniforms, m_uniforms, object, camera );\n\t\n\t\t\t\tTHREE.WebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\t\n\t\t\t}\n\t\n\t\t\treturn program;\n\t\n\t\t}\n\t\n\t\t// Uniforms (refresh uniforms objects)\n\t\n\t\tfunction refreshUniformsCommon ( uniforms, material ) {\n\t\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\n\t\t\tuniforms.diffuse.value = material.color;\n\t\n\t\t\tif ( material.emissive ) {\n\t\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\t\n\t\t\t}\n\t\n\t\t\tuniforms.map.value = material.map;\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\n\t\t\tif ( material.aoMap ) {\n\t\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\n\t\t\t}\n\t\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\t\n\t\t\tvar uvScaleMap;\n\t\n\t\t\tif ( material.map ) {\n\t\n\t\t\t\tuvScaleMap = material.map;\n\t\n\t\t\t} else if ( material.specularMap ) {\n\t\n\t\t\t\tuvScaleMap = material.specularMap;\n\t\n\t\t\t} else if ( material.displacementMap ) {\n\t\n\t\t\t\tuvScaleMap = material.displacementMap;\n\t\n\t\t\t} else if ( material.normalMap ) {\n\t\n\t\t\t\tuvScaleMap = material.normalMap;\n\t\n\t\t\t} else if ( material.bumpMap ) {\n\t\n\t\t\t\tuvScaleMap = material.bumpMap;\n\t\n\t\t\t} else if ( material.roughnessMap ) {\n\t\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\n\t\t\t} else if ( material.metalnessMap ) {\n\t\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\n\t\t\t} else if ( material.alphaMap ) {\n\t\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\n\t\t\t} else if ( material.emissiveMap ) {\n\t\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\n\t\t\t}\n\t\n\t\t\tif ( uvScaleMap !== undefined ) {\n\t\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap instanceof THREE.WebGLRenderTarget ) {\n\t\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar offset = uvScaleMap.offset;\n\t\t\t\tvar repeat = uvScaleMap.repeat;\n\t\n\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\t\n\t\t\t}\n\t\n\t\t\tuniforms.envMap.value = material.envMap;\n\t\n\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap instanceof THREE.CubeTexture ) ) ? 1 : - 1;\n\t\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\t\n\t\t}\n\t\n\t\tfunction refreshUniformsLine ( uniforms, material ) {\n\t\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\n\t\t}\n\t\n\t\tfunction refreshUniformsDash ( uniforms, material ) {\n\t\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\t\n\t\t}\n\t\n\t\tfunction refreshUniformsPoints ( uniforms, material ) {\n\t\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\t\n\t\t\tuniforms.map.value = material.map;\n\t\n\t\t\tif ( material.map !== null ) {\n\t\n\t\t\t\tvar offset = material.map.offset;\n\t\t\t\tvar repeat = material.map.repeat;\n\t\n\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction refreshUniformsFog ( uniforms, fog ) {\n\t\n\t\t\tuniforms.fogColor.value = fog.color;\n\t\n\t\t\tif ( fog instanceof THREE.Fog ) {\n\t\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\t\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction refreshUniformsLambert ( uniforms, material ) {\n\t\n\t\t\tif ( material.lightMap ) {\n\t\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.emissiveMap ) {\n\t\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction refreshUniformsPhong ( uniforms, material ) {\n\t\n\t\t\tuniforms.specular.value = material.specular;\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\t\n\t\t\tif ( material.lightMap ) {\n\t\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.emissiveMap ) {\n\t\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.bumpMap ) {\n\t\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.normalMap ) {\n\t\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.displacementMap ) {\n\t\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction refreshUniformsStandard ( uniforms, material ) {\n\t\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\t\n\t\t\tif ( material.roughnessMap ) {\n\t\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.metalnessMap ) {\n\t\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.lightMap ) {\n\t\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.emissiveMap ) {\n\t\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.bumpMap ) {\n\t\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.normalMap ) {\n\t\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.displacementMap ) {\n\t\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.envMap ) {\n\t\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction refreshUniformsPhysical ( uniforms, material ) {\n\t\n\t\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\t\n\t\t\trefreshUniformsStandard( uniforms, material );\n\t\n\t\t}\n\t\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\t\n\t\tfunction markUniformsLightsNeedsUpdate ( uniforms, value ) {\n\t\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\n\t\t}\n\t\n\t\t// Lighting\n\t\n\t\tfunction setupShadows ( lights ) {\n\t\n\t\t\tvar lightShadowsLength = 0;\n\t\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar light = lights[ i ];\n\t\n\t\t\t\tif ( light.castShadow ) {\n\t\n\t\t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t_lights.shadows.length = lightShadowsLength;\n\t\n\t\t}\n\t\n\t\tfunction setupLights ( lights, camera ) {\n\t\n\t\t\tvar l, ll, light,\n\t\t\tr = 0, g = 0, b = 0,\n\t\t\tcolor,\n\t\t\tintensity,\n\t\t\tdistance,\n\t\t\tshadowMap,\n\t\n\t\t\tviewMatrix = camera.matrixWorldInverse,\n\t\n\t\t\tdirectionalLength = 0,\n\t\t\tpointLength = 0,\n\t\t\tspotLength = 0,\n\t\t\themiLength = 0;\n\t\n\t\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\t\n\t\t\t\tlight = lights[ l ];\n\t\n\t\t\t\tcolor = light.color;\n\t\t\t\tintensity = light.intensity;\n\t\t\t\tdistance = light.distance;\n\t\n\t\t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\t\n\t\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\t\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\t\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\t\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t\t\t\t\tif ( light.castShadow ) {\n\t\n\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\t\n\t\t\t\t} else if ( light instanceof THREE.SpotLight ) {\n\t\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\t\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\t\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\t\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t\t\t\t\tif ( light.castShadow ) {\n\t\n\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\t\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\t\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\t\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\t\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\t\n\t\t\t\t\tif ( light.castShadow ) {\n\t\n\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\t\n\t\t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\t\n\t\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new THREE.Matrix4();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t\t// equal to inverse of the light's position\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\t\n\t\t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\t\n\t\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\n\t\n\t\t\t\t\tvar uniforms = lightCache.get( light );\n\t\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\t\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\t\n\t\t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t_lights.ambient[ 0 ] = r;\n\t\t\t_lights.ambient[ 1 ] = g;\n\t\t\t_lights.ambient[ 2 ] = b;\n\t\n\t\t\t_lights.directional.length = directionalLength;\n\t\t\t_lights.spot.length = spotLength;\n\t\t\t_lights.point.length = pointLength;\n\t\t\t_lights.hemi.length = hemiLength;\n\t\n\t\t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\t\n\t\t}\n\t\n\t\t// GL state setting\n\t\n\t\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\t\n\t\t\tstate.setCullFace( cullFace );\n\t\t\tstate.setFlipSided( frontFaceDirection === THREE.FrontFaceDirectionCW );\n\t\n\t\t};\n\t\n\t\t// Textures\n\t\n\t\tfunction allocTextureUnit() {\n\t\n\t\t\tvar textureUnit = _usedTextureUnits;\n\t\n\t\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\t\n\t\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\t\n\t\t\t}\n\t\n\t\t\t_usedTextureUnits += 1;\n\t\n\t\t\treturn textureUnit;\n\t\n\t\t}\n\t\n\t\tthis.allocTextureUnit = allocTextureUnit;\n\t\n\t\t// this.setTexture2D = setTexture2D;\n\t\tthis.setTexture2D = ( function() {\n\t\n\t\t\tvar warned = false;\n\t\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\treturn function setTexture2D( texture, slot ) {\n\t\n\t\t\t\tif ( texture instanceof THREE.WebGLRenderTarget ) {\n\t\n\t\t\t\t\tif ( ! warned ) {\n\t\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttexture = texture.texture;\n\t\n\t\t\t\t}\n\t\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\t\n\t\t\t};\n\t\n\t\t}() );\n\t\n\t\tthis.setTexture = ( function() {\n\t\n\t\t\tvar warned = false;\n\t\n\t\t\treturn function setTexture( texture, slot ) {\n\t\n\t\t\t\tif ( ! warned ) {\n\t\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\t\twarned = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\t\n\t\t\t};\n\t\n\t\t}() );\n\t\n\t\tthis.setTextureCube = ( function() {\n\t\n\t\t\tvar warned = false;\n\t\n\t\t\treturn function setTextureCube( texture, slot ) {\n\t\n\t\t\t\t// backwards compatibility: peel texture.texture\n\t\t\t\tif ( texture instanceof THREE.WebGLRenderTargetCube ) {\n\t\n\t\t\t\t\tif ( ! warned ) {\n\t\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttexture = texture.texture;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t\t// TODO: unify these code paths\n\t\t\t\tif ( texture instanceof THREE.CubeTexture ||\n\t\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\t\n\t\t\t\t\t// CompressedTexture can have Array in image :/\n\t\n\t\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\t\ttextures.setTextureCube( texture, slot );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\t\n\t\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\t}() );\n\t\n\t\tthis.getCurrentRenderTarget = function() {\n\t\n\t\t\treturn _currentRenderTarget;\n\t\n\t\t};\n\t\n\t\tthis.setRenderTarget = function ( renderTarget ) {\n\t\n\t\t\t_currentRenderTarget = renderTarget;\n\t\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\t\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\t\n\t\t\t}\n\t\n\t\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\t\tvar framebuffer;\n\t\n\t\t\tif ( renderTarget ) {\n\t\n\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\n\t\t\t\tif ( isCube ) {\n\t\n\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tframebuffer = null;\n\t\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t\t_currentScissorTest = _scissorTest;\n\t\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\t\n\t\t\t}\n\t\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\t\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\t\n\t\t\t}\n\t\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\t\n\t\t\tstate.viewport( _currentViewport );\n\t\n\t\t\tif ( isCube ) {\n\t\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\t\n\t\t\tif ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {\n\t\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\t\n\t\t\tif ( framebuffer ) {\n\t\n\t\t\t\tvar restore = false;\n\t\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\t\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\n\t\t\t\t\trestore = true;\n\t\n\t\t\t\t}\n\t\n\t\t\t\ttry {\n\t\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\n\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\t\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( texture.type !== THREE.UnsignedByteType &&\n\t\t\t\t\t     paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) &&\n\t\t\t\t\t     ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) ) &&\n\t\t\t\t\t     ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\t\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\t\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\t\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} finally {\n\t\n\t\t\t\t\tif ( restore ) {\n\t\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// Map three.js constants to WebGL constants\n\t\n\t\tfunction paramThreeToGL ( p ) {\n\t\n\t\t\tvar extension;\n\t\n\t\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\n\t\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\t\n\t\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\n\t\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\t\n\t\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\n\t\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\t\n\t\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\t\n\t\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\n\t\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\n\t\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t\t\tif ( p === THREE.IntType ) return _gl.INT;\n\t\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\n\t\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\t\n\t\t\tif ( extension !== null ) {\n\t\n\t\t\t\tif ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;\n\t\n\t\t\t}\n\t\n\t\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\n\t\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\n\t\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\n\t\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\n\t\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\t\t\tif ( p === THREE.DepthFormat ) return _gl.DEPTH_COMPONENT;\n\t\n\t\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\n\t\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\t\n\t\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\n\t\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\n\t\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\n\t\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\n\t\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\t\n\t\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\n\t\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\t\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\n\t\t\tif ( extension !== null ) {\n\t\n\t\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\n\t\t\t}\n\t\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t\n\t\t\tif ( extension !== null ) {\n\t\n\t\t\t\tif ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\n\t\t\t}\n\t\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\t\n\t\t\tif ( extension !== null ) {\n\t\n\t\t\t\tif ( p === THREE.RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\n\t\t\t}\n\t\n\t\t\textension = extensions.get( 'EXT_blend_minmax' );\n\t\n\t\t\tif ( extension !== null ) {\n\t\n\t\t\t\tif ( p === THREE.MinEquation ) return extension.MIN_EXT;\n\t\t\t\tif ( p === THREE.MaxEquation ) return extension.MAX_EXT;\n\t\n\t\t\t}\n\t\n\t\t\treturn 0;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/renderers/WebGLRenderTarget.js\n\t\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\t\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tTHREE.WebGLRenderTarget = function ( width, height, options ) {\n\t\n\t\tthis.uuid = THREE.Math.generateUUID();\n\t\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\n\t\tthis.scissor = new THREE.Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\t\n\t\tthis.viewport = new THREE.Vector4( 0, 0, width, height );\n\t\n\t\toptions = options || {};\n\t\n\t\tif ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;\n\t\n\t\tthis.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = null;\n\t\n\t};\n\t\n\tObject.assign( THREE.WebGLRenderTarget.prototype, THREE.EventDispatcher.prototype, {\n\t\n\t\tsetSize: function ( width, height ) {\n\t\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\t\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\n\t\t\t\tthis.dispose();\n\t\n\t\t\t}\n\t\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\t\n\t\t},\n\t\n\t\tclone: function () {\n\t\n\t\t\treturn new this.constructor().copy( this );\n\t\n\t\t},\n\t\n\t\tcopy: function ( source ) {\n\t\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\n\t\t\tthis.viewport.copy( source.viewport );\n\t\n\t\t\tthis.texture = source.texture.clone();\n\t\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\n\t\t\treturn this;\n\t\n\t\t},\n\t\n\t\tdispose: function () {\n\t\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/renderers/WebGLRenderTargetCube.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t */\n\t\n\tTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\n\t\n\t\tTHREE.WebGLRenderTarget.call( this, width, height, options );\n\t\n\t\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\t\tthis.activeMipMapLevel = 0;\n\t\n\t};\n\t\n\tTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\n\tTHREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;\n\t\n\t// File:src/renderers/webgl/WebGLBufferRenderer.js\n\t\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\t\n\tTHREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {\n\t\n\t\tvar mode;\n\t\n\t\tfunction setMode( value ) {\n\t\n\t\t\tmode = value;\n\t\n\t\t}\n\t\n\t\tfunction render( start, count ) {\n\t\n\t\t\t_gl.drawArrays( mode, start, count );\n\t\n\t\t\t_infoRender.calls ++;\n\t\t\t_infoRender.vertices += count;\n\t\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\n\t\n\t\t}\n\t\n\t\tfunction renderInstances( geometry ) {\n\t\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t\t\tif ( extension === null ) {\n\t\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tvar position = geometry.attributes.position;\n\t\n\t\t\tvar count = 0;\n\t\n\t\t\tif ( position instanceof THREE.InterleavedBufferAttribute ) {\n\t\n\t\t\t\tcount = position.data.count;\n\t\n\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tcount = position.count;\n\t\n\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\t\n\t\t\t}\n\t\n\t\t\t_infoRender.calls ++;\n\t\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\n\t\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\n\t\t}\n\t\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t\n\t};\n\t\n\t// File:src/renderers/webgl/WebGLClipping.js\n\t\n\tTHREE.WebGLClipping = function() {\n\t\n\t\tvar scope = this,\n\t\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\t\n\t\t\tplane = new THREE.Plane(),\n\t\t\tviewNormalMatrix = new THREE.Matrix3(),\n\t\n\t\t\tuniform = { value: null, needsUpdate: false };\n\t\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\n\t\tthis.init = function( planes, enableLocalClipping, camera ) {\n\t\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\t\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\t\n\t\t\treturn enabled;\n\t\n\t\t};\n\t\n\t\tthis.beginShadows = function() {\n\t\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\t\n\t\t};\n\t\n\t\tthis.endShadows = function() {\n\t\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\t\n\t\t};\n\t\n\t\tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\t\n\t\t\tif ( ! localClippingEnabled ||\n\t\t\t\t\tplanes === null || planes.length === 0 ||\n\t\t\t\t\trenderingShadows && ! clipShadows ) {\n\t\t\t\t// there's no local clipping\n\t\n\t\t\t\tif ( renderingShadows ) {\n\t\t\t\t\t// there's no global clipping\n\t\n\t\t\t\t\tprojectPlanes( null );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\t\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\t\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\t\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\t\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\t\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numPlanes += nGlobal;\n\t\n\t\t\t}\n\t\n\t\n\t\t};\n\t\n\t\tfunction resetGlobalState() {\n\t\n\t\t\tif ( uniform.value !== globalState ) {\n\t\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\n\t\t\t}\n\t\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\n\t\t}\n\t\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\t\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\t\n\t\t\tif ( nPlanes !== 0 ) {\n\t\n\t\t\t\tdstArray = uniform.value;\n\t\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\t\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\t\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\t\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset;\n\t\t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\t\n\t\t\t\t\t\tplane.copy( planes[ i ] ).\n\t\t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\t\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\t\n\t\t\t}\n\t\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\treturn dstArray;\n\t\n\t\t}\n\t\n\t};\n\t\n\t\n\t// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\n\t\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\t\n\tTHREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {\n\t\n\t\tvar mode;\n\t\n\t\tfunction setMode( value ) {\n\t\n\t\t\tmode = value;\n\t\n\t\t}\n\t\n\t\tvar type, size;\n\t\n\t\tfunction setIndex( index ) {\n\t\n\t\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\t\n\t\t\t\ttype = _gl.UNSIGNED_INT;\n\t\t\t\tsize = 4;\n\t\n\t\t\t} else {\n\t\n\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\t\t\tsize = 2;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction render( start, count ) {\n\t\n\t\t\t_gl.drawElements( mode, count, type, start * size );\n\t\n\t\t\t_infoRender.calls ++;\n\t\t\t_infoRender.vertices += count;\n\t\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\n\t\n\t\t}\n\t\n\t\tfunction renderInstances( geometry, start, count ) {\n\t\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t\t\tif ( extension === null ) {\n\t\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\t\n\t\t\t_infoRender.calls ++;\n\t\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\n\t\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t\t}\n\t\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t\n\t};\n\t\n\t// File:src/renderers/webgl/WebGLExtensions.js\n\t\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\t\n\tTHREE.WebGLExtensions = function ( gl ) {\n\t\n\t\tvar extensions = {};\n\t\n\t\tthis.get = function ( name ) {\n\t\n\t\t\tif ( extensions[ name ] !== undefined ) {\n\t\n\t\t\t\treturn extensions[ name ];\n\t\n\t\t\t}\n\t\n\t\t\tvar extension;\n\t\n\t\t\tswitch ( name ) {\n\t\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension( name );\n\t\n\t\t\t}\n\t\n\t\t\tif ( extension === null ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\t\n\t\t\t}\n\t\n\t\t\textensions[ name ] = extension;\n\t\n\t\t\treturn extension;\n\t\n\t\t};\n\t\n\t};\n\t\n\t// File:src/renderers/webgl/WebGLCapabilities.js\n\t\n\tTHREE.WebGLCapabilities = function ( gl, extensions, parameters ) {\n\t\n\t\tvar maxAnisotropy;\n\t\n\t\tfunction getMaxAnisotropy() {\n\t\n\t\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\t\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\n\t\t\tif ( extension !== null ) {\n\t\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tmaxAnisotropy = 0;\n\t\n\t\t\t}\n\t\n\t\t\treturn maxAnisotropy;\n\t\n\t\t}\n\t\n\t\tfunction getMaxPrecision( precision ) {\n\t\n\t\t\tif ( precision === 'highp' ) {\n\t\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\t\n\t\t\t\t\treturn 'highp';\n\t\n\t\t\t\t}\n\t\n\t\t\t\tprecision = 'mediump';\n\t\n\t\t\t}\n\t\n\t\t\tif ( precision === 'mediump' ) {\n\t\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\t\n\t\t\t\t\treturn 'mediump';\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn 'lowp';\n\t\n\t\t}\n\t\n\t\tthis.getMaxAnisotropy = getMaxAnisotropy;\n\t\tthis.getMaxPrecision = getMaxPrecision;\n\t\n\t\tthis.precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tthis.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\n\t\n\t\tthis.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\tthis.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\t\tthis.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\t\tthis.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\t\n\t\tthis.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tthis.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\t\tthis.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\t\tthis.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\t\n\t\tthis.vertexTextures = this.maxVertexTextures > 0;\n\t\tthis.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\t\tthis.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\n\t\n\t\tvar _maxPrecision = getMaxPrecision( this.precision );\n\t\n\t\tif ( _maxPrecision !== this.precision ) {\n\t\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );\n\t\t\tthis.precision = _maxPrecision;\n\t\n\t\t}\n\t\n\t\tif ( this.logarithmicDepthBuffer ) {\n\t\n\t\t\tthis.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/renderers/webgl/WebGLGeometries.js\n\t\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\t\n\tTHREE.WebGLGeometries = function ( gl, properties, info ) {\n\t\n\t\tvar geometries = {};\n\t\n\t\tfunction get( object ) {\n\t\n\t\t\tvar geometry = object.geometry;\n\t\n\t\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\t\n\t\t\t\treturn geometries[ geometry.id ];\n\t\n\t\t\t}\n\t\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\t\n\t\t\tvar buffergeometry;\n\t\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\tbuffergeometry = geometry;\n\t\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\t\n\t\t\t\t\tgeometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\t\n\t\t\t}\n\t\n\t\t\tgeometries[ geometry.id ] = buffergeometry;\n\t\n\t\t\tinfo.memory.geometries ++;\n\t\n\t\t\treturn buffergeometry;\n\t\n\t\t}\n\t\n\t\tfunction onGeometryDispose( event ) {\n\t\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\n\t\n\t\t\tif ( buffergeometry.index !== null ) {\n\t\n\t\t\t\tdeleteAttribute( buffergeometry.index );\n\t\n\t\t\t}\n\t\n\t\t\tdeleteAttributes( buffergeometry.attributes );\n\t\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\t\n\t\t\tdelete geometries[ geometry.id ];\n\t\n\t\t\t// TODO\n\t\n\t\t\tvar property = properties.get( geometry );\n\t\n\t\t\tif ( property.wireframe ) {\n\t\n\t\t\t\tdeleteAttribute( property.wireframe );\n\t\n\t\t\t}\n\t\n\t\t\tproperties.delete( geometry );\n\t\n\t\t\tvar bufferproperty = properties.get( buffergeometry );\n\t\n\t\t\tif ( bufferproperty.wireframe ) {\n\t\n\t\t\t\tdeleteAttribute( bufferproperty.wireframe );\n\t\n\t\t\t}\n\t\n\t\t\tproperties.delete( buffergeometry );\n\t\n\t\t\t//\n\t\n\t\t\tinfo.memory.geometries --;\n\t\n\t\t}\n\t\n\t\tfunction getAttributeBuffer( attribute ) {\n\t\n\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\t\n\t\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\t\n\t\t\t}\n\t\n\t\t\treturn properties.get( attribute ).__webglBuffer;\n\t\n\t\t}\n\t\n\t\tfunction deleteAttribute( attribute ) {\n\t\n\t\t\tvar buffer = getAttributeBuffer( attribute );\n\t\n\t\t\tif ( buffer !== undefined ) {\n\t\n\t\t\t\tgl.deleteBuffer( buffer );\n\t\t\t\tremoveAttributeBuffer( attribute );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction deleteAttributes( attributes ) {\n\t\n\t\t\tfor ( var name in attributes ) {\n\t\n\t\t\t\tdeleteAttribute( attributes[ name ] );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction removeAttributeBuffer( attribute ) {\n\t\n\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\t\n\t\t\t\tproperties.delete( attribute.data );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tproperties.delete( attribute );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tthis.get = get;\n\t\n\t};\n\t\n\t// File:src/renderers/webgl/WebGLLights.js\n\t\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\t\n\tTHREE.WebGLLights = function () {\n\t\n\t\tvar lights = {};\n\t\n\t\tthis.get = function ( light ) {\n\t\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\t\n\t\t\t\treturn lights[ light.id ];\n\t\n\t\t\t}\n\t\n\t\t\tvar uniforms;\n\t\n\t\t\tswitch ( light.type ) {\n\t\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\t\tcolor: new THREE.Color(),\n\t\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new THREE.Vector3(),\n\t\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\t\tcolor: new THREE.Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0,\n\t\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new THREE.Vector3(),\n\t\t\t\t\t\tcolor: new THREE.Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0,\n\t\n\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\t\tskyColor: new THREE.Color(),\n\t\t\t\t\t\tgroundColor: new THREE.Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\n\t\t\t}\n\t\n\t\t\tlights[ light.id ] = uniforms;\n\t\n\t\t\treturn uniforms;\n\t\n\t\t};\n\t\n\t};\n\t\n\t// File:src/renderers/webgl/WebGLObjects.js\n\t\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\t\n\tTHREE.WebGLObjects = function ( gl, properties, info ) {\n\t\n\t\tvar geometries = new THREE.WebGLGeometries( gl, properties, info );\n\t\n\t\t//\n\t\n\t\tfunction update( object ) {\n\t\n\t\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\t\n\t\t\tvar geometry = geometries.get( object );\n\t\n\t\t\tif ( object.geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\tgeometry.updateFromObject( object );\n\t\n\t\t\t}\n\t\n\t\t\tvar index = geometry.index;\n\t\t\tvar attributes = geometry.attributes;\n\t\n\t\t\tif ( index !== null ) {\n\t\n\t\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var name in attributes ) {\n\t\n\t\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\t\n\t\t\t}\n\t\n\t\t\t// morph targets\n\t\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\n\t\t\tfor ( var name in morphAttributes ) {\n\t\n\t\t\t\tvar array = morphAttributes[ name ];\n\t\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn geometry;\n\t\n\t\t}\n\t\n\t\tfunction updateAttribute( attribute, bufferType ) {\n\t\n\t\t\tvar data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;\n\t\n\t\t\tvar attributeProperties = properties.get( data );\n\t\n\t\t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\t\n\t\t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\t\n\t\t\t} else if ( attributeProperties.version !== data.version ) {\n\t\n\t\t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction createBuffer( attributeProperties, data, bufferType ) {\n\t\n\t\t\tattributeProperties.__webglBuffer = gl.createBuffer();\n\t\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\t\n\t\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\t\n\t\t\tgl.bufferData( bufferType, data.array, usage );\n\t\n\t\t\tattributeProperties.version = data.version;\n\t\n\t\t}\n\t\n\t\tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\t\n\t\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\t\n\t\t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\t\n\t\t\t\t// Not using update ranges\n\t\n\t\t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\t\n\t\t\t} else if ( data.updateRange.count === 0 ) {\n\t\n\t\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\t\n\t\t\t\tdata.updateRange.count = 0; // reset range\n\t\n\t\t\t}\n\t\n\t\t\tattributeProperties.version = data.version;\n\t\n\t\t}\n\t\n\t\tfunction getAttributeBuffer( attribute ) {\n\t\n\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\t\n\t\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\t\n\t\t\t}\n\t\n\t\t\treturn properties.get( attribute ).__webglBuffer;\n\t\n\t\t}\n\t\n\t\tfunction getWireframeAttribute( geometry ) {\n\t\n\t\t\tvar property = properties.get( geometry );\n\t\n\t\t\tif ( property.wireframe !== undefined ) {\n\t\n\t\t\t\treturn property.wireframe;\n\t\n\t\t\t}\n\t\n\t\t\tvar indices = [];\n\t\n\t\t\tvar index = geometry.index;\n\t\t\tvar attributes = geometry.attributes;\n\t\t\tvar position = attributes.position;\n\t\n\t\t\t// console.time( 'wireframe' );\n\t\n\t\t\tif ( index !== null ) {\n\t\n\t\t\t\tvar edges = {};\n\t\t\t\tvar array = index.array;\n\t\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\t\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\t\n\t\t\t\t\tif ( checkEdge( edges, a, b ) ) indices.push( a, b );\n\t\t\t\t\tif ( checkEdge( edges, b, c ) ) indices.push( b, c );\n\t\t\t\t\tif ( checkEdge( edges, c, a ) ) indices.push( c, a );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\tvar array = attributes.position.array;\n\t\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\t\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\t\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// console.timeEnd( 'wireframe' );\n\t\n\t\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n\t\t\tvar attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );\n\t\n\t\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\t\n\t\t\tproperty.wireframe = attribute;\n\t\n\t\t\treturn attribute;\n\t\n\t\t}\n\t\n\t\tfunction checkEdge( edges, a, b ) {\n\t\n\t\t\tif ( a > b ) {\n\t\n\t\t\t\tvar tmp = a;\n\t\t\t\ta = b;\n\t\t\t\tb = tmp;\n\t\n\t\t\t}\n\t\n\t\t\tvar list = edges[ a ];\n\t\n\t\t\tif ( list === undefined ) {\n\t\n\t\t\t\tedges[ a ] = [ b ];\n\t\t\t\treturn true;\n\t\n\t\t\t} else if ( list.indexOf( b ) === -1 ) {\n\t\n\t\t\t\tlist.push( b );\n\t\t\t\treturn true;\n\t\n\t\t\t}\n\t\n\t\t\treturn false;\n\t\n\t\t}\n\t\n\t\tthis.getAttributeBuffer = getAttributeBuffer;\n\t\tthis.getWireframeAttribute = getWireframeAttribute;\n\t\n\t\tthis.update = update;\n\t\n\t};\n\t\n\t// File:src/renderers/webgl/WebGLProgram.js\n\t\n\tTHREE.WebGLProgram = ( function () {\n\t\n\t\tvar programIdCount = 0;\n\t\n\t\tfunction getEncodingComponents( encoding ) {\n\t\n\t\t\tswitch ( encoding ) {\n\t\n\t\t\t\tcase THREE.LinearEncoding:\n\t\t\t\t\treturn [ 'Linear','( value )' ];\n\t\t\t\tcase THREE.sRGBEncoding:\n\t\t\t\t\treturn [ 'sRGB','( value )' ];\n\t\t\t\tcase THREE.RGBEEncoding:\n\t\t\t\t\treturn [ 'RGBE','( value )' ];\n\t\t\t\tcase THREE.RGBM7Encoding:\n\t\t\t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n\t\t\t\tcase THREE.RGBM16Encoding:\n\t\t\t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n\t\t\t\tcase THREE.RGBDEncoding:\n\t\t\t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n\t\t\t\tcase THREE.GammaEncoding:\n\t\t\t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\t\n\t\t\tvar components = getEncodingComponents( encoding );\n\t\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\t\n\t\t}\n\t\n\t\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\t\n\t\t\tvar components = getEncodingComponents( encoding );\n\t\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\t\n\t\t}\n\t\n\t\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\t\n\t\t\tvar toneMappingName;\n\t\n\t\t\tswitch ( toneMapping ) {\n\t\n\t\t\t\tcase THREE.LinearToneMapping:\n\t\t\t\t\ttoneMappingName = \"Linear\";\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase THREE.ReinhardToneMapping:\n\t\t\t\t\ttoneMappingName = \"Reinhard\";\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase THREE.Uncharted2ToneMapping:\n\t\t\t\t\ttoneMappingName = \"Uncharted2\";\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase THREE.CineonToneMapping:\n\t\t\t\t\ttoneMappingName = \"OptimizedCineon\";\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\t\n\t\t\t}\n\t\n\t\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\t\n\t\t}\n\t\n\t\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\t\n\t\t\textensions = extensions || {};\n\t\n\t\t\tvar chunks = [\n\t\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n\t\t\t];\n\t\n\t\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\t\n\t\t}\n\t\n\t\tfunction generateDefines( defines ) {\n\t\n\t\t\tvar chunks = [];\n\t\n\t\t\tfor ( var name in defines ) {\n\t\n\t\t\t\tvar value = defines[ name ];\n\t\n\t\t\t\tif ( value === false ) continue;\n\t\n\t\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\t\n\t\t\t}\n\t\n\t\t\treturn chunks.join( '\\n' );\n\t\n\t\t}\n\t\n\t\tfunction fetchAttributeLocations( gl, program, identifiers ) {\n\t\n\t\t\tvar attributes = {};\n\t\n\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\t\n\t\t\tfor ( var i = 0; i < n; i ++ ) {\n\t\n\t\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\t\tvar name = info.name;\n\t\n\t\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\t\n\t\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\t\n\t\t\t}\n\t\n\t\t\treturn attributes;\n\t\n\t\t}\n\t\n\t\tfunction filterEmptyLine( string ) {\n\t\n\t\t\treturn string !== '';\n\t\n\t\t}\n\t\n\t\tfunction replaceLightNums( string, parameters ) {\n\t\n\t\t\treturn string\n\t\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\t\n\t\t}\n\t\n\t\tfunction parseIncludes( string ) {\n\t\n\t\t\tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\t\n\t\t\tfunction replace( match, include ) {\n\t\n\t\t\t\tvar replace = THREE.ShaderChunk[ include ];\n\t\n\t\t\t\tif ( replace === undefined ) {\n\t\n\t\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn parseIncludes( replace );\n\t\n\t\t\t}\n\t\n\t\t\treturn string.replace( pattern, replace );\n\t\n\t\t}\n\t\n\t\tfunction unrollLoops( string ) {\n\t\n\t\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\t\n\t\t\tfunction replace( match, start, end, snippet ) {\n\t\n\t\t\t\tvar unroll = '';\n\t\n\t\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\t\n\t\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn unroll;\n\t\n\t\t\t}\n\t\n\t\t\treturn string.replace( pattern, replace );\n\t\n\t\t}\n\t\n\t\treturn function WebGLProgram( renderer, code, material, parameters ) {\n\t\n\t\t\tvar gl = renderer.context;\n\t\n\t\t\tvar extensions = material.extensions;\n\t\t\tvar defines = material.defines;\n\t\n\t\t\tvar vertexShader = material.__webglShader.vertexShader;\n\t\t\tvar fragmentShader = material.__webglShader.fragmentShader;\n\t\n\t\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\t\n\t\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\n\t\n\t\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\n\t\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\n\t\n\t\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\n\t\t\t}\n\t\n\t\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\n\t\t\tif ( parameters.envMap ) {\n\t\n\t\t\t\tswitch ( material.envMap.mapping ) {\n\t\n\t\t\t\t\tcase THREE.CubeReflectionMapping:\n\t\t\t\t\tcase THREE.CubeRefractionMapping:\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase THREE.CubeUVReflectionMapping:\n\t\t\t\t\tcase THREE.CubeUVRefractionMapping:\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase THREE.EquirectangularReflectionMapping:\n\t\t\t\t\tcase THREE.EquirectangularRefractionMapping:\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase THREE.SphericalReflectionMapping:\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tswitch ( material.envMap.mapping ) {\n\t\n\t\t\t\t\tcase THREE.CubeRefractionMapping:\n\t\t\t\t\tcase THREE.EquirectangularRefractionMapping:\n\t\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tswitch ( material.combine ) {\n\t\n\t\t\t\t\tcase THREE.MultiplyOperation:\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase THREE.MixOperation:\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\tcase THREE.AddOperation:\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\t\n\t\t\t// console.log( 'building new program ' );\n\t\n\t\t\t//\n\t\n\t\t\tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\t\n\t\t\tvar customDefines = generateDefines( defines );\n\t\n\t\t\t//\n\t\n\t\t\tvar program = gl.createProgram();\n\t\n\t\t\tvar prefixVertex, prefixFragment;\n\t\n\t\t\tif ( material instanceof THREE.RawShaderMaterial ) {\n\t\n\t\t\t\tprefixVertex = [\n\t\n\t\t\t\t\tcustomDefines\n\t\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t\t\t\tprefixFragment = [\n\t\n\t\t\t\t\tcustomDefines\n\t\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tprefixVertex = [\n\t\n\t\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t\t'precision ' + parameters.precision + ' int;',\n\t\n\t\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\t\n\t\t\t\t\tcustomDefines,\n\t\n\t\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\t\n\t\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\t\n\t\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\n\t\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\n\t\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\t\n\t\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\t\n\t\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\t\n\t\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\t\n\t\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\t\n\t\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\t\n\t\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t\t'uniform vec3 cameraPosition;',\n\t\n\t\t\t\t\t'attribute vec3 position;',\n\t\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t\t'attribute vec2 uv;',\n\t\n\t\t\t\t\t'#ifdef USE_COLOR',\n\t\n\t\t\t\t\t'\tattribute vec3 color;',\n\t\n\t\t\t\t\t'#endif',\n\t\n\t\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\t\n\t\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t\t'\tattribute vec3 morphTarget3;',\n\t\n\t\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\t\n\t\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\t\n\t\t\t\t\t'\t#else',\n\t\n\t\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\t\n\t\t\t\t\t'\t#endif',\n\t\n\t\t\t\t\t'#endif',\n\t\n\t\t\t\t\t'#ifdef USE_SKINNING',\n\t\n\t\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t\t'\tattribute vec4 skinWeight;',\n\t\n\t\t\t\t\t'#endif',\n\t\n\t\t\t\t\t'\\n'\n\t\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t\t\t\tprefixFragment = [\n\t\n\t\t\t\t\tcustomExtensions,\n\t\n\t\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t\t'precision ' + parameters.precision + ' int;',\n\t\n\t\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\t\n\t\t\t\t\tcustomDefines,\n\t\n\t\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\t\n\t\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\t\n\t\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\t\n\t\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\n\t\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\t\n\t\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\t\n\t\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\t\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\t\n\t\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\t\n\t\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\t\n\t\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\t\n\t\t\t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\t\n\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t'uniform vec3 cameraPosition;',\n\t\n\t\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? THREE.ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\t\n\t\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? THREE.ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\t\n\t\t\t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\t\n\t\t\t\t\t'\\n'\n\t\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\t\n\t\t\t}\n\t\n\t\t\tvertexShader = parseIncludes( vertexShader, parameters );\n\t\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\n\t\t\tfragmentShader = parseIncludes( fragmentShader, parameters );\n\t\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\n\t\t\tif ( material instanceof THREE.ShaderMaterial === false ) {\n\t\n\t\t\t\tvertexShader = unrollLoops( vertexShader );\n\t\t\t\tfragmentShader = unrollLoops( fragmentShader );\n\t\n\t\t\t}\n\t\n\t\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\t\n\t\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\t\n\t\t\tvar glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t\t\tvar glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\t\n\t\t\tgl.attachShader( program, glVertexShader );\n\t\t\tgl.attachShader( program, glFragmentShader );\n\t\n\t\t\t// Force a particular attribute to index 0.\n\t\n\t\t\tif ( material.index0AttributeName !== undefined ) {\n\t\n\t\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\t\n\t\t\t} else if ( parameters.morphTargets === true ) {\n\t\n\t\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\t\n\t\t\t}\n\t\n\t\t\tgl.linkProgram( program );\n\t\n\t\t\tvar programLog = gl.getProgramInfoLog( program );\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\t\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\t\n\t\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\t\n\t\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\t\n\t\t\t\trunnable = false;\n\t\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\t\n\t\t\t} else if ( programLog !== '' ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\t\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\t\n\t\t\t\thaveDiagnostics = false;\n\t\n\t\t\t}\n\t\n\t\t\tif ( haveDiagnostics ) {\n\t\n\t\t\t\tthis.diagnostics = {\n\t\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tmaterial: material,\n\t\n\t\t\t\t\tprogramLog: programLog,\n\t\n\t\t\t\t\tvertexShader: {\n\t\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\n\t\t\t\t\t},\n\t\n\t\t\t\t\tfragmentShader: {\n\t\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t};\n\t\n\t\t\t}\n\t\n\t\t\t// clean up\n\t\n\t\t\tgl.deleteShader( glVertexShader );\n\t\t\tgl.deleteShader( glFragmentShader );\n\t\n\t\t\t// set up caching for uniform locations\n\t\n\t\t\tvar cachedUniforms;\n\t\n\t\t\tthis.getUniforms = function() {\n\t\n\t\t\t\tif ( cachedUniforms === undefined ) {\n\t\n\t\t\t\t\tcachedUniforms =\n\t\t\t\t\t\t\tnew THREE.WebGLUniforms( gl, program, renderer );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn cachedUniforms;\n\t\n\t\t\t};\n\t\n\t\t\t// set up caching for attribute locations\n\t\n\t\t\tvar cachedAttributes;\n\t\n\t\t\tthis.getAttributes = function() {\n\t\n\t\t\t\tif ( cachedAttributes === undefined ) {\n\t\n\t\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn cachedAttributes;\n\t\n\t\t\t};\n\t\n\t\t\t// free resource\n\t\n\t\t\tthis.destroy = function() {\n\t\n\t\t\t\tgl.deleteProgram( program );\n\t\t\t\tthis.program = undefined;\n\t\n\t\t\t};\n\t\n\t\t\t// DEPRECATED\n\t\n\t\t\tObject.defineProperties( this, {\n\t\n\t\t\t\tuniforms: {\n\t\t\t\t\tget: function() {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\t\t\treturn this.getUniforms();\n\t\n\t\t\t\t\t}\n\t\t\t\t},\n\t\n\t\t\t\tattributes: {\n\t\t\t\t\tget: function() {\n\t\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\t\t\treturn this.getAttributes();\n\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t} );\n\t\n\t\n\t\t\t//\n\t\n\t\t\tthis.id = programIdCount ++;\n\t\t\tthis.code = code;\n\t\t\tthis.usedTimes = 1;\n\t\t\tthis.program = program;\n\t\t\tthis.vertexShader = glVertexShader;\n\t\t\tthis.fragmentShader = glFragmentShader;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t} )();\n\t\n\t// File:src/renderers/webgl/WebGLPrograms.js\n\t\n\tTHREE.WebGLPrograms = function ( renderer, capabilities ) {\n\t\n\t\tvar programs = [];\n\t\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points'\n\t\t};\n\t\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n\t\t];\n\t\n\t\n\t\tfunction allocateBones ( object ) {\n\t\n\t\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\t\n\t\t\t\treturn 1024;\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\t\n\t\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\t\n\t\t\t\tvar maxBones = nVertexMatrices;\n\t\n\t\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\n\t\n\t\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\t\n\t\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\t\n\t\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn maxBones;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\t\n\t\t\tvar encoding;\n\t\n\t\t\tif ( ! map ) {\n\t\n\t\t\t\tencoding = THREE.LinearEncoding;\n\t\n\t\t\t} else if ( map instanceof THREE.Texture ) {\n\t\n\t\t\t\tencoding = map.encoding;\n\t\n\t\t\t} else if ( map instanceof THREE.WebGLRenderTarget ) {\n\t\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\t\n\t\t\t}\n\t\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\t\tif ( encoding === THREE.LinearEncoding && gammaOverrideLinear ) {\n\t\n\t\t\t\tencoding = THREE.GammaEncoding;\n\t\n\t\t\t}\n\t\n\t\t\treturn encoding;\n\t\n\t\t}\n\t\n\t\tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\t\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\t\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\t\n\t\t\tvar maxBones = allocateBones( object );\n\t\t\tvar precision = renderer.getPrecision();\n\t\n\t\t\tif ( material.precision !== null ) {\n\t\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\t\n\t\t\t\tif ( precision !== material.precision ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\t\n\t\t\tvar parameters = {\n\t\n\t\t\t\tshaderID: shaderID,\n\t\n\t\t\t\tprecision: precision,\n\t\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\t\tenvMap: !! material.envMap,\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === THREE.CubeUVReflectionMapping ) || ( material.envMap.mapping === THREE.CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\t\n\t\t\t\tcombine: material.combine,\n\t\n\t\t\t\tvertexColors: material.vertexColors,\n\t\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp: fog instanceof THREE.FogExp2,\n\t\n\t\t\t\tflatShading: material.shading === THREE.FlatShading,\n\t\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\t\n\t\t\t\tskinning: material.skinning,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\t\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\t\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\n\t\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === THREE.DoubleSide,\n\t\t\t\tflipSided: material.side === THREE.BackSide,\n\t\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\t\n\t\t\t};\n\t\n\t\t\treturn parameters;\n\t\n\t\t};\n\t\n\t\tthis.getProgramCode = function ( material, parameters ) {\n\t\n\t\t\tvar array = [];\n\t\n\t\t\tif ( parameters.shaderID ) {\n\t\n\t\t\t\tarray.push( parameters.shaderID );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tarray.push( material.fragmentShader );\n\t\t\t\tarray.push( material.vertexShader );\n\t\n\t\t\t}\n\t\n\t\t\tif ( material.defines !== undefined ) {\n\t\n\t\t\t\tfor ( var name in material.defines ) {\n\t\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( material.defines[ name ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\t\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\t\n\t\t\t}\n\t\n\t\t\treturn array.join();\n\t\n\t\t};\n\t\n\t\tthis.acquireProgram = function ( material, parameters, code ) {\n\t\n\t\t\tvar program;\n\t\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\t\n\t\t\t\tvar programInfo = programs[ p ];\n\t\n\t\t\t\tif ( programInfo.code === code ) {\n\t\n\t\t\t\t\tprogram = programInfo;\n\t\t\t\t\t++ program.usedTimes;\n\t\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( program === undefined ) {\n\t\n\t\t\t\tprogram = new THREE.WebGLProgram( renderer, code, material, parameters );\n\t\t\t\tprograms.push( program );\n\t\n\t\t\t}\n\t\n\t\t\treturn program;\n\t\n\t\t};\n\t\n\t\tthis.releaseProgram = function( program ) {\n\t\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\t\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\t\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\t\n\t};\n\t\n\t// File:src/renderers/webgl/WebGLProperties.js\n\t\n\t/**\n\t* @author fordacious / fordacious.github.io\n\t*/\n\t\n\tTHREE.WebGLProperties = function () {\n\t\n\t\tvar properties = {};\n\t\n\t\tthis.get = function ( object ) {\n\t\n\t\t\tvar uuid = object.uuid;\n\t\t\tvar map = properties[ uuid ];\n\t\n\t\t\tif ( map === undefined ) {\n\t\n\t\t\t\tmap = {};\n\t\t\t\tproperties[ uuid ] = map;\n\t\n\t\t\t}\n\t\n\t\t\treturn map;\n\t\n\t\t};\n\t\n\t\tthis.delete = function ( object ) {\n\t\n\t\t\tdelete properties[ object.uuid ];\n\t\n\t\t};\n\t\n\t\tthis.clear = function () {\n\t\n\t\t\tproperties = {};\n\t\n\t\t};\n\t\n\t};\n\t\n\t// File:src/renderers/webgl/WebGLShader.js\n\t\n\tTHREE.WebGLShader = ( function () {\n\t\n\t\tfunction addLineNumbers( string ) {\n\t\n\t\t\tvar lines = string.split( '\\n' );\n\t\n\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\t\n\t\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\t\n\t\t\t}\n\t\n\t\t\treturn lines.join( '\\n' );\n\t\n\t\t}\n\t\n\t\treturn function WebGLShader( gl, type, string ) {\n\t\n\t\t\tvar shader = gl.createShader( type );\n\t\n\t\t\tgl.shaderSource( shader, string );\n\t\t\tgl.compileShader( shader );\n\t\n\t\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\t\n\t\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\t\n\t\t\t}\n\t\n\t\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\t\n\t\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\t\n\t\t\t}\n\t\n\t\t\t// --enable-privileged-webgl-extension\n\t\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\t\n\t\t\treturn shader;\n\t\n\t\t};\n\t\n\t} )();\n\t\n\t// File:src/renderers/webgl/WebGLShadowMap.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.WebGLShadowMap = function ( _renderer, _lights, _objects, capabilities ) {\n\t\n\t\tvar _gl = _renderer.context,\n\t\t_state = _renderer.state,\n\t\t_frustum = new THREE.Frustum(),\n\t\t_projScreenMatrix = new THREE.Matrix4(),\n\t\n\t\t_lightShadows = _lights.shadows,\n\t\n\t\t_shadowMapSize = new THREE.Vector2(),\n\t\t_maxShadowMapSize = new THREE.Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\t\n\t\t_lookTarget = new THREE.Vector3(),\n\t\t_lightPositionWorld = new THREE.Vector3(),\n\t\n\t\t_renderList = [],\n\t\n\t\t_MorphingFlag = 1,\n\t\t_SkinningFlag = 2,\n\t\n\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\t\n\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\t\n\t\t_materialCache = {};\n\t\n\t\tvar cubeDirections = [\n\t\t\tnew THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),\n\t\t\tnew THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )\n\t\t];\n\t\n\t\tvar cubeUps = [\n\t\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),\n\t\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),\tnew THREE.Vector3( 0, 0, - 1 )\n\t\t];\n\t\n\t\tvar cube2DViewPorts = [\n\t\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),\n\t\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()\n\t\t];\n\t\n\t\t// init\n\t\n\t\tvar depthMaterialTemplate = new THREE.MeshDepthMaterial();\n\t\tdepthMaterialTemplate.depthPacking = THREE.RGBADepthPacking;\n\t\tdepthMaterialTemplate.clipping = true;\n\t\n\t\tvar distanceShader = THREE.ShaderLib[ \"distanceRGBA\" ];\n\t\tvar distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );\n\t\n\t\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\t\n\t\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\t\n\t\t\tvar depthMaterial = depthMaterialTemplate.clone();\n\t\t\tdepthMaterial.morphTargets = useMorphing;\n\t\t\tdepthMaterial.skinning = useSkinning;\n\t\n\t\t\t_depthMaterials[ i ] = depthMaterial;\n\t\n\t\t\tvar distanceMaterial = new THREE.ShaderMaterial( {\n\t\t\t\tdefines: {\n\t\t\t\t\t'USE_SHADOWMAP': ''\n\t\t\t\t},\n\t\t\t\tuniforms: distanceUniforms,\n\t\t\t\tvertexShader: distanceShader.vertexShader,\n\t\t\t\tfragmentShader: distanceShader.fragmentShader,\n\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\tskinning: useSkinning,\n\t\t\t\tclipping: true\n\t\t\t} );\n\t\n\t\t\t_distanceMaterials[ i ] = distanceMaterial;\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tvar scope = this;\n\t\n\t\tthis.enabled = false;\n\t\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\n\t\tthis.type = THREE.PCFShadowMap;\n\t\n\t\tthis.renderReverseSided = true;\n\t\tthis.renderSingleSided = true;\n\t\n\t\tthis.render = function ( scene, camera ) {\n\t\n\t\t\tif ( scope.enabled === false ) return;\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\t\n\t\t\tif ( _lightShadows.length === 0 ) return;\n\t\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.clearColor( 1, 1, 1, 1 );\n\t\t\t_state.disable( _gl.BLEND );\n\t\t\t_state.setDepthTest( true );\n\t\t\t_state.setScissorTest( false );\n\t\n\t\t\t// render depth map\n\t\n\t\t\tvar faceCount, isPointLight;\n\t\n\t\t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\t\n\t\t\t\tvar light = _lightShadows[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\t\n\t\t\t\tif ( shadow === undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar shadowCamera = shadow.camera;\n\t\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t\t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\t\n\t\t\t\tif ( light instanceof THREE.PointLight ) {\n\t\n\t\t\t\t\tfaceCount = 6;\n\t\t\t\t\tisPointLight = true;\n\t\n\t\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\t\n\t\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t\t// following orientation:\n\t\t\t\t\t//\n\t\t\t\t\t//  xzXZ\n\t\t\t\t\t//   y Y\n\t\t\t\t\t//\n\t\t\t\t\t// X - Positive x direction\n\t\t\t\t\t// x - Negative x direction\n\t\t\t\t\t// Y - Positive y direction\n\t\t\t\t\t// y - Negative y direction\n\t\t\t\t\t// Z - Positive z direction\n\t\t\t\t\t// z - Negative z direction\n\t\n\t\t\t\t\t// positive X\n\t\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative X\n\t\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Z\n\t\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative Z\n\t\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Y\n\t\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t\t// negative Y\n\t\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\t\n\t\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t\t_shadowMapSize.y *= 2.0;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tfaceCount = 1;\n\t\t\t\t\tisPointLight = false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( shadow.map === null ) {\n\t\n\t\t\t\t\tvar pars = { minFilter: THREE.NearestFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat };\n\t\n\t\t\t\t\tshadow.map = new THREE.WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\n\t\t\t\t\tshadowCamera.updateProjectionMatrix();\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( shadow instanceof THREE.SpotLightShadow ) {\n\t\n\t\t\t\t\tshadow.update( light );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar shadowMap = shadow.map;\n\t\t\t\tvar shadowMatrix = shadow.matrix;\n\t\n\t\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\t\n\t\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t\t_renderer.clear();\n\t\n\t\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t\t// run a single pass if not\n\t\n\t\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\t\n\t\t\t\t\tif ( isPointLight ) {\n\t\n\t\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\n\t\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t\t_state.viewport( vpDimensions );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\t\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\t\n\t\t\t\t\t// compute shadow matrix\n\t\n\t\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t\t);\n\t\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\t\n\t\t\t\t\t// update camera matrices and frustum\n\t\n\t\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\t\n\t\t\t\t\t// set object matrices & frustum culling\n\t\n\t\t\t\t\t_renderList.length = 0;\n\t\n\t\t\t\t\tprojectObject( scene, camera, shadowCamera );\n\t\n\t\t\t\t\t// render shadow map\n\t\t\t\t\t// render regular objects\n\t\n\t\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\tvar object = _renderList[ j ];\n\t\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\t\n\t\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\n\t\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\t\tvar materials = material.materials;\n\t\n\t\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\t\n\t\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\t\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\t\n\t\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// Restore GL state.\n\t\t\tvar clearColor = _renderer.getClearColor(),\n\t\t\tclearAlpha = _renderer.getClearAlpha();\n\t\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\t\n\t\t\tscope.needsUpdate = false;\n\t\n\t\t};\n\t\n\t\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\t\n\t\t\tvar geometry = object.geometry;\n\t\n\t\t\tvar result = null;\n\t\n\t\t\tvar materialVariants = _depthMaterials;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\t\n\t\t\tif ( isPointLight ) {\n\t\n\t\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\n\t\t\t}\n\t\n\t\t\tif ( ! customMaterial ) {\n\t\n\t\t\t\tvar useMorphing = false;\n\t\n\t\t\t\tif ( material.morphTargets ) {\n\t\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\n\t\n\t\t\t\tvar variantIndex = 0;\n\t\n\t\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\t\n\t\t\t\tresult = materialVariants[ variantIndex ];\n\t\n\t\t\t} else {\n\t\n\t\t\t\tresult = customMaterial;\n\t\n\t\t\t}\n\t\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t material.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\t\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\t\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\t\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\t\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\t\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\t\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\t\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tresult = cachedMaterial;\n\t\n\t\t\t}\n\t\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\t\n\t\t\tvar side = material.side;\n\t\n\t\t\tif ( scope.renderSingleSided && side == THREE.DoubleSide ) {\n\t\n\t\t\t\tside = THREE.FrontSide;\n\t\n\t\t\t}\n\t\n\t\t\tif ( scope.renderReverseSided ) {\n\t\n\t\t\t\tif ( side === THREE.FrontSide ) side = THREE.BackSide;\n\t\t\t\telse if ( side === THREE.BackSide ) side = THREE.FrontSide;\n\t\n\t\t\t}\n\t\n\t\t\tresult.side = side;\n\t\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\t\n\t\t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\t\n\t\t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\t\n\t\t\t}\n\t\n\t\t\treturn result;\n\t\n\t\t}\n\t\n\t\tfunction projectObject( object, camera, shadowCamera ) {\n\t\n\t\t\tif ( object.visible === false ) return;\n\t\n\t\t\tif ( object.layers.test( camera.layers ) && ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) ) {\n\t\n\t\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\t\n\t\t\t\t\tvar material = object.material;\n\t\n\t\t\t\t\tif ( material.visible === true ) {\n\t\n\t\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t\t\t_renderList.push( object );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar children = object.children;\n\t\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\t\n\t\t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/renderers/webgl/WebGLState.js\n\t\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\t\n\tTHREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {\n\t\n\t\tvar _this = this;\n\t\n\t\tthis.buffers = {\n\t\t\tcolor: new THREE.WebGLColorBuffer( gl, this ),\n\t\t\tdepth: new THREE.WebGLDepthBuffer( gl, this ),\n\t\t\tstencil: new THREE.WebGLStencilBuffer( gl, this )\n\t\t};\n\t\n\t\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\t\n\t\tvar capabilities = {};\n\t\n\t\tvar compressedTextureFormats = null;\n\t\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\t\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\t\n\t\tvar currentLineWidth = null;\n\t\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\t\n\t\tvar currentScissorTest = null;\n\t\n\t\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\t\n\t\tvar currentScissor = new THREE.Vector4();\n\t\tvar currentViewport = new THREE.Vector4();\n\t\n\t\tfunction createTexture( type, target, count ) {\n\t\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\t\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\t\n\t\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\t\n\t\t\t}\n\t\n\t\t\treturn texture;\n\t\n\t\t}\n\t\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\t\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\t\n\t\t//\n\t\n\t\tthis.init = function () {\n\t\n\t\t\tthis.clearColor( 0, 0, 0, 1 );\n\t\t\tthis.clearDepth( 1 );\n\t\t\tthis.clearStencil( 0 );\n\t\n\t\t\tthis.enable( gl.DEPTH_TEST );\n\t\t\tthis.setDepthFunc( THREE.LessEqualDepth );\n\t\n\t\t\tthis.setFlipSided( false );\n\t\t\tthis.setCullFace( THREE.CullFaceBack );\n\t\t\tthis.enable( gl.CULL_FACE );\n\t\n\t\t\tthis.enable( gl.BLEND );\n\t\t\tthis.setBlending( THREE.NormalBlending );\n\t\n\t\t};\n\t\n\t\tthis.initAttributes = function () {\n\t\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\t\n\t\t\t\tnewAttributes[ i ] = 0;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.enableAttribute = function ( attribute ) {\n\t\n\t\t\tnewAttributes[ attribute ] = 1;\n\t\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\t\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\t\n\t\t\t}\n\t\n\t\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\t\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\t\tattributeDivisors[ attribute ] = 0;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {\n\t\n\t\t\tnewAttributes[ attribute ] = 1;\n\t\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\t\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\t\n\t\t\t}\n\t\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\t\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.disableUnusedAttributes = function () {\n\t\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\t\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\t\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.enable = function ( id ) {\n\t\n\t\t\tif ( capabilities[ id ] !== true ) {\n\t\n\t\t\t\tgl.enable( id );\n\t\t\t\tcapabilities[ id ] = true;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.disable = function ( id ) {\n\t\n\t\t\tif ( capabilities[ id ] !== false ) {\n\t\n\t\t\t\tgl.disable( id );\n\t\t\t\tcapabilities[ id ] = false;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.getCompressedTextureFormats = function () {\n\t\n\t\t\tif ( compressedTextureFormats === null ) {\n\t\n\t\t\t\tcompressedTextureFormats = [];\n\t\n\t\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\t\n\t\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\t\n\t\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\t\n\t\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn compressedTextureFormats;\n\t\n\t\t};\n\t\n\t\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\t\n\t\t\tif ( blending !== THREE.NoBlending ) {\n\t\n\t\t\t\tthis.enable( gl.BLEND );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.disable( gl.BLEND );\n\t\t\t\tcurrentBlending = blending; // no blending, that is\n\t\t\t\treturn;\n\t\n\t\t\t}\n\t\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\t\n\t\t\t\tif ( blending === THREE.AdditiveBlending ) {\n\t\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\n\t\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\n\t\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\t\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\n\t\t\t}\n\t\n\t\t\tif ( blending === THREE.CustomBlending ) {\n\t\n\t\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\t\n\t\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\t\n\t\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\t\n\t\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\t\n\t\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\t\n\t\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\tcurrentBlendEquation = null;\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// TODO Deprecate\n\t\n\t\tthis.setColorWrite = function ( colorWrite ) {\n\t\n\t\t\tthis.buffers.color.setMask( colorWrite );\n\t\n\t\t};\n\t\n\t\tthis.setDepthTest = function ( depthTest ) {\n\t\n\t\t\tthis.buffers.depth.setTest( depthTest );\n\t\n\t\t};\n\t\n\t\tthis.setDepthWrite = function ( depthWrite ) {\n\t\n\t\t\tthis.buffers.depth.setMask( depthWrite );\n\t\n\t\t};\n\t\n\t\tthis.setDepthFunc = function ( depthFunc ) {\n\t\n\t\t\tthis.buffers.depth.setFunc( depthFunc );\n\t\n\t\t};\n\t\n\t\tthis.setStencilTest = function ( stencilTest ) {\n\t\n\t\t\tthis.buffers.stencil.setTest( stencilTest );\n\t\n\t\t};\n\t\n\t\tthis.setStencilWrite = function ( stencilWrite ) {\n\t\n\t\t\tthis.buffers.stencil.setMask( stencilWrite );\n\t\n\t\t};\n\t\n\t\tthis.setStencilFunc = function ( stencilFunc, stencilRef, stencilMask ) {\n\t\n\t\t\tthis.buffers.stencil.setFunc( stencilFunc, stencilRef, stencilMask );\n\t\n\t\t};\n\t\n\t\tthis.setStencilOp = function ( stencilFail, stencilZFail, stencilZPass ) {\n\t\n\t\t\tthis.buffers.stencil.setOp( stencilFail, stencilZFail, stencilZPass );\n\t\n\t\t};\n\t\n\t\t//\n\t\n\t\tthis.setFlipSided = function ( flipSided ) {\n\t\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\t\n\t\t\t\tif ( flipSided ) {\n\t\n\t\t\t\t\tgl.frontFace( gl.CW );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tgl.frontFace( gl.CCW );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tcurrentFlipSided = flipSided;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.setCullFace = function ( cullFace ) {\n\t\n\t\t\tif ( cullFace !== THREE.CullFaceNone ) {\n\t\n\t\t\t\tthis.enable( gl.CULL_FACE );\n\t\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\t\n\t\t\t\t\tif ( cullFace === THREE.CullFaceBack ) {\n\t\n\t\t\t\t\t\tgl.cullFace( gl.BACK );\n\t\n\t\t\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\n\t\n\t\t\t\t\t\tgl.cullFace( gl.FRONT );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.disable( gl.CULL_FACE );\n\t\n\t\t\t}\n\t\n\t\t\tcurrentCullFace = cullFace;\n\t\n\t\t};\n\t\n\t\tthis.setLineWidth = function ( width ) {\n\t\n\t\t\tif ( width !== currentLineWidth ) {\n\t\n\t\t\t\tgl.lineWidth( width );\n\t\n\t\t\t\tcurrentLineWidth = width;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.setPolygonOffset = function ( polygonOffset, factor, units ) {\n\t\n\t\t\tif ( polygonOffset ) {\n\t\n\t\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\n\t\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\t\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\t\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.getScissorTest = function () {\n\t\n\t\t\treturn currentScissorTest;\n\t\n\t\t};\n\t\n\t\tthis.setScissorTest = function ( scissorTest ) {\n\t\n\t\t\tcurrentScissorTest = scissorTest;\n\t\n\t\t\tif ( scissorTest ) {\n\t\n\t\t\t\tthis.enable( gl.SCISSOR_TEST );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.disable( gl.SCISSOR_TEST );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// texture\n\t\n\t\tthis.activeTexture = function ( webglSlot ) {\n\t\n\t\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\t\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\t\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.bindTexture = function ( webglType, webglTexture ) {\n\t\n\t\t\tif ( currentTextureSlot === null ) {\n\t\n\t\t\t\t_this.activeTexture();\n\t\n\t\t\t}\n\t\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\t\n\t\t\tif ( boundTexture === undefined ) {\n\t\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\t\n\t\t\t}\n\t\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\t\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\t\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.compressedTexImage2D = function () {\n\t\n\t\t\ttry {\n\t\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\t\n\t\t\t} catch ( error ) {\n\t\n\t\t\t\tconsole.error( error );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.texImage2D = function () {\n\t\n\t\t\ttry {\n\t\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\t\n\t\t\t} catch ( error ) {\n\t\n\t\t\t\tconsole.error( error );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// TODO Deprecate\n\t\n\t\tthis.clearColor = function ( r, g, b, a ) {\n\t\n\t\t\tthis.buffers.color.setClear( r, g, b, a );\n\t\n\t\t};\n\t\n\t\tthis.clearDepth = function ( depth ) {\n\t\n\t\t\tthis.buffers.depth.setClear( depth );\n\t\n\t\t};\n\t\n\t\tthis.clearStencil = function ( stencil ) {\n\t\n\t\t\tthis.buffers.stencil.setClear( stencil );\n\t\n\t\t};\n\t\n\t\t//\n\t\n\t\tthis.scissor = function ( scissor ) {\n\t\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\t\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.viewport = function ( viewport ) {\n\t\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\t\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t//\n\t\n\t\tthis.reset = function () {\n\t\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\t\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\t\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tcapabilities = {};\n\t\n\t\t\tcompressedTextureFormats = null;\n\t\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\t\n\t\t\tcurrentBlending = null;\n\t\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\t\n\t\t\tthis.buffers.color.reset();\n\t\t\tthis.buffers.depth.reset();\n\t\t\tthis.buffers.stencil.reset();\n\t\n\t\t};\n\t\n\t};\n\t\n\tTHREE.WebGLColorBuffer = function ( gl, state ) {\n\t\n\t\tvar locked = false;\n\t\n\t\tvar color = new THREE.Vector4();\n\t\tvar currentColorMask = null;\n\t\tvar currentColorClear = new THREE.Vector4();\n\t\n\t\tthis.setMask = function ( colorMask ) {\n\t\n\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\t\n\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\tcurrentColorMask = colorMask;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.setLocked = function ( lock ) {\n\t\n\t\t\tlocked = lock;\n\t\n\t\t};\n\t\n\t\tthis.setClear = function ( r, g, b, a ) {\n\t\n\t\t\tcolor.set( r, g, b, a );\n\t\n\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\t\n\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\tcurrentColorClear.copy( color );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.reset = function () {\n\t\n\t\t\tlocked = false;\n\t\n\t\t\tcurrentColorMask = null;\n\t\t\tcurrentColorClear = new THREE.Vector4();\n\t\n\t\t};\n\t\n\t};\n\t\n\tTHREE.WebGLDepthBuffer = function( gl, state ) {\n\t\n\t\tvar locked = false;\n\t\n\t\tvar currentDepthMask = null;\n\t\tvar currentDepthFunc = null;\n\t\tvar currentDepthClear = null;\n\t\n\t\tthis.setTest = function ( depthTest ) {\n\t\n\t\t\tif ( depthTest ) {\n\t\n\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.setMask = function( depthMask ){\n\t\n\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\t\n\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\tcurrentDepthMask = depthMask;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.setFunc = function ( depthFunc ) {\n\t\n\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\t\n\t\t\t\tif ( depthFunc ) {\n\t\n\t\t\t\t\tswitch ( depthFunc ) {\n\t\n\t\t\t\t\t\tcase THREE.NeverDepth:\n\t\n\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase THREE.AlwaysDepth:\n\t\n\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase THREE.LessDepth:\n\t\n\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase THREE.LessEqualDepth:\n\t\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase THREE.EqualDepth:\n\t\n\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase THREE.GreaterEqualDepth:\n\t\n\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase THREE.GreaterDepth:\n\t\n\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tcase THREE.NotEqualDepth:\n\t\n\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\tdefault:\n\t\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.setLocked = function ( lock ) {\n\t\n\t\t\tlocked = lock;\n\t\n\t\t};\n\t\n\t\tthis.setClear = function ( depth ) {\n\t\n\t\t\tif ( currentDepthClear !== depth ) {\n\t\n\t\t\t\tgl.clearDepth( depth );\n\t\t\t\tcurrentDepthClear = depth;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.reset = function () {\n\t\n\t\t\tlocked = false;\n\t\n\t\t\tcurrentDepthMask = null;\n\t\t\tcurrentDepthFunc = null;\n\t\t\tcurrentDepthClear = null;\n\t\n\t\t};\n\t\n\t};\n\t\n\tTHREE.WebGLStencilBuffer = function ( gl, state ) {\n\t\n\t\tvar locked = false;\n\t\n\t\tvar currentStencilMask = null;\n\t\tvar currentStencilFunc = null;\n\t\tvar currentStencilRef = null;\n\t\tvar currentStencilFuncMask = null;\n\t\tvar currentStencilFail  = null;\n\t\tvar currentStencilZFail = null;\n\t\tvar currentStencilZPass = null;\n\t\tvar currentStencilClear = null;\n\t\n\t\tthis.setTest = function ( stencilTest ) {\n\t\n\t\t\tif ( stencilTest ) {\n\t\n\t\t\t\tstate.enable( gl.STENCIL_TEST );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tstate.disable( gl.STENCIL_TEST );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.setMask = function ( stencilMask ) {\n\t\n\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\t\n\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\tcurrentStencilMask = stencilMask;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.setFunc = function ( stencilFunc, stencilRef, stencilMask ) {\n\t\n\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\t\n\t\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\t\n\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\tcurrentStencilRef  = stencilRef;\n\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.setOp\t = function ( stencilFail, stencilZFail, stencilZPass ) {\n\t\n\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t     currentStencilZPass !== stencilZPass ) {\n\t\n\t\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\t\n\t\t\t\tcurrentStencilFail  = stencilFail;\n\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.setLocked = function ( lock ) {\n\t\n\t\t\tlocked = lock;\n\t\n\t\t};\n\t\n\t\tthis.setClear = function ( stencil ) {\n\t\n\t\t\tif ( currentStencilClear !== stencil ) {\n\t\n\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\tcurrentStencilClear = stencil;\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.reset = function () {\n\t\n\t\t\tlocked = false;\n\t\n\t\t\tcurrentStencilMask = null;\n\t\t\tcurrentStencilFunc = null;\n\t\t\tcurrentStencilRef = null;\n\t\t\tcurrentStencilFuncMask = null;\n\t\t\tcurrentStencilFail = null;\n\t\t\tcurrentStencilZFail = null;\n\t\t\tcurrentStencilZPass = null;\n\t\t\tcurrentStencilClear = null;\n\t\n\t\t};\n\t\n\t};\n\t\n\t// File:src/renderers/webgl/WebGLTextures.js\n\t\n\t/**\n\t* @author mrdoob / http://mrdoob.com/\n\t*/\n\t\n\tTHREE.WebGLTextures = function ( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\t\n\t\tvar _infoMemory = info.memory;\n\t\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\t\n\t\t//\n\t\n\t\tfunction clampToMaxSize ( image, maxSize ) {\n\t\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\t\n\t\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t\t// premultiplied alpha.\n\t\n\t\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\t\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\t\tcanvas.height = Math.floor( image.height * scale );\n\t\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\t\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\t\n\t\t\t\treturn canvas;\n\t\n\t\t\t}\n\t\n\t\t\treturn image;\n\t\n\t\t}\n\t\n\t\tfunction isPowerOfTwo( image ) {\n\t\n\t\t\treturn THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );\n\t\n\t\t}\n\t\n\t\tfunction makePowerOfTwo( image ) {\n\t\n\t\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\t\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = THREE.Math.nearestPowerOfTwo( image.width );\n\t\t\t\tcanvas.height = THREE.Math.nearestPowerOfTwo( image.height );\n\t\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\t\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\t\n\t\t\t\treturn canvas;\n\t\n\t\t\t}\n\t\n\t\t\treturn image;\n\t\n\t\t}\n\t\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\t\n\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;\n\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;\n\t\n\t\t\treturn false;\n\t\n\t\t}\n\t\n\t\t// Fallback filters for non-power-of-2 textures\n\t\n\t\tfunction filterFallback ( f ) {\n\t\n\t\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\n\t\n\t\t\t\treturn _gl.NEAREST;\n\t\n\t\t\t}\n\t\n\t\t\treturn _gl.LINEAR;\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tfunction onTextureDispose( event ) {\n\t\n\t\t\tvar texture = event.target;\n\t\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\t\n\t\t\tdeallocateTexture( texture );\n\t\n\t\t\t_infoMemory.textures --;\n\t\n\t\n\t\t}\n\t\n\t\tfunction onRenderTargetDispose( event ) {\n\t\n\t\t\tvar renderTarget = event.target;\n\t\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\t\n\t\t\tdeallocateRenderTarget( renderTarget );\n\t\n\t\t\t_infoMemory.textures --;\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tfunction deallocateTexture( texture ) {\n\t\n\t\t\tvar textureProperties = properties.get( texture );\n\t\n\t\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\t\n\t\t\t\t// cube texture\n\t\n\t\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// 2D texture\n\t\n\t\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\t\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\t\n\t\t\t}\n\t\n\t\t\t// remove all webgl properties\n\t\t\tproperties.delete( texture );\n\t\n\t\t}\n\t\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\t\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\n\t\t\tif ( ! renderTarget ) return;\n\t\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\t\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\t\n\t\t\t}\n\t\n\t\t\tif ( renderTarget.depthTexture ) {\n\t\n\t\t\t\trenderTarget.depthTexture.dispose();\n\t\n\t\t\t}\n\t\n\t\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\n\t\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\n\t\t\t}\n\t\n\t\t\tproperties.delete( renderTarget.texture );\n\t\t\tproperties.delete( renderTarget );\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\n\t\n\t\tfunction setTexture2D( texture, slot ) {\n\t\n\t\t\tvar textureProperties = properties.get( texture );\n\t\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\t\n\t\t\t\tvar image = texture.image;\n\t\n\t\t\t\tif ( image === undefined ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\t\n\t\t\t\t} else if ( image.complete === false ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\n\t\t}\n\t\n\t\tfunction setTextureCube ( texture, slot ) {\n\t\n\t\t\tvar textureProperties = properties.get( texture );\n\t\n\t\t\tif ( texture.image.length === 6 ) {\n\t\n\t\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\t\n\t\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\t\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\t\n\t\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\t\n\t\t\t\t\t\t_infoMemory.textures ++;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\t\n\t\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\n\t\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\n\t\t\t\t\tvar isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;\n\t\n\t\t\t\t\tvar cubeImage = [];\n\t\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\t\n\t\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\t\t\tglType = paramThreeToGL( texture.type );\n\t\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\t\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\t\tif ( ! isCompressed ) {\n\t\n\t\t\t\t\t\t\tif ( isDataTexture ) {\n\t\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\t\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\t\n\t\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\t\n\t\t\t\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\t\n\t\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\t\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\t\n\t\t\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\t\n\t\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttextureProperties.__version = texture.version;\n\t\n\t\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction setTextureCubeDynamic ( texture, slot ) {\n\t\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\t\n\t\t}\n\t\n\t\tfunction setTextureParameters ( textureType, texture, isPowerOfTwoImage ) {\n\t\n\t\t\tvar extension;\n\t\n\t\t\tif ( isPowerOfTwoImage ) {\n\t\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\t\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\t\n\t\t\t} else {\n\t\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\t\n\t\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\t\n\t\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\n\t\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\t\n\t\t\tif ( extension ) {\n\t\n\t\t\t\tif ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\t\tif ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\t\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\t\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\t\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\t\n\t\t\t\ttextureProperties.__webglInit = true;\n\t\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\t\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\n\t\t\t\t_infoMemory.textures ++;\n\t\n\t\t\t}\n\t\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\n\t\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\t\n\t\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\t\n\t\t\t\timage = makePowerOfTwo( image );\n\t\n\t\t\t}\n\t\n\t\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\tglType = paramThreeToGL( texture.type );\n\t\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\t\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\t\n\t\t\tif ( texture instanceof THREE.DepthTexture ) {\n\t\n\t\t\t\t// populate depth texture with dummy data\n\t\n\t\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\t\n\t\t\t\tif ( texture.type === THREE.FloatType ) {\n\t\n\t\t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n\t\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\t\n\t\t\t\t} else if ( _isWebGL2 ) {\n\t\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\t\n\t\t\t} else if ( texture instanceof THREE.DataTexture ) {\n\t\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\t\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\n\t\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\n\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\t\n\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\t\n\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// regular Texture (image, video, canvas)\n\t\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\t\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\t\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\n\t\t\ttextureProperties.__version = texture.version;\n\t\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\t\n\t\t}\n\t\n\t\t// Render targets\n\t\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture ( framebuffer, renderTarget, attachment, textureTarget ) {\n\t\n\t\t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n\t\t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n\t\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\n\t\t}\n\t\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage ( renderbuffer, renderTarget ) {\n\t\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\t\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\t\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\t\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\t\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\t\n\t\t\t}\n\t\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\t\n\t\t}\n\t\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture ( framebuffer, renderTarget ) {\n\t\n\t\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\t\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\n\t\t\tif ( !( renderTarget.depthTexture instanceof THREE.DepthTexture ) ) {\n\t\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\n\t\t\t}\n\t\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\t\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\t\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\t\n\t\t}\n\t\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\t\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\n\t\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\n\t\t\tif ( renderTarget.depthTexture ) {\n\t\n\t\t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tif ( isCube ) {\n\t\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\t\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\n\t\t}\n\t\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\t\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\t\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\n\t\t\t_infoMemory.textures ++;\n\t\n\t\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\t\n\t\t\t// Setup framebuffer\n\t\n\t\t\tif ( isCube ) {\n\t\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\t\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\t\n\t\t\t}\n\t\n\t\t\t// Setup color buffer\n\t\n\t\t\tif ( isCube ) {\n\t\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\t\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\t\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\t\n\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\t\n\t\t\t}\n\t\n\t\t\t// Setup depth and stencil buffers\n\t\n\t\t\tif ( renderTarget.depthBuffer ) {\n\t\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\t\n\t\t\tvar texture = renderTarget.texture;\n\t\n\t\t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n\t\t\t\t\ttexture.minFilter !== THREE.NearestFilter &&\n\t\t\t\t\ttexture.minFilter !== THREE.LinearFilter ) {\n\t\n\t\t\t\tvar target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\t\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\t_gl.generateMipmap( target );\n\t\t\t\tstate.bindTexture( target, null );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\n\t};\n\t\n\t// File:src/renderers/webgl/WebGLUniforms.js\n\t\n\t/**\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [renderer] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'renderer' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (renderer factorizations):\n\t *\n\t * .upload( gl, seq, values, renderer )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t * .splitDynamic( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with dynamic entry and removes them from 'seq'\n\t *\n\t *\n\t * Methods of the top-level container (renderer factorizations):\n\t *\n\t * .setValue( gl, name, value )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .set( gl, obj, prop )\n\t *\n\t * \t\tsets uniform from object and property with same name than uniform\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t *\n\t * @author tschw\n\t *\n\t */\n\t\n\tTHREE.WebGLUniforms = ( function() { // scope\n\t\n\t\tvar emptyTexture = new THREE.Texture();\n\t\tvar emptyCubeTexture = new THREE.CubeTexture();\n\t\n\t\t// --- Base for inner nodes (including the root) ---\n\t\n\t\tvar UniformContainer = function() {\n\t\n\t\t\t\tthis.seq = [];\n\t\t\t\tthis.map = {};\n\t\n\t\t\t},\n\t\n\t\t// --- Utilities ---\n\t\n\t\t// Array Caches (provide typed arrays for temporary by size)\n\t\n\t\t\tarrayCacheF32 = [],\n\t\t\tarrayCacheI32 = [],\n\t\n\t\t\tuncacheTemporaryArrays = function() {\n\t\n\t\t\t\tarrayCacheF32.length = 0;\n\t\t\t\tarrayCacheI32.length = 0;\n\t\n\t\t\t},\n\t\n\t\t// Flattening for arrays of vectors and matrices\n\t\n\t\t\tflatten = function( array, nBlocks, blockSize ) {\n\t\n\t\t\t\tvar firstElem = array[ 0 ];\n\t\n\t\t\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t\t\t\t// unoptimized: ! isNaN( firstElem )\n\t\t\t\t// see http://jacksondunstan.com/articles/983\n\t\n\t\t\t\tvar n = nBlocks * blockSize,\n\t\t\t\t\tr = arrayCacheF32[ n ];\n\t\n\t\t\t\tif ( r === undefined ) {\n\t\n\t\t\t\t\tr = new Float32Array( n );\n\t\t\t\t\tarrayCacheF32[ n ] = r;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( nBlocks !== 0 ) {\n\t\n\t\t\t\t\tfirstElem.toArray( r, 0 );\n\t\n\t\t\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\t\n\t\t\t\t\t\toffset += blockSize;\n\t\t\t\t\t\tarray[ i ].toArray( r, offset );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn r;\n\t\n\t\t\t},\n\t\n\t\t// Texture unit allocation\n\t\n\t\t\tallocTexUnits = function( renderer, n ) {\n\t\n\t\t\t\tvar r = arrayCacheI32[ n ];\n\t\n\t\t\t\tif ( r === undefined ) {\n\t\n\t\t\t\t\tr = new Int32Array( n );\n\t\t\t\t\tarrayCacheI32[ n ] = r;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\tr[ i ] = renderer.allocTextureUnit();\n\t\n\t\t\t\treturn r;\n\t\n\t\t\t},\n\t\n\t\t// --- Setters ---\n\t\n\t\t// Note: Defining these methods externally, because they come in a bunch\n\t\t// and this way their names minify.\n\t\n\t\t\t// Single scalar\n\t\n\t\t\tsetValue1f = function( gl, v ) { gl.uniform1f( this.addr, v ); },\n\t\t\tsetValue1i = function( gl, v ) { gl.uniform1i( this.addr, v ); },\n\t\n\t\t\t// Single float vector (from flat array or THREE.VectorN)\n\t\n\t\t\tsetValue2fv = function( gl, v ) {\n\t\n\t\t\t\tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n\t\t\t\telse gl.uniform2f( this.addr, v.x, v.y );\n\t\n\t\t\t},\n\t\n\t\t\tsetValue3fv = function( gl, v ) {\n\t\n\t\t\t\tif ( v.x !== undefined )\n\t\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\t\t\t\telse if ( v.r !== undefined )\n\t\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\t\t\t\telse\n\t\t\t\t\tgl.uniform3fv( this.addr, v );\n\t\n\t\t\t},\n\t\n\t\t\tsetValue4fv = function( gl, v ) {\n\t\n\t\t\t\tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n\t\t\t\telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\t\n\t\t\t},\n\t\n\t\t\t// Single matrix (from flat array or MatrixN)\n\t\n\t\t\tsetValue2fm = function( gl, v ) {\n\t\n\t\t\t\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\t\n\t\t\t},\n\t\n\t\t\tsetValue3fm = function( gl, v ) {\n\t\n\t\t\t\tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\t\n\t\t\t},\n\t\n\t\t\tsetValue4fm = function( gl, v ) {\n\t\n\t\t\t\tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\t\n\t\t\t},\n\t\n\t\t\t// Single texture (2D / Cube)\n\t\n\t\t\tsetValueT1 = function( gl, v, renderer ) {\n\t\n\t\t\t\tvar unit = renderer.allocTextureUnit();\n\t\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\t\trenderer.setTexture2D( v || emptyTexture, unit );\n\t\n\t\t\t},\n\t\n\t\t\tsetValueT6 = function( gl, v, renderer ) {\n\t\n\t\t\t\tvar unit = renderer.allocTextureUnit();\n\t\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\t\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\t\n\t\t\t},\n\t\n\t\t\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\t\n\t\t\tsetValue2iv = function( gl, v ) { gl.uniform2iv( this.addr, v ); },\n\t\t\tsetValue3iv = function( gl, v ) { gl.uniform3iv( this.addr, v ); },\n\t\t\tsetValue4iv = function( gl, v ) { gl.uniform4iv( this.addr, v ); },\n\t\n\t\t\t// Helper to pick the right setter for the singular case\n\t\n\t\t\tgetSingularSetter = function( type ) {\n\t\n\t\t\t\tswitch ( type ) {\n\t\n\t\t\t\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\t\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\t\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\t\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\t\n\t\t\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\t\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\t\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\t\n\t\t\t\t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n\t\t\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\t\n\t\t\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\t// Array of scalars\n\t\n\t\t\tsetValue1fv = function( gl, v ) { gl.uniform1fv( this.addr, v ); },\n\t\t\tsetValue1iv = function( gl, v ) { gl.uniform1iv( this.addr, v ); },\n\t\n\t\t\t// Array of vectors (flat or from THREE classes)\n\t\n\t\t\tsetValueV2a = function( gl, v ) {\n\t\n\t\t\t\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\t\n\t\t\t},\n\t\n\t\t\tsetValueV3a = function( gl, v ) {\n\t\n\t\t\t\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\t\n\t\t\t},\n\t\n\t\t\tsetValueV4a = function( gl, v ) {\n\t\n\t\t\t\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\t\n\t\t\t},\n\t\n\t\t\t// Array of matrices (flat or from THREE clases)\n\t\n\t\t\tsetValueM2a = function( gl, v ) {\n\t\n\t\t\t\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\t\n\t\t\t},\n\t\n\t\t\tsetValueM3a = function( gl, v ) {\n\t\n\t\t\t\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\t\n\t\t\t},\n\t\n\t\t\tsetValueM4a = function( gl, v ) {\n\t\n\t\t\t\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\t\n\t\t\t},\n\t\n\t\t\t// Array of textures (2D / Cube)\n\t\n\t\t\tsetValueT1a = function( gl, v, renderer ) {\n\t\n\t\t\t\tvar n = v.length,\n\t\t\t\t\tunits = allocTexUnits( renderer, n );\n\t\n\t\t\t\tgl.uniform1iv( this.addr, units );\n\t\n\t\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t\t\t\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tsetValueT6a = function( gl, v, renderer ) {\n\t\n\t\t\t\tvar n = v.length,\n\t\t\t\t\tunits = allocTexUnits( renderer, n );\n\t\n\t\t\t\tgl.uniform1iv( this.addr, units );\n\t\n\t\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t\t\t\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\n\t\t\t// Helper to pick the right setter for a pure (bottom-level) array\n\t\n\t\t\tgetPureArraySetter = function( type ) {\n\t\n\t\t\t\tswitch ( type ) {\n\t\n\t\t\t\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\t\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\t\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\t\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\t\n\t\t\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\t\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\t\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\t\n\t\t\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\t\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\t\n\t\t\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t// --- Uniform Classes ---\n\t\n\t\t\tSingleUniform = function SingleUniform( id, activeInfo, addr ) {\n\t\n\t\t\t\tthis.id = id;\n\t\t\t\tthis.addr = addr;\n\t\t\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\t\n\t\t\t\t// this.path = activeInfo.name; // DEBUG\n\t\n\t\t\t},\n\t\n\t\t\tPureArrayUniform = function( id, activeInfo, addr ) {\n\t\n\t\t\t\tthis.id = id;\n\t\t\t\tthis.addr = addr;\n\t\t\t\tthis.size = activeInfo.size;\n\t\t\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\t\n\t\t\t\t// this.path = activeInfo.name; // DEBUG\n\t\n\t\t\t},\n\t\n\t\t\tStructuredUniform = function( id ) {\n\t\n\t\t\t\tthis.id = id;\n\t\n\t\t\t\tUniformContainer.call( this ); // mix-in\n\t\n\t\t\t};\n\t\n\t\tStructuredUniform.prototype.setValue = function( gl, value ) {\n\t\n\t\t\t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t\t\t// are not allowed in structured uniforms.\n\t\n\t\t\tvar seq = this.seq;\n\t\n\t\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t\t\t\tvar u = seq[ i ];\n\t\t\t\tu.setValue( gl, value[ u.id ] );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\t// --- Top-level ---\n\t\n\t\t// Parser - builds up the property tree from the path strings\n\t\n\t\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g,\n\t\t\t// extracts\n\t\t\t// \t- the identifier (member name or array index)\n\t\t\t//  - followed by an optional right bracket (found when array index)\n\t\t\t//  - followed by an optional left bracket or dot (type of subscript)\n\t\t\t//\n\t\t\t// Note: These portions can be read in a non-overlapping fashion and\n\t\t\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t\t\t// in the uniform names.\n\t\n\t\t\taddUniform = function( container, uniformObject ) {\n\t\n\t\t\t\tcontainer.seq.push( uniformObject );\n\t\t\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\t\n\t\t\t},\n\t\n\t\t\tparseUniform = function( activeInfo, addr, container ) {\n\t\n\t\t\t\tvar path = activeInfo.name,\n\t\t\t\t\tpathLength = path.length;\n\t\n\t\t\t\t// reset RegExp object, because of the early exit of a previous run\n\t\t\t\tRePathPart.lastIndex = 0;\n\t\n\t\t\t\tfor (; ;) {\n\t\n\t\t\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\t\n\t\t\t\t\t\tid = match[ 1 ],\n\t\t\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\t\t\tsubscript = match[ 3 ];\n\t\n\t\t\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\t\n\t\t\t\t\tif ( subscript === undefined ||\n\t\t\t\t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n\t\t\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\n\t\t\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\t\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\n\t\t\t\t\t\tvar map = container.map,\n\t\t\t\t\t\t\tnext = map[ id ];\n\t\n\t\t\t\t\t\tif ( next === undefined ) {\n\t\n\t\t\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\t\t\taddUniform( container, next );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tcontainer = next;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t// Root Container\n\t\n\t\t\tWebGLUniforms = function WebGLUniforms( gl, program, renderer ) {\n\t\n\t\t\t\tUniformContainer.call( this );\n\t\n\t\t\t\tthis.renderer = renderer;\n\t\n\t\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\t\n\t\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t\t\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\t\t\tpath = info.name,\n\t\t\t\t\t\taddr = gl.getUniformLocation( program, path );\n\t\n\t\t\t\t\tparseUniform( info, addr, this );\n\t\n\t\t\t\t}\n\t\n\t\t\t};\n\t\n\t\n\t\tWebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\t\n\t\t\tvar u = this.map[ name ];\n\t\n\t\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\t\n\t\t};\n\t\n\t\tWebGLUniforms.prototype.set = function( gl, object, name ) {\n\t\n\t\t\tvar u = this.map[ name ];\n\t\n\t\t\tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\t\n\t\t};\n\t\n\t\tWebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\t\n\t\t\tvar v = object[ name ];\n\t\n\t\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\t\n\t\t};\n\t\n\t\n\t\t// Static interface\n\t\n\t\tWebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\t\n\t\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t\t\t\tvar u = seq[ i ],\n\t\t\t\t\tv = values[ u.id ];\n\t\n\t\t\t\tif ( v.needsUpdate !== false ) {\n\t\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\n\t\t\t\t\tu.setValue( gl, v.value, renderer );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tWebGLUniforms.seqWithValue = function( seq, values ) {\n\t\n\t\t\tvar r = [];\n\t\n\t\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t\t\t\tvar u = seq[ i ];\n\t\t\t\tif ( u.id in values ) r.push( u );\n\t\n\t\t\t}\n\t\n\t\t\treturn r;\n\t\n\t\t};\n\t\n\t\tWebGLUniforms.splitDynamic = function( seq, values ) {\n\t\n\t\t\tvar r = null,\n\t\t\t\tn = seq.length,\n\t\t\t\tw = 0;\n\t\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\t\n\t\t\t\tvar u = seq[ i ],\n\t\t\t\t\tv = values[ u.id ];\n\t\n\t\t\t\tif ( v && v.dynamic === true ) {\n\t\n\t\t\t\t\tif ( r === null ) r = [];\n\t\t\t\t\tr.push( u );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// in-place compact 'seq', removing the matches\n\t\t\t\t\tif ( w < i ) seq[ w ] = u;\n\t\t\t\t\t++ w;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( w < n ) seq.length = w;\n\t\n\t\t\treturn r;\n\t\n\t\t};\n\t\n\t\tWebGLUniforms.evalDynamic = function( seq, values, object, camera ) {\n\t\n\t\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\t\n\t\t\t\tvar v = values[ seq[ i ].id ],\n\t\t\t\t\tf = v.onUpdateCallback;\n\t\n\t\t\t\tif ( f !== undefined ) f.call( v, object, camera );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t\treturn WebGLUniforms;\n\t\n\t} )();\n\t\n\t// File:src/renderers/webgl/plugins/LensFlarePlugin.js\n\t\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.LensFlarePlugin = function ( renderer, flares ) {\n\t\n\t\tvar gl = renderer.context;\n\t\tvar state = renderer.state;\n\t\n\t\tvar vertexBuffer, elementBuffer;\n\t\tvar shader, program, attributes, uniforms;\n\t\n\t\tvar tempTexture, occlusionTexture;\n\t\n\t\tfunction init() {\n\t\n\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t- 1, - 1,  0, 0,\n\t\t\t\t 1, - 1,  1, 0,\n\t\t\t\t 1,  1,  1, 1,\n\t\t\t\t- 1,  1,  0, 1\n\t\t\t] );\n\t\n\t\t\tvar faces = new Uint16Array( [\n\t\t\t\t0, 1, 2,\n\t\t\t\t0, 2, 3\n\t\t\t] );\n\t\n\t\t\t// buffers\n\t\n\t\t\tvertexBuffer     = gl.createBuffer();\n\t\t\telementBuffer    = gl.createBuffer();\n\t\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\t\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\t\n\t\t\t// textures\n\t\n\t\t\ttempTexture      = gl.createTexture();\n\t\t\tocclusionTexture = gl.createTexture();\n\t\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\n\t\t\tshader = {\n\t\n\t\t\t\tvertexShader: [\n\t\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\t\n\t\t\t\t\t\"uniform vec3 screenPosition;\",\n\t\t\t\t\t\"uniform vec2 scale;\",\n\t\t\t\t\t\"uniform float rotation;\",\n\t\n\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\n\t\n\t\t\t\t\t\"attribute vec2 position;\",\n\t\t\t\t\t\"attribute vec2 uv;\",\n\t\n\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\"varying float vVisibility;\",\n\t\n\t\t\t\t\t\"void main() {\",\n\t\n\t\t\t\t\t\t\"vUV = uv;\",\n\t\n\t\t\t\t\t\t\"vec2 pos = position;\",\n\t\n\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\n\t\n\t\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\t\n\t\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\t\n\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\t\n\t\t\t\t\t\t\"}\",\n\t\n\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\t\n\t\t\t\t\t\"}\"\n\t\n\t\t\t\t].join( \"\\n\" ),\n\t\n\t\t\t\tfragmentShader: [\n\t\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\t\n\t\t\t\t\t\"uniform sampler2D map;\",\n\t\t\t\t\t\"uniform float opacity;\",\n\t\t\t\t\t\"uniform vec3 color;\",\n\t\n\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\"varying float vVisibility;\",\n\t\n\t\t\t\t\t\"void main() {\",\n\t\n\t\t\t\t\t\t// pink square\n\t\n\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\n\t\n\t\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\t\n\t\t\t\t\t\t// restore\n\t\n\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\t\n\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\t\n\t\t\t\t\t\t// flare\n\t\n\t\t\t\t\t\t\"} else {\",\n\t\n\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\t\n\t\t\t\t\t\t\"}\",\n\t\n\t\t\t\t\t\"}\"\n\t\n\t\t\t\t].join( \"\\n\" )\n\t\n\t\t\t};\n\t\n\t\t\tprogram = createProgram( shader );\n\t\n\t\t\tattributes = {\n\t\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t\t\t};\n\t\n\t\t\tuniforms = {\n\t\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t\t\t};\n\t\n\t\t}\n\t\n\t\t/*\n\t\t * Render lens flares\n\t\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t\t *         reads these back and calculates occlusion.\n\t\t */\n\t\n\t\tthis.render = function ( scene, camera, viewport ) {\n\t\n\t\t\tif ( flares.length === 0 ) return;\n\t\n\t\t\tvar tempPosition = new THREE.Vector3();\n\t\n\t\t\tvar invAspect = viewport.w / viewport.z,\n\t\t\t\thalfViewportWidth = viewport.z * 0.5,\n\t\t\t\thalfViewportHeight = viewport.w * 0.5;\n\t\n\t\t\tvar size = 16 / viewport.w,\n\t\t\t\tscale = new THREE.Vector2( size * invAspect, size );\n\t\n\t\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\n\t\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\n\t\n\t\t\tvar validArea = new THREE.Box2();\n\t\n\t\t\tvalidArea.min.set( 0, 0 );\n\t\t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\t\n\t\t\tif ( program === undefined ) {\n\t\n\t\t\t\tinit();\n\t\n\t\t\t}\n\t\n\t\t\tgl.useProgram( program );\n\t\n\t\t\tstate.initAttributes();\n\t\t\tstate.enableAttribute( attributes.vertex );\n\t\t\tstate.enableAttribute( attributes.uv );\n\t\t\tstate.disableUnusedAttributes();\n\t\n\t\t\t// loop through all lens flares to update their occlusion and positions\n\t\t\t// setup gl and common used attribs/uniforms\n\t\n\t\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t\t\tgl.uniform1i( uniforms.map, 1 );\n\t\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\t\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\n\t\t\tstate.disable( gl.CULL_FACE );\n\t\t\tstate.setDepthWrite( false );\n\t\n\t\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\t\n\t\t\t\tsize = 16 / viewport.w;\n\t\t\t\tscale.set( size * invAspect, size );\n\t\n\t\t\t\t// calc object screen position\n\t\n\t\t\t\tvar flare = flares[ i ];\n\t\n\t\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\t\n\t\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\t\n\t\t\t\t// setup arrays for gl programs\n\t\n\t\t\t\tscreenPosition.copy( tempPosition );\n\t\n\t\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\t\n\t\t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\t\n\t\t\t\t// screen cull\n\t\n\t\t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\t\n\t\t\t\t\t// save current RGB to temp texture\n\t\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\t\n\t\n\t\t\t\t\t// render pink quad\n\t\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\n\t\t\t\t\tstate.disable( gl.BLEND );\n\t\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\t\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\n\t\t\t\t\t// copy result to occlusionMap\n\t\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\t\n\t\n\t\t\t\t\t// restore graphics\n\t\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\t\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\n\t\t\t\t\t// update object positions\n\t\n\t\t\t\t\tflare.positionScreen.copy( screenPosition );\n\t\n\t\t\t\t\tif ( flare.customUpdateCallback ) {\n\t\n\t\t\t\t\t\tflare.customUpdateCallback( flare );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tflare.updateLensFlares();\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// render flares\n\t\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t\t\t\t\tstate.enable( gl.BLEND );\n\t\n\t\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\t\n\t\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\t\n\t\t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t\t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t\t\t\t\t\t\tscreenPosition.z = sprite.z;\n\t\n\t\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\t\n\t\t\t\t\t\t\tscale.x = size * invAspect;\n\t\t\t\t\t\t\tscale.y = size;\n\t\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\t\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\t\n\t\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t\t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\t\n\t\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// restore gl\n\t\n\t\t\tstate.enable( gl.CULL_FACE );\n\t\t\tstate.enable( gl.DEPTH_TEST );\n\t\t\tstate.setDepthWrite( true );\n\t\n\t\t\trenderer.resetGLState();\n\t\n\t\t};\n\t\n\t\tfunction createProgram ( shader ) {\n\t\n\t\t\tvar program = gl.createProgram();\n\t\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\n\t\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\t\n\t\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\t\n\t\t\tgl.compileShader( fragmentShader );\n\t\t\tgl.compileShader( vertexShader );\n\t\n\t\t\tgl.attachShader( program, fragmentShader );\n\t\t\tgl.attachShader( program, vertexShader );\n\t\n\t\t\tgl.linkProgram( program );\n\t\n\t\t\treturn program;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/renderers/webgl/plugins/SpritePlugin.js\n\t\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.SpritePlugin = function ( renderer, sprites ) {\n\t\n\t\tvar gl = renderer.context;\n\t\tvar state = renderer.state;\n\t\n\t\tvar vertexBuffer, elementBuffer;\n\t\tvar program, attributes, uniforms;\n\t\n\t\tvar texture;\n\t\n\t\t// decompose matrixWorld\n\t\n\t\tvar spritePosition = new THREE.Vector3();\n\t\tvar spriteRotation = new THREE.Quaternion();\n\t\tvar spriteScale = new THREE.Vector3();\n\t\n\t\tfunction init() {\n\t\n\t\t\tvar vertices = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5,  0, 0,\n\t\t\t\t  0.5, - 0.5,  1, 0,\n\t\t\t\t  0.5,   0.5,  1, 1,\n\t\t\t\t- 0.5,   0.5,  0, 1\n\t\t\t] );\n\t\n\t\t\tvar faces = new Uint16Array( [\n\t\t\t\t0, 1, 2,\n\t\t\t\t0, 2, 3\n\t\t\t] );\n\t\n\t\t\tvertexBuffer  = gl.createBuffer();\n\t\t\telementBuffer = gl.createBuffer();\n\t\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\t\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\t\n\t\t\tprogram = createProgram();\n\t\n\t\t\tattributes = {\n\t\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t\t\t};\n\t\n\t\t\tuniforms = {\n\t\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\t\n\t\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\t\n\t\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\t\n\t\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\t\n\t\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\t\n\t\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t\t\t};\n\t\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = 8;\n\t\t\tcanvas.height = 8;\n\t\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.fillStyle = 'white';\n\t\t\tcontext.fillRect( 0, 0, 8, 8 );\n\t\n\t\t\ttexture = new THREE.Texture( canvas );\n\t\t\ttexture.needsUpdate = true;\n\t\n\t\t}\n\t\n\t\tthis.render = function ( scene, camera ) {\n\t\n\t\t\tif ( sprites.length === 0 ) return;\n\t\n\t\t\t// setup gl\n\t\n\t\t\tif ( program === undefined ) {\n\t\n\t\t\t\tinit();\n\t\n\t\t\t}\n\t\n\t\t\tgl.useProgram( program );\n\t\n\t\t\tstate.initAttributes();\n\t\t\tstate.enableAttribute( attributes.position );\n\t\t\tstate.enableAttribute( attributes.uv );\n\t\t\tstate.disableUnusedAttributes();\n\t\n\t\t\tstate.disable( gl.CULL_FACE );\n\t\t\tstate.enable( gl.BLEND );\n\t\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\t\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\n\t\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\t\n\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\tgl.uniform1i( uniforms.map, 0 );\n\t\n\t\t\tvar oldFogType = 0;\n\t\t\tvar sceneFogType = 0;\n\t\t\tvar fog = scene.fog;\n\t\n\t\t\tif ( fog ) {\n\t\n\t\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\t\n\t\t\t\tif ( fog instanceof THREE.Fog ) {\n\t\n\t\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\t\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\t\toldFogType = 1;\n\t\t\t\t\tsceneFogType = 1;\n\t\n\t\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\t\n\t\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\t\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\t\toldFogType = 2;\n\t\t\t\t\tsceneFogType = 2;\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\t\toldFogType = 0;\n\t\t\t\tsceneFogType = 0;\n\t\n\t\t\t}\n\t\n\t\n\t\t\t// update positions and sort\n\t\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar sprite = sprites[ i ];\n\t\n\t\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\t\n\t\t\t}\n\t\n\t\t\tsprites.sort( painterSortStable );\n\t\n\t\t\t// render all sprites\n\t\n\t\t\tvar scale = [];\n\t\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar sprite = sprites[ i ];\n\t\t\t\tvar material = sprite.material;\n\t\n\t\t\t\tif ( material.visible === false ) continue;\n\t\n\t\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\t\n\t\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\t\n\t\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\t\tscale[ 1 ] = spriteScale.y;\n\t\n\t\t\t\tvar fogType = 0;\n\t\n\t\t\t\tif ( scene.fog && material.fog ) {\n\t\n\t\t\t\t\tfogType = sceneFogType;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( oldFogType !== fogType ) {\n\t\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\t\toldFogType = fogType;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( material.map !== null ) {\n\t\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\t\n\t\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\t\n\t\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t\t\t\tstate.setDepthTest( material.depthTest );\n\t\t\t\tstate.setDepthWrite( material.depthWrite );\n\t\n\t\t\t\tif ( material.map ) {\n\t\n\t\t\t\t\trenderer.setTexture2D( material.map, 0 );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\trenderer.setTexture2D( texture, 0 );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\t\n\t\t\t}\n\t\n\t\t\t// restore gl\n\t\n\t\t\tstate.enable( gl.CULL_FACE );\n\t\n\t\t\trenderer.resetGLState();\n\t\n\t\t};\n\t\n\t\tfunction createProgram () {\n\t\n\t\t\tvar program = gl.createProgram();\n\t\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\n\t\t\tgl.shaderSource( vertexShader, [\n\t\n\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\t\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform float rotation;',\n\t\t\t\t'uniform vec2 scale;',\n\t\t\t\t'uniform vec2 uvOffset;',\n\t\t\t\t'uniform vec2 uvScale;',\n\t\n\t\t\t\t'attribute vec2 position;',\n\t\t\t\t'attribute vec2 uv;',\n\t\n\t\t\t\t'varying vec2 vUV;',\n\t\n\t\t\t\t'void main() {',\n\t\n\t\t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\t\n\t\t\t\t\t'vec2 alignedPosition = position * scale;',\n\t\n\t\t\t\t\t'vec2 rotatedPosition;',\n\t\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\t\n\t\t\t\t\t'vec4 finalPosition;',\n\t\n\t\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\t\n\t\t\t\t\t'gl_Position = finalPosition;',\n\t\n\t\t\t\t'}'\n\t\n\t\t\t].join( '\\n' ) );\n\t\n\t\t\tgl.shaderSource( fragmentShader, [\n\t\n\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\t\n\t\t\t\t'uniform vec3 color;',\n\t\t\t\t'uniform sampler2D map;',\n\t\t\t\t'uniform float opacity;',\n\t\n\t\t\t\t'uniform int fogType;',\n\t\t\t\t'uniform vec3 fogColor;',\n\t\t\t\t'uniform float fogDensity;',\n\t\t\t\t'uniform float fogNear;',\n\t\t\t\t'uniform float fogFar;',\n\t\t\t\t'uniform float alphaTest;',\n\t\n\t\t\t\t'varying vec2 vUV;',\n\t\n\t\t\t\t'void main() {',\n\t\n\t\t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\t\n\t\t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\t\n\t\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\t\n\t\t\t\t\t'if ( fogType > 0 ) {',\n\t\n\t\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t\t\t\t\t\t'float fogFactor = 0.0;',\n\t\n\t\t\t\t\t\t'if ( fogType == 1 ) {',\n\t\n\t\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\t\n\t\t\t\t\t\t'} else {',\n\t\n\t\t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\t\n\t\t\t\t\t\t'}',\n\t\n\t\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\t\n\t\t\t\t\t'}',\n\t\n\t\t\t\t'}'\n\t\n\t\t\t].join( '\\n' ) );\n\t\n\t\t\tgl.compileShader( vertexShader );\n\t\t\tgl.compileShader( fragmentShader );\n\t\n\t\t\tgl.attachShader( program, vertexShader );\n\t\t\tgl.attachShader( program, fragmentShader );\n\t\n\t\t\tgl.linkProgram( program );\n\t\n\t\t\treturn program;\n\t\n\t\t}\n\t\n\t\tfunction painterSortStable ( a, b ) {\n\t\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\t\n\t\t\t\treturn a.renderOrder - b.renderOrder;\n\t\n\t\t\t} else if ( a.z !== b.z ) {\n\t\n\t\t\t\treturn b.z - a.z;\n\t\n\t\t\t} else {\n\t\n\t\t\t\treturn b.id - a.id;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/Three.Legacy.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tObject.assign( THREE, {\n\t\tFace4: function ( a, b, c, d, normal, color, materialIndex ) {\n\t\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\t\treturn new THREE.Face3( a, b, c, normal, color, materialIndex );\n\t\t},\n\t\tLineStrip: 0,\n\t\tLinePieces: 1,\n\t\tMeshFaceMaterial: THREE.MultiMaterial,\n\t\tPointCloud: function ( geometry, material ) {\n\t\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\t\treturn new THREE.Points( geometry, material );\n\t\t},\n\t\tParticle: THREE.Sprite,\n\t\tParticleSystem: function ( geometry, material ) {\n\t\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\t\treturn new THREE.Points( geometry, material );\n\t\t},\n\t\tPointCloudMaterial: function ( parameters ) {\n\t\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\t\treturn new THREE.PointsMaterial( parameters );\n\t\t},\n\t\tParticleBasicMaterial: function ( parameters ) {\n\t\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\t\treturn new THREE.PointsMaterial( parameters );\n\t\t},\n\t\tParticleSystemMaterial: function ( parameters ) {\n\t\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\t\treturn new THREE.PointsMaterial( parameters );\n\t\t},\n\t\tVertex: function ( x, y, z ) {\n\t\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\t\treturn new THREE.Vector3( x, y, z );\n\t\t}\n\t} );\n\t\n\t//\n\t\n\tObject.assign( THREE.Box2.prototype, {\n\t\tempty: function () {\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\t\t}\n\t} );\n\t\n\tObject.assign( THREE.Box3.prototype, {\n\t\tempty: function () {\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\t\t}\n\t} );\n\t\n\tObject.assign( THREE.Matrix3.prototype, {\n\t\tmultiplyVector3: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\t\t},\n\t\tmultiplyVector3Array: function ( a ) {\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\t\treturn this.applyToVector3Array( a );\n\t\t}\n\t} );\n\t\n\tObject.assign( THREE.Matrix4.prototype, {\n\t\textractPosition: function ( m ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\t\t},\n\t\tsetRotationFromQuaternion: function ( q ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n\t\t\treturn vector.applyProjection( this );\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\t\t},\n\t\tmultiplyVector3Array: function ( a ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\t\treturn this.applyToVector3Array( a );\n\t\t},\n\t\trotateAxis: function ( v ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\t\t},\n\t\ttranslate: function ( v ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\t\t},\n\t\trotateX: function ( angle ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\t\t},\n\t\trotateY: function ( angle ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\t\t},\n\t\trotateZ: function ( angle ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\t\t},\n\t\trotateByAxis: function ( axis, angle ) {\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\t\t}\n\t} );\n\t\n\tObject.assign( THREE.Plane.prototype, {\n\t\tisIntersectionLine: function ( line ) {\n\t\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\t\treturn this.intersectsLine( line );\n\t\t}\n\t} );\n\t\n\tObject.assign( THREE.Quaternion.prototype, {\n\t\tmultiplyVector3: function ( vector ) {\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\t\treturn vector.applyQuaternion( this );\n\t\t}\n\t} );\n\t\n\tObject.assign( THREE.Ray.prototype, {\n\t\tisIntersectionBox: function ( box ) {\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\t\t}\n\t} );\n\t\n\tObject.assign( THREE.Vector3.prototype, {\n\t\tsetEulerFromRotationMatrix: function () {\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\t\t}\n\t} );\n\t\n\t//\n\t\n\tObject.assign( THREE.Object3D.prototype, {\n\t\tgetChildByName: function ( name ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\t\t},\n\t\trenderDepth: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\t\t}\n\t} );\n\t\n\tObject.defineProperties( THREE.Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\tObject.defineProperties( THREE.LOD.prototype, {\n\t\tobjects: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t//\n\t\n\tTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\t\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\t\n\t\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength( focalLength );\n\t\n\t};\n\t\n\t//\n\t\n\tObject.defineProperties( THREE.Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t//\n\t\n\tObject.defineProperties( THREE.BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t}\n\t} );\n\t\n\tObject.assign( THREE.BufferGeometry.prototype, {\n\t\taddIndex: function ( index ) {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\t\t\tif ( indexOffset !== undefined ) {\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\t\t},\n\t\tclearDrawCalls: function () {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\t\t},\n\t\tcomputeTangents: function () {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\t\t},\n\t\tcomputeOffsets: function () {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\t\t}\n\t} );\n\t\n\tObject.defineProperties( THREE.BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t//\n\t\n\tObject.defineProperties( THREE.Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n\t\t\t\treturn new THREE.Color();\n\t\t\t}\n\t\t}\n\t} );\n\t\n\tObject.defineProperties( THREE.MeshPhongMaterial.prototype, {\n\t\tmetal: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\tObject.defineProperties( THREE.ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t//\n\t\n\tTHREE.EventDispatcher.prototype = Object.assign( Object.create( {\n\t\n\t\t// Note: Extra base ensures these properties are not 'assign'ed.\n\t\n\t\tconstructor: THREE.EventDispatcher,\n\t\n\t\tapply: function ( target ) {\n\t\n\t\t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n\t\t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\t\n\t\t\tObject.assign( target, this );\n\t\n\t\t}\n\t\n\t} ), THREE.EventDispatcher.prototype );\n\t\n\t//\n\t\n\tObject.assign( THREE.WebGLRenderer.prototype, {\n\t\tsupportsFloatTextures: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\t\t\treturn this.capabilities.vertexTextures;\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\t\t},\n\t\tinitMaterial: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\t\t},\n\t\taddPrePlugin: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\t\t},\n\t\taddPostPlugin: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\t\t},\n\t\tupdateShadowMap: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\t\t}\n\t} );\n\t\n\tObject.defineProperties( THREE.WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\t\t\t\treturn this.shadowMap.cullFace;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t\t\t\tthis.shadowMap.cullFace = value;\n\t\t\t}\n\t\t}\n\t} );\n\t\n\tObject.defineProperties( THREE.WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function () {\n\t\t\t\treturn this.renderReverseSided ? THREE.CullFaceFront : THREE.CullFaceBack;\n\t\t\t},\n\t\t\tset: function ( cullFace ) {\n\t\t\t\tvar value = ( cullFace !== THREE.CullFaceBack );\n\t\t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t\t\t\tthis.renderReverseSided = value;\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t//\n\t\n\tObject.defineProperties( THREE.WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t//\n\t\n\tObject.assign( THREE.Audio.prototype, {\n\t\tload: function ( file ) {\n\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n\t\t\tvar scope = this;\n\t\t\tvar audioLoader = new THREE.AudioLoader();\n\t\t\taudioLoader.load( file, function ( buffer ) {\n\t\t\t\tscope.setBuffer( buffer );\n\t\t\t} );\n\t\t\treturn this;\n\t\t}\n\t} );\n\t\n\tObject.assign( THREE.AudioAnalyser.prototype, {\n\t\tgetData: function ( file ) {\n\t\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\t\treturn this.getFrequencyData();\n\t\t}\n\t} );\n\t\n\t//\n\t\n\tTHREE.GeometryUtils = {\n\t\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\t\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\n\t\t\tvar matrix;\n\t\n\t\t\tif ( geometry2 instanceof THREE.Mesh ) {\n\t\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\t\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\t\n\t\t\t}\n\t\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\t\n\t\t},\n\t\n\t\tcenter: function ( geometry ) {\n\t\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.ImageUtils = {\n\t\n\t\tcrossOrigin: undefined,\n\t\n\t\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\t\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\t\n\t\t\tvar loader = new THREE.TextureLoader();\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\t\n\t\t\tif ( mapping ) texture.mapping = mapping;\n\t\n\t\t\treturn texture;\n\t\n\t\t},\n\t\n\t\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\t\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\t\n\t\t\tvar loader = new THREE.CubeTextureLoader();\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\n\t\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\t\n\t\t\tif ( mapping ) texture.mapping = mapping;\n\t\n\t\t\treturn texture;\n\t\n\t\t},\n\t\n\t\tloadCompressedTexture: function () {\n\t\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\t\n\t\t},\n\t\n\t\tloadCompressedTextureCube: function () {\n\t\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\t\n\t\t}\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.Projector = function () {\n\t\n\t\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\t\n\t\tthis.projectVector = function ( vector, camera ) {\n\t\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\t\n\t\t};\n\t\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\t\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\t\n\t\t};\n\t\n\t\tthis.pickingRay = function ( vector, camera ) {\n\t\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\t\n\t\t};\n\t\n\t};\n\t\n\t//\n\t\n\tTHREE.CanvasRenderer = function () {\n\t\n\t\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\t\n\t\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tthis.clear = function () {};\n\t\tthis.render = function () {};\n\t\tthis.setClearColor = function () {};\n\t\tthis.setSize = function () {};\n\t\n\t};\n\t\n\t// File:src/extras/CurveUtils.js\n\t\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\t\n\tTHREE.CurveUtils = {\n\t\n\t\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\t\n\t\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\t\n\t\t},\n\t\n\t\t// Puay Bing, thanks for helping with this derivative!\n\t\n\t\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\t\n\t\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n\t\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n\t\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n\t\t\t\t3 * t * t * p3;\n\t\n\t\t},\n\t\n\t\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\t\n\t\t\t// To check if my formulas are correct\n\t\n\t\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n\t\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\t\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n\t\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\t\n\t\t\treturn h00 + h10 + h01 + h11;\n\t\n\t\t},\n\t\n\t\t// Catmull-Rom\n\t\n\t\tinterpolate: function( p0, p1, p2, p3, t ) {\n\t\n\t\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t * t2;\n\t\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/extras/SceneUtils.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.SceneUtils = {\n\t\n\t\tcreateMultiMaterialObject: function ( geometry, materials ) {\n\t\n\t\t\tvar group = new THREE.Group();\n\t\n\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\t\n\t\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\n\t\n\t\t\t}\n\t\n\t\t\treturn group;\n\t\n\t\t},\n\t\n\t\tdetach: function ( child, parent, scene ) {\n\t\n\t\t\tchild.applyMatrix( parent.matrixWorld );\n\t\t\tparent.remove( child );\n\t\t\tscene.add( child );\n\t\n\t\t},\n\t\n\t\tattach: function ( child, scene, parent ) {\n\t\n\t\t\tvar matrixWorldInverse = new THREE.Matrix4();\n\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\t\t\tchild.applyMatrix( matrixWorldInverse );\n\t\n\t\t\tscene.remove( child );\n\t\t\tparent.add( child );\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/extras/ShapeUtils.js\n\t\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\t\n\tTHREE.ShapeUtils = {\n\t\n\t\t// calculate area of the contour polygon\n\t\n\t\tarea: function ( contour ) {\n\t\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\t\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\t\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\t\n\t\t\t}\n\t\n\t\t\treturn a * 0.5;\n\t\n\t\t},\n\t\n\t\ttriangulate: ( function () {\n\t\n\t\t\t/**\n\t\t\t * This code is a quick port of code written in C++ which was submitted to\n\t\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t\t\t * See original code and more information here:\n\t\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t\t\t *\n\t\t\t * ported to actionscript by Zevan Rosser\n\t\t\t * www.actionsnippet.com\n\t\t\t *\n\t\t\t * ported to javascript by Joshua Koo\n\t\t\t * http://www.lab4games.net/zz85/blog\n\t\t\t *\n\t\t\t */\n\t\n\t\t\tfunction snip( contour, u, v, w, n, verts ) {\n\t\n\t\t\t\tvar p;\n\t\t\t\tvar ax, ay, bx, by;\n\t\t\t\tvar cx, cy, px, py;\n\t\n\t\t\t\tax = contour[ verts[ u ] ].x;\n\t\t\t\tay = contour[ verts[ u ] ].y;\n\t\n\t\t\t\tbx = contour[ verts[ v ] ].x;\n\t\t\t\tby = contour[ verts[ v ] ].y;\n\t\n\t\t\t\tcx = contour[ verts[ w ] ].x;\n\t\t\t\tcy = contour[ verts[ w ] ].y;\n\t\n\t\t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\t\n\t\t\t\tvar aX, aY, bX, bY, cX, cY;\n\t\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\t\n\t\t\t\taX = cx - bx;  aY = cy - by;\n\t\t\t\tbX = ax - cx;  bY = ay - cy;\n\t\t\t\tcX = bx - ax;  cY = by - ay;\n\t\n\t\t\t\tfor ( p = 0; p < n; p ++ ) {\n\t\n\t\t\t\t\tpx = contour[ verts[ p ] ].x;\n\t\t\t\t\tpy = contour[ verts[ p ] ].y;\n\t\n\t\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\t\n\t\t\t\t\tapx = px - ax;  apy = py - ay;\n\t\t\t\t\tbpx = px - bx;  bpy = py - by;\n\t\t\t\t\tcpx = px - cx;  cpy = py - cy;\n\t\n\t\t\t\t\t// see if p is inside triangle abc\n\t\n\t\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t\t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\t\n\t\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t}\n\t\n\t\t\t// takes in an contour array and returns\n\t\n\t\t\treturn function triangulate( contour, indices ) {\n\t\n\t\t\t\tvar n = contour.length;\n\t\n\t\t\t\tif ( n < 3 ) return null;\n\t\n\t\t\t\tvar result = [],\n\t\t\t\t\tverts = [],\n\t\t\t\t\tvertIndices = [];\n\t\n\t\t\t\t/* we want a counter-clockwise polygon in verts */\n\t\n\t\t\t\tvar u, v, w;\n\t\n\t\t\t\tif ( THREE.ShapeUtils.area( contour ) > 0.0 ) {\n\t\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar nv = n;\n\t\n\t\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\t\n\t\t\t\tvar count = 2 * nv;   /* error detection */\n\t\n\t\t\t\tfor ( v = nv - 1; nv > 2; ) {\n\t\n\t\t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\t\n\t\t\t\t\tif ( ( count -- ) <= 0 ) {\n\t\n\t\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\t\n\t\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t\t\t\t\t\t//return null;\n\t\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\t\n\t\t\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\t\t\treturn result;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\t\n\t\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\t\n\t\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\t\n\t\t\t\t\t\tvar a, b, c, s, t;\n\t\n\t\t\t\t\t\t/* true names of the vertices */\n\t\n\t\t\t\t\t\ta = verts[ u ];\n\t\t\t\t\t\tb = verts[ v ];\n\t\t\t\t\t\tc = verts[ w ];\n\t\n\t\t\t\t\t\t/* output Triangle */\n\t\n\t\t\t\t\t\tresult.push( [ contour[ a ],\n\t\t\t\t\t\t\tcontour[ b ],\n\t\t\t\t\t\t\tcontour[ c ] ] );\n\t\n\t\n\t\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\t\n\t\t\t\t\t\t/* remove v from the remaining polygon */\n\t\n\t\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\t\n\t\t\t\t\t\t\tverts[ s ] = verts[ t ];\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tnv --;\n\t\n\t\t\t\t\t\t/* reset error detection counter */\n\t\n\t\t\t\t\t\tcount = 2 * nv;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\treturn result;\n\t\n\t\t\t}\n\t\n\t\t} )(),\n\t\n\t\ttriangulateShape: function ( contour, holes ) {\n\t\n\t\t\tfunction removeDupEndPts(points) {\n\t\n\t\t\t\tvar l = points.length;\n\t\n\t\t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\t\n\t\t\t\t\tpoints.pop();\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tremoveDupEndPts( contour );\n\t\t\tholes.forEach( removeDupEndPts );\n\t\n\t\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\t\n\t\t\t\t// inOtherPt needs to be collinear to the inSegment\n\t\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\t\n\t\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\t\n\t\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\t\n\t\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\t\n\t\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\t\n\t\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\t\n\t\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\t\n\t\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\t\n\t\t\t\t\t// not parallel\n\t\n\t\t\t\t\tvar perpSeg2;\n\t\t\t\t\tif ( limit > 0 ) {\n\t\n\t\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// i.e. to reduce rounding errors\n\t\t\t\t\t// intersection at endpoint of segment#1?\n\t\t\t\t\tif ( perpSeg2 === 0 ) {\n\t\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\n\t\n\t\t\t\t\t}\n\t\t\t\t\tif ( perpSeg2 === limit ) {\n\t\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\t\treturn [ inSeg1Pt2 ];\n\t\n\t\t\t\t\t}\n\t\t\t\t\t// intersection at endpoint of segment#2?\n\t\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\t\n\t\t\t\t\t// return real intersection point\n\t\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\t\n\t\t\t\t\t// they are collinear or degenerate\n\t\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t\t\t\t\t// both segments are points\n\t\t\t\t\tif ( seg1Pt && seg2Pt ) {\n\t\n\t\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\t\n\t\t\t\t\t}\n\t\t\t\t\t// segment#1  is a single point\n\t\t\t\t\tif ( seg1Pt ) {\n\t\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\n\t\n\t\t\t\t\t}\n\t\t\t\t\t// segment#2  is a single point\n\t\t\t\t\tif ( seg2Pt ) {\n\t\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t\t\t\t\t\treturn [ inSeg2Pt1 ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// they are collinear segments, which might overlap\n\t\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t\t\t\t\tif ( seg1dx !== 0 ) {\n\t\n\t\t\t\t\t\t// the segments are NOT on a vertical line\n\t\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\t\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\t\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// the segments are on a vertical line\n\t\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\t\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\t\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\t\n\t\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\t\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\t\treturn [ seg2min ];\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t\t\t\t\t\treturn\t[ seg2min, seg2max ];\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\t\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\t\treturn [ seg1min ];\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t\t\t\t\t\treturn\t[ seg1min, seg2max ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\t\n\t\t\t\t// The order of legs is important\n\t\n\t\t\t\t// translation of all points, so that Vertex is at (0,0)\n\t\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\t\n\t\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\t\n\t\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\t\n\t\t\t\t\t// angle != 180 deg.\n\t\n\t\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\t\n\t\t\t\t\tif ( from2toAngle > 0 ) {\n\t\n\t\t\t\t\t\t// main angle < 180 deg.\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// main angle > 180 deg.\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// angle == 180 deg.\n\t\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t\t\t\t\treturn\t( from2otherAngle > 0 );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\n\t\t\tfunction removeHoles( contour, holes ) {\n\t\n\t\t\t\tvar shape = contour.concat(); // work on this shape\n\t\t\t\tvar hole;\n\t\n\t\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\t\n\t\t\t\t\t// Check if hole point lies within angle around shape point\n\t\t\t\t\tvar lastShapeIdx = shape.length - 1;\n\t\n\t\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\t\n\t\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\t\n\t\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t\t\t\t\tif ( ! insideAngle ) {\n\t\n\t\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t\t\t\t\t\treturn\tfalse;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Check if shape point lies within angle around hole point\n\t\t\t\t\tvar lastHoleIdx = hole.length - 1;\n\t\n\t\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\t\n\t\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\t\n\t\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t\t\t\t\tif ( ! insideAngle ) {\n\t\n\t\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t\t\t\t\t\treturn\tfalse;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn\ttrue;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\t\n\t\t\t\t\t// checks for intersections with shape edges\n\t\t\t\t\tvar sIdx, nextIdx, intersection;\n\t\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\t\n\t\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn\tfalse;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar indepHoles = [];\n\t\n\t\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\t\n\t\t\t\t\t// checks for intersections with hole edges\n\t\t\t\t\tvar ihIdx, chkHole,\n\t\t\t\t\t\thIdx, nextIdx, intersection;\n\t\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\t\n\t\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\t\n\t\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\t\t\t\treturn\tfalse;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar holeIndex, shapeIndex,\n\t\t\t\t\tshapePt, holePt,\n\t\t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t\t\t\t\ttmpShape1, tmpShape2,\n\t\t\t\t\ttmpHole1, tmpHole2;\n\t\n\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\t\t\tindepHoles.push( h );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar minShapeIndex = 0;\n\t\t\t\tvar counter = indepHoles.length * 2;\n\t\t\t\twhile ( indepHoles.length > 0 ) {\n\t\n\t\t\t\t\tcounter --;\n\t\t\t\t\tif ( counter < 0 ) {\n\t\n\t\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// search for shape-vertex and hole-vertex,\n\t\t\t\t\t// which can be connected without intersections\n\t\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\t\n\t\t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t\t\t\t\t\tholeIndex\t= - 1;\n\t\n\t\t\t\t\t\t// search for hole which can be reached without intersections\n\t\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\t\n\t\t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\t\n\t\t\t\t\t\t\t// prevent multiple checks\n\t\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\t\n\t\t\t\t\t\t\thole = holes[ holeIdx ];\n\t\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\t\n\t\t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\t\n\t\t\t\t\t\t\t\tholeIndex = h2;\n\t\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\t\n\t\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\t\n\t\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\t\n\t\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\t\n\t\t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\t\n\t\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn shape; \t\t\t/* shape with no holes */\n\t\n\t\t\t}\n\t\n\t\n\t\t\tvar i, il, f, face,\n\t\t\t\tkey, index,\n\t\t\t\tallPointsMap = {};\n\t\n\t\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\t\n\t\t\tvar allpoints = contour.concat();\n\t\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\t\n\t\t\t}\n\t\n\t\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\t\n\t\t\t// prepare all points map\n\t\n\t\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\t\n\t\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\t\n\t\t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\t\n\t\t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tallPointsMap[ key ] = i;\n\t\n\t\t\t}\n\t\n\t\t\t// remove holes by cutting paths to holes and adding them to the shape\n\t\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\t\n\t\t\tvar triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t\t\t//console.log( \"triangles\",triangles, triangles.length );\n\t\n\t\t\t// check all face vertices against all points map\n\t\n\t\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\t\n\t\t\t\tface = triangles[ i ];\n\t\n\t\t\t\tfor ( f = 0; f < 3; f ++ ) {\n\t\n\t\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\t\n\t\t\t\t\tindex = allPointsMap[ key ];\n\t\n\t\t\t\t\tif ( index !== undefined ) {\n\t\n\t\t\t\t\t\tface[ f ] = index;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn triangles.concat();\n\t\n\t\t},\n\t\n\t\tisClockWise: function ( pts ) {\n\t\n\t\t\treturn THREE.ShapeUtils.area( pts ) < 0;\n\t\n\t\t},\n\t\n\t\t// Bezier Curves formulas obtained from\n\t\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\t\n\t\t// Quad Bezier Functions\n\t\n\t\tb2: ( function () {\n\t\n\t\t\tfunction b2p0( t, p ) {\n\t\n\t\t\t\tvar k = 1 - t;\n\t\t\t\treturn k * k * p;\n\t\n\t\t\t}\n\t\n\t\t\tfunction b2p1( t, p ) {\n\t\n\t\t\t\treturn 2 * ( 1 - t ) * t * p;\n\t\n\t\t\t}\n\t\n\t\t\tfunction b2p2( t, p ) {\n\t\n\t\t\t\treturn t * t * p;\n\t\n\t\t\t}\n\t\n\t\t\treturn function b2( t, p0, p1, p2 ) {\n\t\n\t\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\t\n\t\t\t};\n\t\n\t\t} )(),\n\t\n\t\t// Cubic Bezier Functions\n\t\n\t\tb3: ( function () {\n\t\n\t\t\tfunction b3p0( t, p ) {\n\t\n\t\t\t\tvar k = 1 - t;\n\t\t\t\treturn k * k * k * p;\n\t\n\t\t\t}\n\t\n\t\t\tfunction b3p1( t, p ) {\n\t\n\t\t\t\tvar k = 1 - t;\n\t\t\t\treturn 3 * k * k * t * p;\n\t\n\t\t\t}\n\t\n\t\t\tfunction b3p2( t, p ) {\n\t\n\t\t\t\tvar k = 1 - t;\n\t\t\t\treturn 3 * k * t * t * p;\n\t\n\t\t\t}\n\t\n\t\t\tfunction b3p3( t, p ) {\n\t\n\t\t\t\treturn t * t * t * p;\n\t\n\t\t\t}\n\t\n\t\t\treturn function b3( t, p0, p1, p2, p3 ) {\n\t\n\t\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\t\n\t\t\t};\n\t\n\t\t} )()\n\t\n\t};\n\t\n\t// File:src/extras/core/Curve.js\n\t\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of Curve methods\n\t * .getPoint(t), getTangent(t)\n\t * .getPointAt(u), getTagentAt(u)\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following classes subclasses THREE.Curve:\n\t *\n\t * -- 2d classes --\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.SplineCurve\n\t * THREE.ArcCurve\n\t * THREE.EllipseCurve\n\t *\n\t * -- 3d classes --\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.SplineCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath\n\t *\n\t **/\n\t\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\t\n\tTHREE.Curve = function () {\n\t\n\t};\n\t\n\tTHREE.Curve.prototype = {\n\t\n\t\tconstructor: THREE.Curve,\n\t\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\t\n\t\tgetPoint: function ( t ) {\n\t\n\t\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n\t\t\treturn null;\n\t\n\t\t},\n\t\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\t\n\t\tgetPointAt: function ( u ) {\n\t\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t );\n\t\n\t\t},\n\t\n\t\t// Get sequence of points using getPoint( t )\n\t\n\t\tgetPoints: function ( divisions ) {\n\t\n\t\t\tif ( ! divisions ) divisions = 5;\n\t\n\t\t\tvar points = [];\n\t\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\t\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\t\n\t\t\t}\n\t\n\t\t\treturn points;\n\t\n\t\t},\n\t\n\t\t// Get sequence of points using getPointAt( u )\n\t\n\t\tgetSpacedPoints: function ( divisions ) {\n\t\n\t\t\tif ( ! divisions ) divisions = 5;\n\t\n\t\t\tvar points = [];\n\t\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\t\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\t\n\t\t\t}\n\t\n\t\t\treturn points;\n\t\n\t\t},\n\t\n\t\t// Get total curve arc length\n\t\n\t\tgetLength: function () {\n\t\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\t\n\t\t},\n\t\n\t\t// Get list of cumulative segment lengths\n\t\n\t\tgetLengths: function ( divisions ) {\n\t\n\t\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\t\n\t\t\tif ( this.cacheArcLengths\n\t\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n\t\t\t\t&& ! this.needsUpdate ) {\n\t\n\t\t\t\t//console.log( \"cached\", this.cacheArcLengths );\n\t\t\t\treturn this.cacheArcLengths;\n\t\n\t\t\t}\n\t\n\t\t\tthis.needsUpdate = false;\n\t\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\t\n\t\t\tcache.push( 0 );\n\t\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\t\n\t\t\t\tcurrent = this.getPoint ( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\t\n\t\t\t}\n\t\n\t\t\tthis.cacheArcLengths = cache;\n\t\n\t\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\t\n\t\t},\n\t\n\t\tupdateArcLengths: function() {\n\t\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\t\n\t\t},\n\t\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\t\n\t\tgetUtoTmapping: function ( u, distance ) {\n\t\n\t\t\tvar arcLengths = this.getLengths();\n\t\n\t\t\tvar i = 0, il = arcLengths.length;\n\t\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\t\n\t\t\tif ( distance ) {\n\t\n\t\t\t\ttargetArcLength = distance;\n\t\n\t\t\t} else {\n\t\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\t\n\t\t\t}\n\t\n\t\t\t//var time = Date.now();\n\t\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\t\n\t\t\tvar low = 0, high = il - 1, comparison;\n\t\n\t\t\twhile ( low <= high ) {\n\t\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\t\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\t\n\t\t\t\tif ( comparison < 0 ) {\n\t\n\t\t\t\t\tlow = i + 1;\n\t\n\t\t\t\t} else if ( comparison > 0 ) {\n\t\n\t\t\t\t\thigh = i - 1;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t// DONE\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\ti = high;\n\t\n\t\t\t//console.log('b' , i, low, high, Date.now()- time);\n\t\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\t\n\t\t\t\tvar t = i / ( il - 1 );\n\t\t\t\treturn t;\n\t\n\t\t\t}\n\t\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\t\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\t\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\t\n\t\t\t// determine where we are between the 'before' and 'after' points\n\t\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\t\n\t\t\t// add that fractional amount to t\n\t\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\t\n\t\t\treturn t;\n\t\n\t\t},\n\t\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\t\n\t\tgetTangent: function( t ) {\n\t\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\t\n\t\t\t// Capping in case of danger\n\t\n\t\t\tif ( t1 < 0 ) t1 = 0;\n\t\t\tif ( t2 > 1 ) t2 = 1;\n\t\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\t\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\t\n\t\t},\n\t\n\t\tgetTangentAt: function ( u ) {\n\t\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\t\n\t\t}\n\t\n\t};\n\t\n\t// TODO: Transformation for Curves?\n\t\n\t/**************************************************************\n\t *\t3D Curves\n\t **************************************************************/\n\t\n\t// A Factory method for creating new curve subclasses\n\t\n\tTHREE.Curve.create = function ( constructor, getPointFunc ) {\n\t\n\t\tconstructor.prototype = Object.create( THREE.Curve.prototype );\n\t\tconstructor.prototype.constructor = constructor;\n\t\tconstructor.prototype.getPoint = getPointFunc;\n\t\n\t\treturn constructor;\n\t\n\t};\n\t\n\t// File:src/extras/core/CurvePath.js\n\t\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\t\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\t\n\tTHREE.CurvePath = function () {\n\t\n\t\tthis.curves = [];\n\t\n\t\tthis.autoClose = false; // Automatically closes the path\n\t\n\t};\n\t\n\tTHREE.CurvePath.prototype = Object.assign( Object.create( THREE.Curve.prototype ), {\n\t\n\t\tconstructor: THREE.CurvePath,\n\t\n\t\tadd: function ( curve ) {\n\t\n\t\t\tthis.curves.push( curve );\n\t\n\t\t},\n\t\n\t\tclosePath: function () {\n\t\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\t\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\t\n\t\t\t\tthis.curves.push( new THREE.LineCurve( endPoint, startPoint ) );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\t\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\t\n\t\tgetPoint: function ( t ) {\n\t\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\t\n\t\t\t// To think about boundaries points.\n\t\n\t\t\twhile ( i < curveLengths.length ) {\n\t\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\t\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\t\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\n\t\t\t\t\treturn curve.getPointAt( u );\n\t\n\t\t\t\t}\n\t\n\t\t\t\ti ++;\n\t\n\t\t\t}\n\t\n\t\t\treturn null;\n\t\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\t\n\t\t},\n\t\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\t\n\t\tgetLength: function () {\n\t\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\t\n\t\t},\n\t\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\t\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getLengths();\n\t\n\t\t},\n\t\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\n\t\tgetCurveLengths: function () {\n\t\n\t\t\t// We use cache values if curves and cache array are same length\n\t\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\t\n\t\t\t\treturn this.cacheLengths;\n\t\n\t\t\t}\n\t\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\t\n\t\t\tvar lengths = [], sums = 0;\n\t\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\t\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\t\n\t\t\t}\n\t\n\t\t\tthis.cacheLengths = lengths;\n\t\n\t\t\treturn lengths;\n\t\n\t\t},\n\t\n\t\tgetSpacedPoints: function ( divisions ) {\n\t\n\t\t\tif ( ! divisions ) divisions = 40;\n\t\n\t\t\tvar points = [];\n\t\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\t\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.autoClose ) {\n\t\n\t\t\t\tpoints.push( points[ 0 ] );\n\t\n\t\t\t}\n\t\n\t\t\treturn points;\n\t\n\t\t},\n\t\n\t\tgetPoints: function ( divisions ) {\n\t\n\t\t\tdivisions = divisions || 12;\n\t\n\t\t\tvar points = [], last;\n\t\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\t\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = curve instanceof THREE.EllipseCurve ? divisions * 2\n\t\t\t\t\t: curve instanceof THREE.LineCurve ? 1\n\t\t\t\t\t: curve instanceof THREE.SplineCurve ? divisions * curve.points.length\n\t\t\t\t\t: divisions;\n\t\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\t\n\t\t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\t\n\t\t\t\t\tvar point = pts[ j ];\n\t\n\t\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\t\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\t\n\t\t\t\tpoints.push( points[ 0 ] );\n\t\n\t\t\t}\n\t\n\t\t\treturn points;\n\t\n\t\t},\n\t\n\t\t/**************************************************************\n\t\t *\tCreate Geometries Helpers\n\t\t **************************************************************/\n\t\n\t\t/// Generate geometry from path points (for Line or Points objects)\n\t\n\t\tcreatePointsGeometry: function ( divisions ) {\n\t\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\t\n\t\t},\n\t\n\t\t// Generate geometry from equidistant sampling along the path\n\t\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\t\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\t\n\t\t},\n\t\n\t\tcreateGeometry: function ( points ) {\n\t\n\t\t\tvar geometry = new THREE.Geometry();\n\t\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );\n\t\n\t\t\t}\n\t\n\t\t\treturn geometry;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/extras/core/Font.js\n\t\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.Font = function ( data ) {\n\t\n\t\tthis.data = data;\n\t\n\t};\n\t\n\tObject.assign( THREE.Font.prototype, {\n\t\n\t\tgenerateShapes: function ( text, size, divisions ) {\n\t\n\t\t\tfunction createPaths( text ) {\n\t\n\t\t\t\tvar chars = String( text ).split( '' );\n\t\t\t\tvar scale = size / data.resolution;\n\t\t\t\tvar offset = 0;\n\t\n\t\t\t\tvar paths = [];\n\t\n\t\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\t\n\t\t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n\t\t\t\t\toffset += ret.offset;\n\t\n\t\t\t\t\tpaths.push( ret.path );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn paths;\n\t\n\t\t\t}\n\t\n\t\t\tfunction createPath( c, scale, offset ) {\n\t\n\t\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\t\n\t\t\t\tif ( ! glyph ) return;\n\t\n\t\t\t\tvar path = new THREE.ShapePath();\n\t\n\t\t\t\tvar pts = [], b2 = THREE.ShapeUtils.b2, b3 = THREE.ShapeUtils.b3;\n\t\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\t\n\t\t\t\tif ( glyph.o ) {\n\t\n\t\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\t\n\t\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\t\n\t\t\t\t\t\tvar action = outline[ i ++ ];\n\t\n\t\t\t\t\t\tswitch ( action ) {\n\t\n\t\t\t\t\t\t\tcase 'm': // moveTo\n\t\n\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\t\n\t\t\t\t\t\t\t\tpath.moveTo( x, y );\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'l': // lineTo\n\t\n\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\t\n\t\t\t\t\t\t\t\tpath.lineTo( x, y );\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\t\n\t\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t\n\t\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\t\n\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\t\n\t\t\t\t\t\t\t\tif ( laste ) {\n\t\n\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\t\n\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\t\n\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n\t\t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 'b': // bezierCurveTo\n\t\n\t\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\t\n\t\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\t\n\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\t\n\t\t\t\t\t\t\t\tif ( laste ) {\n\t\n\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\t\n\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\t\n\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn { offset: glyph.ha * scale, path: path };\n\t\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tif ( size === undefined ) size = 100;\n\t\t\tif ( divisions === undefined ) divisions = 4;\n\t\n\t\t\tvar data = this.data;\n\t\n\t\t\tvar paths = createPaths( text );\n\t\t\tvar shapes = [];\n\t\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\t\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\t\n\t\t\t}\n\t\n\t\t\treturn shapes;\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/extras/core/Path.js\n\t\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t *\n\t **/\n\t\n\tTHREE.Path = function ( points ) {\n\t\n\t\tTHREE.CurvePath.call( this );\n\t\tthis.currentPoint = new THREE.Vector2();\n\t\n\t\tif ( points ) {\n\t\n\t\t\tthis.fromPoints( points );\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.Path.prototype = Object.assign( Object.create( THREE.CurvePath.prototype ), {\n\t\n\t\tconstructor: THREE.Path,\n\t\n\t\t// Create path using straight lines to connect all points\n\t\t// - vectors: array of Vector2\n\t\tfromPoints: function ( vectors ) {\n\t\n\t\t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\t\n\t\t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\t\n\t\t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tmoveTo: function ( x, y ) {\n\t\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\t\n\t\t},\n\t\n\t\tlineTo: function ( x, y ) {\n\t\n\t\t\tvar curve = new THREE.LineCurve( this.currentPoint.clone(), new THREE.Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\t\n\t\t\tthis.currentPoint.set( x, y );\n\t\n\t\t},\n\t\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t\n\t\t\tvar curve = new THREE.QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew THREE.Vector2( aCPx, aCPy ),\n\t\t\t\tnew THREE.Vector2( aX, aY )\n\t\t\t);\n\t\n\t\t\tthis.curves.push( curve );\n\t\n\t\t\tthis.currentPoint.set( aX, aY );\n\t\n\t\t},\n\t\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t\n\t\t\tvar curve = new THREE.CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew THREE.Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew THREE.Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew THREE.Vector2( aX, aY )\n\t\t\t);\n\t\n\t\t\tthis.curves.push( curve );\n\t\n\t\t\tthis.currentPoint.set( aX, aY );\n\t\n\t\t},\n\t\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\t\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\t\n\t\t\tvar curve = new THREE.SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\t\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\t\n\t\t},\n\t\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\t\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\t\n\t\t},\n\t\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\t\n\t\t},\n\t\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\t\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\n\t\t},\n\t\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t\t\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\n\t\t\tif ( this.curves.length > 0 ) {\n\t\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\t\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\t\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tthis.curves.push( curve );\n\t\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t\n\t// minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\tTHREE.ShapePath = function() {\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\t}\n\t\n\tTHREE.ShapePath.prototype = {\n\t\tmoveTo: function ( x, y ) {\n\t\t\tthis.currentPath = new THREE.Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo( x, y );\n\t\t},\n\t\tlineTo: function ( x, y ) {\n\t\t\tthis.currentPath.lineTo( x, y );\n\t\t},\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\t\t},\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\t\t},\n\t\tsplineThru: function ( pts ) {\n\t\t\tthis.currentPath.splineThru( pts );\n\t\t},\n\t\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\t\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\t\n\t\t\t\tvar shapes = [];\n\t\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\t\n\t\t\t\t\tvar tmpShape = new THREE.Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\n\t\t\t\t\tshapes.push( tmpShape );\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn shapes;\n\t\n\t\t\t}\n\t\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\t\n\t\t\t\tvar polyLen = inPolygon.length;\n\t\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\t\n\t\t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\t\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\t\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\t\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\t\n\t\t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\t\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\t\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\n\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn\tinside;\n\t\n\t\t\t}\n\t\n\t\t\tvar isClockWise = THREE.ShapeUtils.isClockWise;\n\t\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) return [];\n\t\n\t\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\t\n\t\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\t\n\t\t\tif ( subPaths.length === 1 ) {\n\t\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new THREE.Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\t\n\t\t\t}\n\t\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\t\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\t\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\t\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\t\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\t\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\t\n\t\t\t\tif ( solid ) {\n\t\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\t\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\t\n\t\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\t\n\t\t\t\t\t//console.log('cw', i);\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\t\n\t\t\t\t\t//console.log('ccw', i);\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\t\n\t\n\t\t\tif ( newShapes.length > 1 ) {\n\t\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\t\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\t\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\t\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\t\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\t\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\t\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\t\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\t\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\t\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\t\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\t\n\t\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\t\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\t\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar tmpHoles;\n\t\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\t\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\t\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t//console.log(\"shape\", shapes);\n\t\n\t\t\treturn shapes;\n\t\n\t\t}\n\t}\n\t\n\t// File:src/extras/core/Shape.js\n\t\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\t\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\t\n\tTHREE.Shape = function () {\n\t\n\t\tTHREE.Path.apply( this, arguments );\n\t\n\t\tthis.holes = [];\n\t\n\t};\n\t\n\tTHREE.Shape.prototype = Object.assign( Object.create( THREE.Path.prototype ), {\n\t\n\t\tconstructor: THREE.Shape,\n\t\n\t\t// Convenience method to return ExtrudeGeometry\n\t\n\t\textrude: function ( options ) {\n\t\n\t\t\treturn new THREE.ExtrudeGeometry( this, options );\n\t\n\t\t},\n\t\n\t\t// Convenience method to return ShapeGeometry\n\t\n\t\tmakeGeometry: function ( options ) {\n\t\n\t\t\treturn new THREE.ShapeGeometry( this, options );\n\t\n\t\t},\n\t\n\t\tgetPointsHoles: function ( divisions ) {\n\t\n\t\t\tvar holesPts = [];\n\t\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\t\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\t\n\t\t\t}\n\t\n\t\t\treturn holesPts;\n\t\n\t\t},\n\t\n\t\t// Get points of shape and holes (keypoints based on segments parameter)\n\t\n\t\textractAllPoints: function ( divisions ) {\n\t\n\t\t\treturn {\n\t\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\t\n\t\t\t};\n\t\n\t\t},\n\t\n\t\textractPoints: function ( divisions ) {\n\t\n\t\t\treturn this.extractAllPoints( divisions );\n\t\n\t\t}\n\t\n\t} );\n\t\n\t// File:src/extras/curves/LineCurve.js\n\t\n\t/**************************************************************\n\t *\tLine\n\t **************************************************************/\n\t\n\tTHREE.LineCurve = function ( v1, v2 ) {\n\t\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\n\t};\n\t\n\tTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\n\tTHREE.LineCurve.prototype.constructor = THREE.LineCurve;\n\t\n\tTHREE.LineCurve.prototype.getPoint = function ( t ) {\n\t\n\t\tif ( t === 1 ) {\n\t\n\t\t\treturn this.v2.clone();\n\t\n\t\t}\n\t\n\t\tvar point = this.v2.clone().sub( this.v1 );\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\t\n\t\treturn point;\n\t\n\t};\n\t\n\t// Line curve is linear, so we can overwrite default getPointAt\n\t\n\tTHREE.LineCurve.prototype.getPointAt = function ( u ) {\n\t\n\t\treturn this.getPoint( u );\n\t\n\t};\n\t\n\tTHREE.LineCurve.prototype.getTangent = function( t ) {\n\t\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\t\n\t\treturn tangent.normalize();\n\t\n\t};\n\t\n\t// File:src/extras/curves/QuadraticBezierCurve.js\n\t\n\t/**************************************************************\n\t *\tQuadratic Bezier curve\n\t **************************************************************/\n\t\n\t\n\tTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\n\t\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\n\t};\n\t\n\tTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\n\tTHREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\n\t\n\t\n\tTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\t\n\t\tvar b2 = THREE.ShapeUtils.b2;\n\t\n\t\treturn new THREE.Vector2(\n\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n\t\t);\n\t\n\t};\n\t\n\t\n\tTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\t\n\t\tvar tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\n\t\n\t\treturn new THREE.Vector2(\n\t\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n\t\t).normalize();\n\t\n\t};\n\t\n\t// File:src/extras/curves/CubicBezierCurve.js\n\t\n\t/**************************************************************\n\t *\tCubic Bezier curve\n\t **************************************************************/\n\t\n\tTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\n\t\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\t\n\t};\n\t\n\tTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\n\tTHREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\n\t\n\tTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\n\t\n\t\tvar b3 = THREE.ShapeUtils.b3;\n\t\n\t\treturn new THREE.Vector2( \n\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t\t);\n\t\n\t};\n\t\n\tTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\n\t\n\t\tvar tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\n\t\n\t\treturn new THREE.Vector2( \n\t\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t\t).normalize();\n\t\n\t};\n\t\n\t// File:src/extras/curves/SplineCurve.js\n\t\n\t/**************************************************************\n\t *\tSpline curve\n\t **************************************************************/\n\t\n\tTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\n\t\n\t\tthis.points = ( points == undefined ) ? [] : points;\n\t\n\t};\n\t\n\tTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\n\tTHREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\n\t\n\tTHREE.SplineCurve.prototype.getPoint = function ( t ) {\n\t\n\t\tvar points = this.points;\n\t\tvar point = ( points.length - 1 ) * t;\n\t\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\t\n\t\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar point1 = points[ intPoint ];\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\t\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\n\t\n\t\treturn new THREE.Vector2(\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n\t\t);\n\t\n\t};\n\t\n\t// File:src/extras/curves/EllipseCurve.js\n\t\n\t/**************************************************************\n\t *\tEllipse curve\n\t **************************************************************/\n\t\n\tTHREE.EllipseCurve = function( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\t\n\t\tthis.aX = aX;\n\t\tthis.aY = aY;\n\t\n\t\tthis.xRadius = xRadius;\n\t\tthis.yRadius = yRadius;\n\t\n\t\tthis.aStartAngle = aStartAngle;\n\t\tthis.aEndAngle = aEndAngle;\n\t\n\t\tthis.aClockwise = aClockwise;\n\t\n\t\tthis.aRotation = aRotation || 0;\n\t\n\t};\n\t\n\tTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\n\tTHREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\n\t\n\tTHREE.EllipseCurve.prototype.getPoint = function( t ) {\n\t\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\t\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\t\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\t\n\t\t\tif ( samePoints ) {\n\t\n\t\t\t\tdeltaAngle = 0;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tdeltaAngle = twoPi;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\t\n\t\t\tif ( deltaAngle === twoPi ) {\n\t\n\t\t\t\tdeltaAngle = - twoPi;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\t\n\t\tif ( this.aRotation !== 0 ) {\n\t\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\t\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\t\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\n\t\t}\n\t\n\t\treturn new THREE.Vector2( x, y );\n\t\n\t};\n\t\n\t// File:src/extras/curves/ArcCurve.js\n\t\n\t/**************************************************************\n\t *\tArc curve\n\t **************************************************************/\n\t\n\tTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\t\n\t\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\t\n\t};\n\t\n\tTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\n\tTHREE.ArcCurve.prototype.constructor = THREE.ArcCurve;\n\t\n\t// File:src/extras/curves/LineCurve3.js\n\t\n\t/**************************************************************\n\t *\tLine3D\n\t **************************************************************/\n\t\n\tTHREE.LineCurve3 = THREE.Curve.create(\n\t\n\t\tfunction ( v1, v2 ) {\n\t\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\n\t\t},\n\t\n\t\tfunction ( t ) {\n\t\n\t\t\tif ( t === 1 ) {\n\t\n\t\t\t\treturn this.v2.clone();\n\t\n\t\t\t}\n\t\n\t\t\tvar vector = new THREE.Vector3();\n\t\n\t\t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t\t\tvector.multiplyScalar( t );\n\t\t\tvector.add( this.v1 );\n\t\n\t\t\treturn vector;\n\t\n\t\t}\n\t\n\t);\n\t\n\t// File:src/extras/curves/QuadraticBezierCurve3.js\n\t\n\t/**************************************************************\n\t *\tQuadratic Bezier 3D curve\n\t **************************************************************/\n\t\n\tTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\n\t\n\t\tfunction ( v0, v1, v2 ) {\n\t\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\n\t\t},\n\t\n\t\tfunction ( t ) {\n\t\n\t\t\tvar b2 = THREE.ShapeUtils.b2;\t\t\n\t\n\t\t\treturn new THREE.Vector3(\n\t\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n\t\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n\t\t\t);\n\t\n\t\t}\n\t\n\t);\n\t\n\t// File:src/extras/curves/CubicBezierCurve3.js\n\t\n\t/**************************************************************\n\t *\tCubic Bezier 3D curve\n\t **************************************************************/\n\t\n\tTHREE.CubicBezierCurve3 = THREE.Curve.create(\n\t\n\t\tfunction ( v0, v1, v2, v3 ) {\n\t\n\t\t\tthis.v0 = v0;\n\t\t\tthis.v1 = v1;\n\t\t\tthis.v2 = v2;\n\t\t\tthis.v3 = v3;\n\t\n\t\t},\n\t\n\t\tfunction ( t ) {\n\t\n\t\t\tvar b3 = THREE.ShapeUtils.b3;\n\t\n\t\t\treturn new THREE.Vector3(\n\t\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n\t\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n\t\t\t);\n\t\n\t\t}\n\t\n\t);\n\t\n\t// File:src/extras/curves/SplineCurve3.js\n\t\n\t/**************************************************************\n\t *\tSpline 3D curve\n\t **************************************************************/\n\t\n\t\n\tTHREE.SplineCurve3 = THREE.Curve.create(\n\t\n\t\tfunction ( points /* array of Vector3 */ ) {\n\t\n\t\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n\t\t\tthis.points = ( points == undefined ) ? [] : points;\n\t\n\t\t},\n\t\n\t\tfunction ( t ) {\n\t\n\t\t\tvar points = this.points;\n\t\t\tvar point = ( points.length - 1 ) * t;\n\t\n\t\t\tvar intPoint = Math.floor( point );\n\t\t\tvar weight = point - intPoint;\n\t\n\t\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n\t\t\tvar point1 = points[ intPoint ];\n\t\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\t\n\t\t\tvar interpolate = THREE.CurveUtils.interpolate;\n\t\n\t\t\treturn new THREE.Vector3(\n\t\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n\t\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n\t\t\t);\n\t\n\t\t}\n\t\n\t);\n\t\n\t// File:src/extras/curves/CatmullRomCurve3.js\n\t\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\t\n\tTHREE.CatmullRomCurve3 = ( function() {\n\t\n\t\tvar\n\t\t\ttmp = new THREE.Vector3(),\n\t\t\tpx = new CubicPoly(),\n\t\t\tpy = new CubicPoly(),\n\t\t\tpz = new CubicPoly();\n\t\n\t\t/*\n\t\tBased on an optimized c++ solution in\n\t\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t\t - http://ideone.com/NoEbVM\n\t\n\t\tThis CubicPoly class could be used for reusing some variables and calculations,\n\t\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\t\twhich can be placed in CurveUtils.\n\t\t*/\n\t\n\t\tfunction CubicPoly() {\n\t\n\t\t}\n\t\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\t\n\t\t\tthis.c0 = x0;\n\t\t\tthis.c1 = t0;\n\t\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\n\t\t};\n\t\n\t\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\t\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\t\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\t\n\t\t\t// initCubicPoly\n\t\t\tthis.init( x1, x2, t1, t2 );\n\t\n\t\t};\n\t\n\t\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\t\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\t\n\t\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\t\n\t\t};\n\t\n\t\tCubicPoly.prototype.calc = function( t ) {\n\t\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t2 * t;\n\t\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\t\n\t\t};\n\t\n\t\t// Subclass Three.js curve\n\t\treturn THREE.Curve.create(\n\t\n\t\t\tfunction ( p /* array of Vector3 */ ) {\n\t\n\t\t\t\tthis.points = p || [];\n\t\t\t\tthis.closed = false;\n\t\n\t\t\t},\n\t\n\t\t\tfunction ( t ) {\n\t\n\t\t\t\tvar points = this.points,\n\t\t\t\t\tpoint, intPoint, weight, l;\n\t\n\t\t\t\tl = points.length;\n\t\n\t\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\t\n\t\t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\t\t\tintPoint = Math.floor( point );\n\t\t\t\tweight = point - intPoint;\n\t\n\t\t\t\tif ( this.closed ) {\n\t\n\t\t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\t\n\t\t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\t\n\t\t\t\t\tintPoint = l - 2;\n\t\t\t\t\tweight = 1;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar p0, p1, p2, p3; // 4 points\n\t\n\t\t\t\tif ( this.closed || intPoint > 0 ) {\n\t\n\t\t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// extrapolate first point\n\t\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\t\t\tp0 = tmp;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tp1 = points[ intPoint % l ];\n\t\t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\t\n\t\t\t\tif ( this.closed || intPoint + 2 < l ) {\n\t\n\t\t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// extrapolate last point\n\t\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\t\t\tp3 = tmp;\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\t\n\t\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\t\n\t\t\t\t\t// safety check for repeated points\n\t\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\t\n\t\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\t\n\t\t\t\t} else if ( this.type === 'catmullrom' ) {\n\t\n\t\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar v = new THREE.Vector3(\n\t\t\t\t\tpx.calc( weight ),\n\t\t\t\t\tpy.calc( weight ),\n\t\t\t\t\tpz.calc( weight )\n\t\t\t\t);\n\t\n\t\t\t\treturn v;\n\t\n\t\t\t}\n\t\n\t\t);\n\t\n\t} )();\n\t\n\t// File:src/extras/curves/ClosedSplineCurve3.js\n\t\n\t/**************************************************************\n\t *\tClosed Spline 3D curve\n\t **************************************************************/\n\t\n\t\n\tTHREE.ClosedSplineCurve3 = function ( points ) {\n\t\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\t\n\t\tTHREE.CatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\t\n\t};\n\t\n\tTHREE.ClosedSplineCurve3.prototype = Object.create( THREE.CatmullRomCurve3.prototype );\n\t\n\t// File:src/extras/geometries/BoxGeometry.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n\t */\n\t\n\tTHREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\t\n\t\tTHREE.Geometry.call( this );\n\t\n\t\tthis.type = 'BoxGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\t\n\t\tthis.fromBufferGeometry( new THREE.BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\tthis.mergeVertices();\n\t\n\t};\n\t\n\tTHREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\n\t\n\tTHREE.CubeGeometry = THREE.BoxGeometry;\n\t\n\t// File:src/extras/geometries/BoxBufferGeometry.js\n\t\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\t\n\tTHREE.BoxBufferGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\t\n\t\tTHREE.BufferGeometry.call( this );\n\t\n\t\tthis.type = 'BoxBufferGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\t\n\t\tvar scope = this;\n\t\n\t\t// segments\n\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\t\n\t\t// these are used to calculate buffer length\n\t\tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n\t\tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\t\n\t\t// buffers\n\t\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t\tvar vertices = new Float32Array( vertexCount * 3 );\n\t\tvar normals = new Float32Array( vertexCount * 3 );\n\t\tvar uvs = new Float32Array( vertexCount * 2 );\n\t\n\t\t// offset variables\n\t\tvar vertexBufferOffset = 0;\n\t\tvar uvBufferOffset = 0;\n\t\tvar indexBufferOffset = 0;\n\t\tvar numberOfVertices = 0;\n\t\n\t\t// group variables\n\t\tvar groupStart = 0;\n\t\n\t\t// build each side of the box geometry\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\t\n\t\t// build geometry\n\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\t\n\t\t// helper functions\n\t\n\t\tfunction calculateVertexCount ( w, h, d ) {\n\t\n\t\t\tvar vertices = 0;\n\t\n\t\t\t// calculate the amount of vertices for each side (plane)\n\t\t\tvertices += (w + 1) * (h + 1) * 2; // xy\n\t\t\tvertices += (w + 1) * (d + 1) * 2; // xz\n\t\t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\t\n\t\t\treturn vertices;\n\t\n\t\t}\n\t\n\t\tfunction calculateIndexCount ( w, h, d ) {\n\t\n\t\t\tvar index = 0;\n\t\n\t\t\t// calculate the amount of squares for each side\n\t\t\tindex += w * h * 2; // xy\n\t\t\tindex += w * d * 2; // xz\n\t\t\tindex += d * h * 2; // zy\n\t\n\t\t\treturn index * 6; // two triangles per square => six vertices per square\n\t\n\t\t}\n\t\n\t\tfunction buildPlane ( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\t\n\t\t\tvar segmentWidth\t= width / gridX;\n\t\t\tvar segmentHeight = height / gridY;\n\t\n\t\t\tvar widthHalf = width / 2;\n\t\t\tvar heightHalf = height / 2;\n\t\t\tvar depthHalf = depth / 2;\n\t\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\t\n\t\t\tvar vertexCounter = 0;\n\t\t\tvar groupCount = 0;\n\t\n\t\t\tvar vector = new THREE.Vector3();\n\t\n\t\t\t// generate vertices, normals and uvs\n\t\n\t\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\t\n\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\t\n\t\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\t\n\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\t\n\t\t\t\t\t// set values to correct vector component\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\t\n\t\t\t\t\t// now apply vector to vertex buffer\n\t\t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n\t\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\t\n\t\t\t\t\t// set values to correct vector component\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\t\n\t\t\t\t\t// now apply vector to normal buffer\n\t\t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n\t\t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\t\n\t\t\t\t\t// uvs\n\t\t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n\t\t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\t\n\t\t\t\t\t// update offsets and counters\n\t\t\t\t\tvertexBufferOffset += 3;\n\t\t\t\t\tuvBufferOffset += 2;\n\t\t\t\t\tvertexCounter += 1;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\t\n\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\t\n\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\t\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\t\n\t\t\t\t\t// face one\n\t\t\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\t\n\t\t\t\t\t// face two\n\t\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\t\n\t\t\t\t\t// update offsets and counters\n\t\t\t\t\tindexBufferOffset += 6;\n\t\t\t\t\tgroupCount += 6;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\t\n\t\t\t// calculate new start value for groups\n\t\t\tgroupStart += groupCount;\n\t\n\t\t\t// update total number of vertices\n\t\t\tnumberOfVertices += vertexCounter;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.BoxBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.BoxBufferGeometry.prototype.constructor = THREE.BoxBufferGeometry;\n\t\n\t// File:src/extras/geometries/CircleGeometry.js\n\t\n\t/**\n\t * @author hughes\n\t */\n\t\n\tTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\t\n\t\tTHREE.Geometry.call( this );\n\t\n\t\tthis.type = 'CircleGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\t\n\t\tthis.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\n\t};\n\t\n\tTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;\n\t\n\t// File:src/extras/geometries/CircleBufferGeometry.js\n\t\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\t\n\tTHREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\t\n\t\tTHREE.BufferGeometry.call( this );\n\t\n\t\tthis.type = 'CircleBufferGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\t\n\t\tradius = radius || 50;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\t\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\t\n\t\tvar vertices = segments + 2;\n\t\n\t\tvar positions = new Float32Array( vertices * 3 );\n\t\tvar normals = new Float32Array( vertices * 3 );\n\t\tvar uvs = new Float32Array( vertices * 2 );\n\t\n\t\t// center data is already zero, but need to set a few extras\n\t\tnormals[ 2 ] = 1.0;\n\t\tuvs[ 0 ] = 0.5;\n\t\tuvs[ 1 ] = 0.5;\n\t\n\t\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\t\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\t\n\t\t\tpositions[ i ] = radius * Math.cos( segment );\n\t\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\t\n\t\t\tnormals[ i + 2 ] = 1; // normal z\n\t\n\t\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n\t\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\t\n\t\t}\n\t\n\t\tvar indices = [];\n\t\n\t\tfor ( var i = 1; i <= segments; i ++ ) {\n\t\n\t\t\tindices.push( i, i + 1, 0 );\n\t\n\t\t}\n\t\n\t\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\t\n\t\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\t\n\t};\n\t\n\tTHREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;\n\t\n\t// File:src/extras/geometries/CylinderBufferGeometry.js\n\t\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\t\n\tTHREE.CylinderBufferGeometry = function( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\t\n\t\tTHREE.BufferGeometry.call( this );\n\t\n\t\tthis.type = 'CylinderBufferGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\t\n\t\tvar scope = this;\n\t\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\t\theight = height !== undefined ? height : 100;\n\t\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\t\n\t\t// used to calculate buffer length\n\t\n\t\tvar nbCap = 0;\n\t\n\t\tif ( openEnded === false ) {\n\t\n\t\t\tif ( radiusTop > 0 ) nbCap ++;\n\t\t\tif ( radiusBottom > 0 ) nbCap ++;\n\t\n\t\t}\n\t\n\t\tvar vertexCount = calculateVertexCount();\n\t\tvar indexCount = calculateIndexCount();\n\t\n\t\t// buffers\n\t\n\t\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n\t\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t\t// helper variables\n\t\n\t\tvar index = 0,\n\t\t    indexOffset = 0,\n\t\t    indexArray = [],\n\t\t    halfHeight = height / 2;\n\t\n\t\t// group variables\n\t\tvar groupStart = 0;\n\t\n\t\t// generate geometry\n\t\n\t\tgenerateTorso();\n\t\n\t\tif ( openEnded === false ) {\n\t\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\t\n\t\t}\n\t\n\t\t// build geometry\n\t\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', vertices );\n\t\tthis.addAttribute( 'normal', normals );\n\t\tthis.addAttribute( 'uv', uvs );\n\t\n\t\t// helper functions\n\t\n\t\tfunction calculateVertexCount() {\n\t\n\t\t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\t\n\t\t\tif ( openEnded === false ) {\n\t\n\t\t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\t\n\t\t\t}\n\t\n\t\t\treturn count;\n\t\n\t\t}\n\t\n\t\tfunction calculateIndexCount() {\n\t\n\t\t\tvar count = radialSegments * heightSegments * 2 * 3;\n\t\n\t\t\tif ( openEnded === false ) {\n\t\n\t\t\t\tcount += radialSegments * nbCap * 3;\n\t\n\t\t\t}\n\t\n\t\t\treturn count;\n\t\n\t\t}\n\t\n\t\tfunction generateTorso() {\n\t\n\t\t\tvar x, y;\n\t\t\tvar normal = new THREE.Vector3();\n\t\t\tvar vertex = new THREE.Vector3();\n\t\n\t\t\tvar groupCount = 0;\n\t\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\n\t\n\t\t\t// generate vertices, normals and uvs\n\t\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\t\n\t\t\t\tvar indexRow = [];\n\t\n\t\t\t\tvar v = y / heightSegments;\n\t\n\t\t\t\t// calculate the radius of the current row\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\t\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\t\n\t\t\t\t\tvar u = x / radialSegments;\n\t\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\n\t\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t\t\t\t\t// normal\n\t\t\t\t\tnormal.copy( vertex );\n\t\n\t\t\t\t\t// handle special case if radiusTop/radiusBottom is zero\n\t\n\t\t\t\t\tif ( ( radiusTop === 0 && y === 0 ) || ( radiusBottom === 0 && y === heightSegments ) ) {\n\t\n\t\t\t\t\t\tnormal.x = Math.sin( u * thetaLength + thetaStart );\n\t\t\t\t\t\tnormal.z = Math.cos( u * thetaLength + thetaStart );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tnormal.setY( Math.sqrt( normal.x * normal.x + normal.z * normal.z ) * tanTheta ).normalize();\n\t\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\n\t\t\t\t\t// uv\n\t\t\t\t\tuvs.setXY( index, u, 1 - v );\n\t\n\t\t\t\t\t// save index of vertex in respective row\n\t\t\t\t\tindexRow.push( index );\n\t\n\t\t\t\t\t// increase index\n\t\t\t\t\tindex ++;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// now save vertices of the row in our index array\n\t\t\t\tindexArray.push( indexRow );\n\t\n\t\t\t}\n\t\n\t\t\t// generate indices\n\t\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\t\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\t\n\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\tvar i1 = indexArray[ y ][ x ];\n\t\t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\t\n\t\t\t\t\t// face one\n\t\t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\t\n\t\t\t\t\t// face two\n\t\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\t\n\t\t\t\t\t// update counters\n\t\t\t\t\tgroupCount += 6;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\t\n\t\t\t// calculate new start value for groups\n\t\t\tgroupStart += groupCount;\n\t\n\t\t}\n\t\n\t\tfunction generateCap( top ) {\n\t\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\t\n\t\t\tvar uv = new THREE.Vector2();\n\t\t\tvar vertex = new THREE.Vector3();\n\t\n\t\t\tvar groupCount = 0;\n\t\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\t\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\t\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\t\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\t\n\t\t\t\t// vertex\n\t\t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\t\n\t\t\t\t// normal\n\t\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\t\n\t\t\t\t// uv\n\t\t\t\tuv.x = 0.5;\n\t\t\t\tuv.y = 0.5;\n\t\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\t\n\t\t\t}\n\t\n\t\t\t// save the index of the last center vertex\n\t\t\tcenterIndexEnd = index;\n\t\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\t\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\t\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t\t\t\t// normal\n\t\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\t\n\t\t\t\t// uv\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\t\n\t\t\t}\n\t\n\t\t\t// generate indices\n\t\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\t\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\t\n\t\t\t\tif ( top === true ) {\n\t\n\t\t\t\t\t// face top\n\t\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// face bottom\n\t\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// update counters\n\t\t\t\tgroupCount += 3;\n\t\n\t\t\t}\n\t\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\t\n\t\t\t// calculate new start value for groups\n\t\t\tgroupStart += groupCount;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.CylinderBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.CylinderBufferGeometry.prototype.constructor = THREE.CylinderBufferGeometry;\n\t\n\t// File:src/extras/geometries/CylinderGeometry.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\t\n\t\tTHREE.Geometry.call( this );\n\t\n\t\tthis.type = 'CylinderGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\t\n\t\tthis.fromBufferGeometry( new THREE.CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\t\n\t};\n\t\n\tTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;\n\t\n\t// File:src/extras/geometries/ConeBufferGeometry.js\n\t\n\t/*\n\t * @author: abelnation / http://github.com/abelnation\n\t */\n\t\n\tTHREE.ConeBufferGeometry = function (\n\t\tradius, height,\n\t\tradialSegments, heightSegments,\n\t\topenEnded, thetaStart, thetaLength ) {\n\t\n\t\tTHREE.CylinderBufferGeometry.call( this,\n\t\t\t0, radius, height,\n\t\t\tradialSegments, heightSegments,\n\t\t\topenEnded, thetaStart, thetaLength );\n\t\n\t\tthis.type = 'ConeBufferGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\t\n\t};\n\t\n\tTHREE.ConeBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.ConeBufferGeometry.prototype.constructor = THREE.ConeBufferGeometry;\n\t\n\t// File:src/extras/geometries/ConeGeometry.js\n\t\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\t\n\tTHREE.ConeGeometry = function (\n\t\tradius, height,\n\t\tradialSegments, heightSegments,\n\t\topenEnded, thetaStart, thetaLength ) {\n\t\n\t\tTHREE.CylinderGeometry.call( this,\n\t\t\t0, radius, height,\n\t\t\tradialSegments, heightSegments,\n\t\t\topenEnded, thetaStart, thetaLength );\n\t\n\t\tthis.type = 'ConeGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\t\n\t};\n\t\n\tTHREE.ConeGeometry.prototype = Object.create( THREE.CylinderGeometry.prototype );\n\tTHREE.ConeGeometry.prototype.constructor = THREE.ConeGeometry;\n\t\n\t// File:src/extras/geometries/EdgesGeometry.js\n\t\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\t\n\tTHREE.EdgesGeometry = function ( geometry, thresholdAngle ) {\n\t\n\t\tTHREE.BufferGeometry.call( this );\n\t\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\t\n\t\tvar thresholdDot = Math.cos( THREE.Math.DEG2RAD * thresholdAngle );\n\t\n\t\tvar edge = [ 0, 0 ], hash = {};\n\t\n\t\tfunction sortFunction( a, b ) {\n\t\n\t\t\treturn a - b;\n\t\n\t\t}\n\t\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t\tvar geometry2;\n\t\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\tgeometry2 = new THREE.Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\t\n\t\t} else {\n\t\n\t\t\tgeometry2 = geometry.clone();\n\t\n\t\t}\n\t\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\t\n\t\tvar vertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\t\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t\t\tvar face = faces[ i ];\n\t\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge.sort( sortFunction );\n\t\n\t\t\t\tvar key = edge.toString();\n\t\n\t\t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\thash[ key ].face2 = i;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tvar coords = [];\n\t\n\t\tfor ( var key in hash ) {\n\t\n\t\t\tvar h = hash[ key ];\n\t\n\t\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\t\n\t\t\t\tvar vertex = vertices[ h.vert1 ];\n\t\t\t\tcoords.push( vertex.x );\n\t\t\t\tcoords.push( vertex.y );\n\t\t\t\tcoords.push( vertex.z );\n\t\n\t\t\t\tvertex = vertices[ h.vert2 ];\n\t\t\t\tcoords.push( vertex.x );\n\t\t\t\tcoords.push( vertex.y );\n\t\t\t\tcoords.push( vertex.z );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );\n\t\n\t};\n\t\n\tTHREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;\n\t\n\t// File:src/extras/geometries/ExtrudeGeometry.js\n\t\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  amount: <int>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline is bevel\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n\t *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n\t *\n\t *  uvGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t **/\n\t\n\tTHREE.ExtrudeGeometry = function ( shapes, options ) {\n\t\n\t\tif ( typeof( shapes ) === \"undefined\" ) {\n\t\n\t\t\tshapes = [];\n\t\t\treturn;\n\t\n\t\t}\n\t\n\t\tTHREE.Geometry.call( this );\n\t\n\t\tthis.type = 'ExtrudeGeometry';\n\t\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\t\n\t\tthis.addShapeList( shapes, options );\n\t\n\t\tthis.computeFaceNormals();\n\t\n\t\t// can't really use automatic vertex normals\n\t\t// as then front and back sides get smoothed too\n\t\t// should do separate smoothing just for sides\n\t\n\t\t//this.computeVertexNormals();\n\t\n\t\t//console.log( \"took\", ( Date.now() - startTime ) );\n\t\n\t};\n\t\n\tTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\n\t\n\tTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\t\n\t\tvar sl = shapes.length;\n\t\n\t\tfor ( var s = 0; s < sl; s ++ ) {\n\t\n\t\t\tvar shape = shapes[ s ];\n\t\t\tthis.addShape( shape, options );\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\t\n\t\tvar amount = options.amount !== undefined ? options.amount : 100;\n\t\n\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\n\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\t\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\n\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\n\t\tvar extrudePath = options.extrudePath;\n\t\tvar extrudePts, extrudeByPath = false;\n\t\n\t\t// Use default WorldUVGenerator if no UV generators are specified.\n\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\n\t\n\t\tvar splineTube, binormal, normal, position2;\n\t\tif ( extrudePath ) {\n\t\n\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\t\n\t\t\textrudeByPath = true;\n\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\n\t\t\t// SETUP TNB variables\n\t\n\t\t\t// Reuse TNB from TubeGeomtry for now.\n\t\t\t// TODO1 - have a .isClosed in spline?\n\t\n\t\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\t\n\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\t\n\t\t\tbinormal = new THREE.Vector3();\n\t\t\tnormal = new THREE.Vector3();\n\t\t\tposition2 = new THREE.Vector3();\n\t\n\t\t}\n\t\n\t\t// Safeguards if bevels are not enabled\n\t\n\t\tif ( ! bevelEnabled ) {\n\t\n\t\t\tbevelSegments = 0;\n\t\t\tbevelThickness = 0;\n\t\t\tbevelSize = 0;\n\t\n\t\t}\n\t\n\t\t// Variables initialization\n\t\n\t\tvar ahole, h, hl; // looping of holes\n\t\tvar scope = this;\n\t\n\t\tvar shapesOffset = this.vertices.length;\n\t\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\t\n\t\tvar vertices = shapePoints.shape;\n\t\tvar holes = shapePoints.holes;\n\t\n\t\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\n\t\n\t\tif ( reverse ) {\n\t\n\t\t\tvertices = vertices.reverse();\n\t\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\t\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\t\tahole = holes[ h ];\n\t\n\t\t\t\tif ( THREE.ShapeUtils.isClockWise( ahole ) ) {\n\t\n\t\t\t\t\tholes[ h ] = ahole.reverse();\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\t\n\t\t}\n\t\n\t\n\t\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\n\t\n\t\t/* Vertices */\n\t\n\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\t\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\tahole = holes[ h ];\n\t\n\t\t\tvertices = vertices.concat( ahole );\n\t\n\t\t}\n\t\n\t\n\t\tfunction scalePt2 ( pt, vec, size ) {\n\t\n\t\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\t\n\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\t\n\t\t}\n\t\n\t\tvar b, bs, t, z,\n\t\t\tvert, vlen = vertices.length,\n\t\t\tface, flen = faces.length;\n\t\n\t\n\t\t// Find directions for point movement\n\t\n\t\n\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\t\n\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t//\n\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\t\n\t\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\t\n\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\t\n\t\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n\t\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\t\n\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\t\n\t\t\t// check for collinear edges\n\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\t\n\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\t\n\t\t\t\t// not collinear\n\t\n\t\t\t\t// length of vectors for normalizing\n\t\n\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\t\n\t\t\t\t// shift adjacent points by unit vectors to the left\n\t\n\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\t\n\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\t\n\t\t\t\t// scaling factor for v_prev to intersection point\n\t\n\t\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n\t\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\t\n\t\t\t\t// vector from inPt to intersection point\n\t\n\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\t\n\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t//  but prevent crazy spikes\n\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\t\n\t\t\t\t\treturn\tnew THREE.Vector2( v_trans_x, v_trans_y );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// handle special case of collinear edges\n\t\n\t\t\t\tvar direction_eq = false;\t\t// assumes: opposite\n\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\t\n\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\t\n\t\t\t\t\t\tdirection_eq = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\t\n\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\t\n\t\t\t\t\t\t\tdirection_eq = true;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\t\n\t\t\t\t\t\t\tdirection_eq = true;\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tif ( direction_eq ) {\n\t\n\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\tv_trans_y =  v_prev_x;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn\tnew THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\t\n\t\t}\n\t\n\t\n\t\tvar contourMovements = [];\n\t\n\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\t\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\t\n\t\t\t//  (j)---(i)---(k)\n\t\t\t// console.log('i,j,k', i, j , k)\n\t\n\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\t\n\t\t}\n\t\n\t\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\t\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\tahole = holes[ h ];\n\t\n\t\t\toneHoleMovements = [];\n\t\n\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\t\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\t\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\t\n\t\t\t}\n\t\n\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\t\n\t\t}\n\t\n\t\n\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\t\n\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\t\n\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * ( 1 - t );\n\t\n\t\t\t//z = bevelThickness * t;\n\t\t\tbs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved\n\t\t\t//bs = bevelSize * t; // linear\n\t\n\t\t\t// contract shape\n\t\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\t\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\n\t\t\t\tv( vert.x, vert.y,  - z );\n\t\n\t\t\t}\n\t\n\t\t\t// expand holes\n\t\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\t\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\t\n\t\t\t\t\tv( vert.x, vert.y,  - z );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tbs = bevelSize;\n\t\n\t\t// Back facing vertices\n\t\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\t\n\t\t\tif ( ! extrudeByPath ) {\n\t\n\t\t\t\tv( vert.x, vert.y, 0 );\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\n\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\t\n\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\t\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// Add stepped vertices...\n\t\t// Including front facing vertices\n\t\n\t\tvar s;\n\t\n\t\tfor ( s = 1; s <= steps; s ++ ) {\n\t\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\t\n\t\t\t\tif ( ! extrudeByPath ) {\n\t\n\t\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\n\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\t\n\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\t\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\n\t\t// Add bevel segments planes\n\t\n\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\t\n\t\t\tt = b / bevelSegments;\n\t\t\tz = bevelThickness * ( 1 - t );\n\t\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\n\t\t\tbs = bevelSize * Math.sin ( t * Math.PI / 2 );\n\t\n\t\t\t// contract shape\n\t\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\t\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\tv( vert.x, vert.y,  amount + z );\n\t\n\t\t\t}\n\t\n\t\t\t// expand holes\n\t\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\t\tahole = holes[ h ];\n\t\t\t\toneHoleMovements = holesMovements[ h ];\n\t\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\t\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\t\n\t\t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t/* Faces */\n\t\n\t\t// Top and bottom faces\n\t\n\t\tbuildLidFaces();\n\t\n\t\t// Sides faces\n\t\n\t\tbuildSideFaces();\n\t\n\t\n\t\t/////  Internal functions\n\t\n\t\tfunction buildLidFaces() {\n\t\n\t\t\tif ( bevelEnabled ) {\n\t\n\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\tvar offset = vlen * layer;\n\t\n\t\t\t\t// Bottom faces\n\t\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\t\n\t\t\t\t}\n\t\n\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\toffset = vlen * layer;\n\t\n\t\t\t\t// Top faces\n\t\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// Bottom faces\n\t\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// Top faces\n\t\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// Create faces for the z-sides of the shape\n\t\n\t\tfunction buildSideFaces() {\n\t\n\t\t\tvar layeroffset = 0;\n\t\t\tsidewalls( contour, layeroffset );\n\t\t\tlayeroffset += contour.length;\n\t\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\t\n\t\t\t\tahole = holes[ h ];\n\t\t\t\tsidewalls( ahole, layeroffset );\n\t\n\t\t\t\t//, true\n\t\t\t\tlayeroffset += ahole.length;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfunction sidewalls( contour, layeroffset ) {\n\t\n\t\t\tvar j, k;\n\t\t\ti = contour.length;\n\t\n\t\t\twhile ( -- i >= 0 ) {\n\t\n\t\t\t\tj = i;\n\t\t\t\tk = i - 1;\n\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\t\n\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\t\n\t\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\t\n\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\t\n\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\t\n\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\td = layeroffset + j + slen2;\n\t\n\t\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\n\t\tfunction v( x, y, z ) {\n\t\n\t\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\n\t\n\t\t}\n\t\n\t\tfunction f3( a, b, c ) {\n\t\n\t\t\ta += shapesOffset;\n\t\t\tb += shapesOffset;\n\t\t\tc += shapesOffset;\n\t\n\t\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );\n\t\n\t\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\t\n\t\t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\t\n\t\t}\n\t\n\t\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\t\n\t\t\ta += shapesOffset;\n\t\t\tb += shapesOffset;\n\t\t\tc += shapesOffset;\n\t\t\td += shapesOffset;\n\t\n\t\t\tscope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );\n\t\t\tscope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );\n\t\n\t\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\t\n\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.ExtrudeGeometry.WorldUVGenerator = {\n\t\n\t\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\t\n\t\t\tvar vertices = geometry.vertices;\n\t\n\t\t\tvar a = vertices[ indexA ];\n\t\t\tvar b = vertices[ indexB ];\n\t\t\tvar c = vertices[ indexC ];\n\t\n\t\t\treturn [\n\t\t\t\tnew THREE.Vector2( a.x, a.y ),\n\t\t\t\tnew THREE.Vector2( b.x, b.y ),\n\t\t\t\tnew THREE.Vector2( c.x, c.y )\n\t\t\t];\n\t\n\t\t},\n\t\n\t\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\t\n\t\t\tvar vertices = geometry.vertices;\n\t\n\t\t\tvar a = vertices[ indexA ];\n\t\t\tvar b = vertices[ indexB ];\n\t\t\tvar c = vertices[ indexC ];\n\t\t\tvar d = vertices[ indexD ];\n\t\n\t\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\t\n\t\t\t\treturn [\n\t\t\t\t\tnew THREE.Vector2( a.x, 1 - a.z ),\n\t\t\t\t\tnew THREE.Vector2( b.x, 1 - b.z ),\n\t\t\t\t\tnew THREE.Vector2( c.x, 1 - c.z ),\n\t\t\t\t\tnew THREE.Vector2( d.x, 1 - d.z )\n\t\t\t\t];\n\t\n\t\t\t} else {\n\t\n\t\t\t\treturn [\n\t\t\t\t\tnew THREE.Vector2( a.y, 1 - a.z ),\n\t\t\t\t\tnew THREE.Vector2( b.y, 1 - b.z ),\n\t\t\t\t\tnew THREE.Vector2( c.y, 1 - c.z ),\n\t\t\t\t\tnew THREE.Vector2( d.y, 1 - d.z )\n\t\t\t\t];\n\t\n\t\t\t}\n\t\n\t\t}\n\t};\n\t\n\t// File:src/extras/geometries/ShapeGeometry.js\n\t\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t *\n\t * Creates a one-sided polygonal geometry from a path shape. Similar to\n\t * ExtrudeGeometry.\n\t *\n\t * parameters = {\n\t *\n\t *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n\t *\n\t *\tmaterial: <int> // material index for front and back faces\n\t *\tuvGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t **/\n\t\n\tTHREE.ShapeGeometry = function ( shapes, options ) {\n\t\n\t\tTHREE.Geometry.call( this );\n\t\n\t\tthis.type = 'ShapeGeometry';\n\t\n\t\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\t\n\t\tthis.addShapeList( shapes, options );\n\t\n\t\tthis.computeFaceNormals();\n\t\n\t};\n\t\n\tTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\n\t\n\t/**\n\t * Add an array of shapes to THREE.ShapeGeometry.\n\t */\n\tTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\t\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\t\n\t\t\tthis.addShape( shapes[ i ], options );\n\t\n\t\t}\n\t\n\t\treturn this;\n\t\n\t};\n\t\n\t/**\n\t * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n\t */\n\tTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\t\n\t\tif ( options === undefined ) options = {};\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\n\t\tvar material = options.material;\n\t\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\t\n\t\t//\n\t\n\t\tvar i, l, hole;\n\t\n\t\tvar shapesOffset = this.vertices.length;\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\t\n\t\tvar vertices = shapePoints.shape;\n\t\tvar holes = shapePoints.holes;\n\t\n\t\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\n\t\n\t\tif ( reverse ) {\n\t\n\t\t\tvertices = vertices.reverse();\n\t\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\t\n\t\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\t\n\t\t\t\thole = holes[ i ];\n\t\n\t\t\t\tif ( THREE.ShapeUtils.isClockWise( hole ) ) {\n\t\n\t\t\t\t\tholes[ i ] = hole.reverse();\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treverse = false;\n\t\n\t\t}\n\t\n\t\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\n\t\n\t\t// Vertices\n\t\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\t\n\t\t\thole = holes[ i ];\n\t\t\tvertices = vertices.concat( hole );\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tvar vert, vlen = vertices.length;\n\t\tvar face, flen = faces.length;\n\t\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\t\n\t\t\tvert = vertices[ i ];\n\t\n\t\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\n\t\n\t\t}\n\t\n\t\tfor ( i = 0; i < flen; i ++ ) {\n\t\n\t\t\tface = faces[ i ];\n\t\n\t\t\tvar a = face[ 0 ] + shapesOffset;\n\t\t\tvar b = face[ 1 ] + shapesOffset;\n\t\t\tvar c = face[ 2 ] + shapesOffset;\n\t\n\t\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/extras/geometries/LatheBufferGeometry.js\n\t\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\t\n\t // points - to create a closed torus, one must use a set of points\n\t //    like so: [ a, b, c, d, a ], see first is the same as last.\n\t // segments - the number of circumference segments to create\n\t // phiStart - the starting radian\n\t // phiLength - the radian (0 to 2PI) range of the lathed section\n\t //    2PI is a closed lathe, less than 2PI is a portion.\n\t\n\tTHREE.LatheBufferGeometry = function ( points, segments, phiStart, phiLength ) {\n\t\n\t\tTHREE.BufferGeometry.call( this );\n\t\n\t\tthis.type = 'LatheBufferGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\t\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\t\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\t\tphiLength = THREE.Math.clamp( phiLength, 0, Math.PI * 2 );\n\t\n\t\t// these are used to calculate buffer length\n\t\tvar vertexCount = ( segments + 1 ) * points.length;\n\t\tvar indexCount = segments * points.length * 2 * 3;\n\t\n\t\t// buffers\n\t\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t\t// helper variables\n\t\tvar index = 0, indexOffset = 0, base;\n\t\tvar inversePointLength = 1.0 / ( points.length - 1 );\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new THREE.Vector3();\n\t\tvar uv = new THREE.Vector2();\n\t\tvar i, j;\n\t\n\t\t// generate vertices and uvs\n\t\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\t\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\t\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\t\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\t\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t\t\t\t// uv\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// generate indices\n\t\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\t\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\t\n\t\t\t\tbase = j + i * points.length;\n\t\n\t\t\t\t// indices\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\t\n\t\t\t\t// face one\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t\t\t\t// face two\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// build geometry\n\t\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', vertices );\n\t\tthis.addAttribute( 'uv', uvs );\n\t\n\t\t// generate normals\n\t\n\t\tthis.computeVertexNormals();\n\t\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\t\n\t\tif( phiLength === Math.PI * 2 ) {\n\t\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new THREE.Vector3();\n\t\t\tvar n2 = new THREE.Vector3();\n\t\t\tvar n = new THREE.Vector3();\n\t\n\t\t\t// this is the buffer offset for the last line of vertices\n\t\t\tbase = segments * points.length * 3;\n\t\n\t\t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\t\n\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\t\n\t\t\t\t// select the normal of the vertex in the last line\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\t\n\t\t\t\t// average normals\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\t\n\t\t\t\t// assign the new values to both normals\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\t\n\t\t\t} // next row\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.LatheBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.LatheBufferGeometry.prototype.constructor = THREE.LatheBufferGeometry;\n\t\n\t// File:src/extras/geometries/LatheGeometry.js\n\t\n\t/**\n\t * @author astrodud / http://astrodud.isgreat.org/\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t */\n\t\n\t// points - to create a closed torus, one must use a set of points\n\t//    like so: [ a, b, c, d, a ], see first is the same as last.\n\t// segments - the number of circumference segments to create\n\t// phiStart - the starting radian\n\t// phiLength - the radian (0 to 2PI) range of the lathed section\n\t//    2PI is a closed lathe, less than 2PI is a portion.\n\t\n\tTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\n\t\n\t\tTHREE.Geometry.call( this );\n\t\n\t\tthis.type = 'LatheGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\t\n\t\tthis.fromBufferGeometry( new THREE.LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\t\n\t};\n\t\n\tTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;\n\t\n\t// File:src/extras/geometries/PlaneGeometry.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t */\n\t\n\tTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\n\t\n\t\tTHREE.Geometry.call( this );\n\t\n\t\tthis.type = 'PlaneGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\t\n\t\tthis.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\n\t};\n\t\n\tTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;\n\t\n\t// File:src/extras/geometries/PlaneBufferGeometry.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n\t */\n\t\n\tTHREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {\n\t\n\t\tTHREE.BufferGeometry.call( this );\n\t\n\t\tthis.type = 'PlaneBufferGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\t\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\t\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\t\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\t\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\t\n\t\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n\t\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n\t\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\t\n\t\tvar offset = 0;\n\t\tvar offset2 = 0;\n\t\n\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\t\n\t\t\tvar y = iy * segment_height - height_half;\n\t\n\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\t\n\t\t\t\tvar x = ix * segment_width - width_half;\n\t\n\t\t\t\tvertices[ offset ] = x;\n\t\t\t\tvertices[ offset + 1 ] = - y;\n\t\n\t\t\t\tnormals[ offset + 2 ] = 1;\n\t\n\t\t\t\tuvs[ offset2 ] = ix / gridX;\n\t\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\t\n\t\t\t\toffset += 3;\n\t\t\t\toffset2 += 2;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\toffset = 0;\n\t\n\t\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\t\n\t\tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\t\n\t\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\t\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\t\n\t\t\t\tindices[ offset ] = a;\n\t\t\t\tindices[ offset + 1 ] = b;\n\t\t\t\tindices[ offset + 2 ] = d;\n\t\n\t\t\t\tindices[ offset + 3 ] = b;\n\t\t\t\tindices[ offset + 4 ] = c;\n\t\t\t\tindices[ offset + 5 ] = d;\n\t\n\t\t\t\toffset += 6;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\t\n\t};\n\t\n\tTHREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;\n\t\n\t// File:src/extras/geometries/RingBufferGeometry.js\n\t\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\t\n\tTHREE.RingBufferGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\t\n\t\tTHREE.BufferGeometry.call( this );\n\t\n\t\tthis.type = 'RingBufferGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\t\n\t\tinnerRadius = innerRadius || 20;\n\t\touterRadius = outerRadius || 50;\n\t\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\t\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\t\n\t\t// these are used to calculate buffer length\n\t\tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n\t\tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\t\n\t\t// buffers\n\t\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t\t// some helper variables\n\t\tvar index = 0, indexOffset = 0, segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new THREE.Vector3();\n\t\tvar uv = new THREE.Vector2();\n\t\tvar j, i;\n\t\n\t\t// generate vertices, normals and uvs\n\t\n\t\t// values are generate from the inside of the ring to the outside\n\t\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\t\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\t\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\t\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t\t\t\t// normal\n\t\t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\t\n\t\t\t\t// uv\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t\t\t\t// increase index\n\t\t\t\tindex++;\n\t\n\t\t\t}\n\t\n\t\t\t// increase the radius for next row of vertices\n\t\t\tradius += radiusStep;\n\t\n\t\t}\n\t\n\t\t// generate indices\n\t\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\t\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\t\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\t\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\t\n\t\t\t\t// indices\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\t\n\t\t\t\t// face one\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\n\t\t\t\t// face two\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// build geometry\n\t\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', vertices );\n\t\tthis.addAttribute( 'normal', normals );\n\t\tthis.addAttribute( 'uv', uvs );\n\t\n\t};\n\t\n\tTHREE.RingBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.RingBufferGeometry.prototype.constructor = THREE.RingBufferGeometry;\n\t\n\t// File:src/extras/geometries/RingGeometry.js\n\t\n\t/**\n\t * @author Kaleb Murphy\n\t */\n\t\n\tTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\t\n\t\tTHREE.Geometry.call( this );\n\t\n\t\tthis.type = 'RingGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\t\n\t\tthis.fromBufferGeometry( new THREE.RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\n\t};\n\t\n\tTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.RingGeometry.prototype.constructor = THREE.RingGeometry;\n\t\n\t// File:src/extras/geometries/SphereGeometry.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\t\n\t\tTHREE.Geometry.call( this );\n\t\n\t\tthis.type = 'SphereGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\t\n\t\tthis.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\n\t};\n\t\n\tTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;\n\t\n\t// File:src/extras/geometries/SphereBufferGeometry.js\n\t\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * based on THREE.SphereGeometry\n\t */\n\t\n\tTHREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\t\n\t\tTHREE.BufferGeometry.call( this );\n\t\n\t\tthis.type = 'SphereBufferGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\t\n\t\tradius = radius || 50;\n\t\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\t\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\t\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\t\n\t\tvar thetaEnd = thetaStart + thetaLength;\n\t\n\t\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\t\n\t\tvar positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t\tvar index = 0, vertices = [], normal = new THREE.Vector3();\n\t\n\t\tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\t\n\t\t\tvar verticesRow = [];\n\t\n\t\t\tvar v = y / heightSegments;\n\t\n\t\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\t\n\t\t\t\tvar u = x / widthSegments;\n\t\n\t\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\n\t\t\t\tnormal.set( px, py, pz ).normalize();\n\t\n\t\t\t\tpositions.setXYZ( index, px, py, pz );\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\t\t\tuvs.setXY( index, u, 1 - v );\n\t\n\t\t\t\tverticesRow.push( index );\n\t\n\t\t\t\tindex ++;\n\t\n\t\t\t}\n\t\n\t\t\tvertices.push( verticesRow );\n\t\n\t\t}\n\t\n\t\tvar indices = [];\n\t\n\t\tfor ( var y = 0; y < heightSegments; y ++ ) {\n\t\n\t\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\t\n\t\t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t\t\t\tvar v2 = vertices[ y ][ x ];\n\t\t\t\tvar v3 = vertices[ y + 1 ][ x ];\n\t\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\t\n\t\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n\t\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tthis.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );\n\t\tthis.addAttribute( 'position', positions );\n\t\tthis.addAttribute( 'normal', normals );\n\t\tthis.addAttribute( 'uv', uvs );\n\t\n\t\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\t\n\t};\n\t\n\tTHREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;\n\t\n\t// File:src/extras/geometries/TextGeometry.js\n\t\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float> // how far from text outline is bevel\n\t * }\n\t */\n\t\n\tTHREE.TextGeometry = function ( text, parameters ) {\n\t\n\t\tparameters = parameters || {};\n\t\n\t\tvar font = parameters.font;\n\t\n\t\tif ( font instanceof THREE.Font === false ) {\n\t\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new THREE.Geometry();\n\t\n\t\t}\n\t\n\t\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\t\n\t\t// translate parameters to ExtrudeGeometry API\n\t\n\t\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\t\n\t\t// defaults\n\t\n\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\t\n\t\tTHREE.ExtrudeGeometry.call( this, shapes, parameters );\n\t\n\t\tthis.type = 'TextGeometry';\n\t\n\t};\n\t\n\tTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\n\tTHREE.TextGeometry.prototype.constructor = THREE.TextGeometry;\n\t\n\t// File:src/extras/geometries/TorusBufferGeometry.js\n\t\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\t\n\tTHREE.TorusBufferGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\t\n\t\tTHREE.BufferGeometry.call( this );\n\t\n\t\tthis.type = 'TorusBufferGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\t\n\t\tradius = radius || 100;\n\t\ttube = tube || 40;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\t\n\t\t// used to calculate buffer length\n\t\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\t\n\t\t// buffers\n\t\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\t\tvar vertices = new Float32Array( vertexCount * 3 );\n\t\tvar normals = new Float32Array( vertexCount * 3 );\n\t\tvar uvs = new Float32Array( vertexCount * 2 );\n\t\n\t\t// offset variables\n\t\tvar vertexBufferOffset = 0;\n\t\tvar uvBufferOffset = 0;\n\t\tvar indexBufferOffset = 0;\n\t\n\t\t// helper variables\n\t\tvar center = new THREE.Vector3();\n\t\tvar vertex = new THREE.Vector3();\n\t\tvar normal = new THREE.Vector3();\n\t\n\t\tvar j, i;\n\t\n\t\t// generate vertices, normals and uvs\n\t\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\t\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\t\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\t\n\t\t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\t\n\t\t\t\t// this vector is used to calculate the normal\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\n\t\t\t\t// normal\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\t\n\t\t\t\tnormals[ vertexBufferOffset ] = normal.x;\n\t\t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n\t\t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\t\n\t\t\t\t// uv\n\t\t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n\t\t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\t\n\t\t\t\t// update offsets\n\t\t\t\tvertexBufferOffset += 3;\n\t\t\t\tuvBufferOffset += 2;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// generate indices\n\t\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\t\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\t\n\t\t\t\t// indices\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\t\n\t\t\t\t// face one\n\t\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\t\n\t\t\t\t// face two\n\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\t\n\t\t\t\t// update offset\n\t\t\t\tindexBufferOffset += 6;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// build geometry\n\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\t\n\t};\n\t\n\tTHREE.TorusBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.TorusBufferGeometry.prototype.constructor = THREE.TorusBufferGeometry;\n\t\n\t// File:src/extras/geometries/TorusGeometry.js\n\t\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n\t */\n\t\n\tTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\t\n\t\tTHREE.Geometry.call( this );\n\t\n\t\tthis.type = 'TorusGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\t\n\t\tthis.fromBufferGeometry( new THREE.TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\n\t};\n\t\n\tTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;\n\t\n\t// File:src/extras/geometries/TorusKnotBufferGeometry.js\n\t\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * see: http://www.blackpawn.com/texts/pqtorus/\n\t */\n\tTHREE.TorusKnotBufferGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q ) {\n\t\n\t\tTHREE.BufferGeometry.call( this );\n\t\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\t\n\t\tradius = radius || 100;\n\t\ttube = tube || 40;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\t\n\t\t// used to calculate buffer length\n\t\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\t\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\t\n\t\t// buffers\n\t\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\t\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\t\n\t\t// helper variables\n\t\tvar i, j, index = 0, indexOffset = 0;\n\t\n\t\tvar vertex = new THREE.Vector3();\n\t\tvar normal = new THREE.Vector3();\n\t\tvar uv = new THREE.Vector2();\n\t\n\t\tvar P1 = new THREE.Vector3();\n\t\tvar P2 = new THREE.Vector3();\n\t\n\t\tvar B = new THREE.Vector3();\n\t\tvar T = new THREE.Vector3();\n\t\tvar N = new THREE.Vector3();\n\t\n\t\t// generate vertices, normals and uvs\n\t\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\t\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\t\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\t\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\t\n\t\t\t// calculate orthonormal basis\n\t\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\t\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\t\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\t\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\t\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\t\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\t\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\t\n\t\t\t\t// vertex\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\t\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\n\t\t\t\t// uv\n\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\n\t\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// generate indices\n\t\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\t\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\t\n\t\t\t\t// indices\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\t\n\t\t\t\t// face one\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t\t\t\t// face two\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// build geometry\n\t\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', vertices );\n\t\tthis.addAttribute( 'normal', normals );\n\t\tthis.addAttribute( 'uv', uvs );\n\t\n\t\t// this function calculates the current position on the torus curve\n\t\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\t\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\t\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.TorusKnotBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.TorusKnotBufferGeometry.prototype.constructor = THREE.TorusKnotBufferGeometry;\n\t\n\t// File:src/extras/geometries/TorusKnotGeometry.js\n\t\n\t/**\n\t * @author oosmoxiecode\n\t */\n\t\n\tTHREE.TorusKnotGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\t\n\t\tTHREE.Geometry.call( this );\n\t\n\t\tthis.type = 'TorusKnotGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\t\n\t\tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\t\n\t\tthis.fromBufferGeometry( new THREE.TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\t\n\t};\n\t\n\tTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;\n\t\n\t// File:src/extras/geometries/TubeGeometry.js\n\t\n\t/**\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t *\n\t * Modified from the TorusKnotGeometry by @oosmoxiecode\n\t *\n\t * Creates a tube which extrudes along a 3d spline\n\t *\n\t * Uses parallel transport frames as described in\n\t * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t */\n\t\n\tTHREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {\n\t\n\t\tTHREE.Geometry.call( this );\n\t\n\t\tthis.type = 'TubeGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\tsegments: segments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed,\n\t\t\ttaper: taper\n\t\t};\n\t\n\t\tsegments = segments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\t\ttaper = taper || THREE.TubeGeometry.NoTaper;\n\t\n\t\tvar grid = [];\n\t\n\t\tvar scope = this,\n\t\n\t\t\ttangent,\n\t\t\tnormal,\n\t\t\tbinormal,\n\t\n\t\t\tnumpoints = segments + 1,\n\t\n\t\t\tu, v, r,\n\t\n\t\t\tcx, cy,\n\t\t\tpos, pos2 = new THREE.Vector3(),\n\t\t\ti, j,\n\t\t\tip, jp,\n\t\t\ta, b, c, d,\n\t\t\tuva, uvb, uvc, uvd;\n\t\n\t\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\n\t\t\ttangents = frames.tangents,\n\t\t\tnormals = frames.normals,\n\t\t\tbinormals = frames.binormals;\n\t\n\t\t// proxy internals\n\t\tthis.tangents = tangents;\n\t\tthis.normals = normals;\n\t\tthis.binormals = binormals;\n\t\n\t\tfunction vert( x, y, z ) {\n\t\n\t\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\n\t\n\t\t}\n\t\n\t\t// construct the grid\n\t\n\t\tfor ( i = 0; i < numpoints; i ++ ) {\n\t\n\t\t\tgrid[ i ] = [];\n\t\n\t\t\tu = i / ( numpoints - 1 );\n\t\n\t\t\tpos = path.getPointAt( u );\n\t\n\t\t\ttangent = tangents[ i ];\n\t\t\tnormal = normals[ i ];\n\t\t\tbinormal = binormals[ i ];\n\t\n\t\t\tr = radius * taper( u );\n\t\n\t\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\t\n\t\t\t\tv = j / radialSegments * 2 * Math.PI;\n\t\n\t\t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\t\t\tcy = r * Math.sin( v );\n\t\n\t\t\t\tpos2.copy( pos );\n\t\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n\t\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n\t\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\t\n\t\t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\n\t\t// construct the mesh\n\t\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\t\n\t\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\t\n\t\t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n\t\t\t\tjp = ( j + 1 ) % radialSegments;\n\t\n\t\t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n\t\t\t\tb = grid[ ip ][ j ];\n\t\t\t\tc = grid[ ip ][ jp ];\n\t\t\t\td = grid[ i ][ jp ];\n\t\n\t\t\t\tuva = new THREE.Vector2( i / segments, j / radialSegments );\n\t\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );\n\t\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n\t\t\t\tuvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );\n\t\n\t\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\t\n\t\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tthis.computeFaceNormals();\n\t\tthis.computeVertexNormals();\n\t\n\t};\n\t\n\tTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\n\t\n\tTHREE.TubeGeometry.NoTaper = function ( u ) {\n\t\n\t\treturn 1;\n\t\n\t};\n\t\n\tTHREE.TubeGeometry.SinusoidalTaper = function ( u ) {\n\t\n\t\treturn Math.sin( Math.PI * u );\n\t\n\t};\n\t\n\t// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\n\tTHREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\t\n\t\tvar\tnormal = new THREE.Vector3(),\n\t\n\t\t\ttangents = [],\n\t\t\tnormals = [],\n\t\t\tbinormals = [],\n\t\n\t\t\tvec = new THREE.Vector3(),\n\t\t\tmat = new THREE.Matrix4(),\n\t\n\t\t\tnumpoints = segments + 1,\n\t\t\ttheta,\n\t\t\tsmallest,\n\t\n\t\t\ttx, ty, tz,\n\t\t\ti, u;\n\t\n\t\n\t\t// expose internals\n\t\tthis.tangents = tangents;\n\t\tthis.normals = normals;\n\t\tthis.binormals = binormals;\n\t\n\t\t// compute the tangent vectors for each segment on the path\n\t\n\t\tfor ( i = 0; i < numpoints; i ++ ) {\n\t\n\t\t\tu = i / ( numpoints - 1 );\n\t\n\t\t\ttangents[ i ] = path.getTangentAt( u );\n\t\t\ttangents[ i ].normalize();\n\t\n\t\t}\n\t\n\t\tinitialNormal3();\n\t\n\t\t/*\n\t\tfunction initialNormal1(lastBinormal) {\n\t\t\t// fixed start binormal. Has dangers of 0 vectors\n\t\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n\t\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t\t}\n\t\n\t\tfunction initialNormal2() {\n\t\n\t\t\t// This uses the Frenet-Serret formula for deriving binormal\n\t\t\tvar t2 = path.getTangentAt( epsilon );\n\t\n\t\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n\t\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\t\n\t\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t\n\t\t}\n\t\t*/\n\t\n\t\tfunction initialNormal3() {\n\t\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the smallest tangent xyz component\n\t\n\t\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\t\tsmallest = Number.MAX_VALUE;\n\t\t\ttx = Math.abs( tangents[ 0 ].x );\n\t\t\tty = Math.abs( tangents[ 0 ].y );\n\t\t\ttz = Math.abs( tangents[ 0 ].z );\n\t\n\t\t\tif ( tx <= smallest ) {\n\t\n\t\t\t\tsmallest = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\t\n\t\t\t}\n\t\n\t\t\tif ( ty <= smallest ) {\n\t\n\t\t\t\tsmallest = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\t\n\t\t\t}\n\t\n\t\t\tif ( tz <= smallest ) {\n\t\n\t\t\t\tnormal.set( 0, 0, 1 );\n\t\n\t\t\t}\n\t\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\t\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\t\n\t\t}\n\t\n\t\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\t\n\t\tfor ( i = 1; i < numpoints; i ++ ) {\n\t\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\t\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\t\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\t\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\t\n\t\t\t\tvec.normalize();\n\t\n\t\t\t\ttheta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\t\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\t\n\t\t\t}\n\t\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\t\n\t\t}\n\t\n\t\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\t\n\t\tif ( closed ) {\n\t\n\t\t\ttheta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n\t\t\ttheta /= ( numpoints - 1 );\n\t\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\t\n\t\t\t\ttheta = - theta;\n\t\n\t\t\t}\n\t\n\t\t\tfor ( i = 1; i < numpoints; i ++ ) {\n\t\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\t// File:src/extras/geometries/PolyhedronGeometry.js\n\t\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\t\n\tTHREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\n\t\n\t\tTHREE.Geometry.call( this );\n\t\n\t\tthis.type = 'PolyhedronGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\t\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\t\n\t\tvar that = this;\n\t\n\t\tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\t\n\t\t\tprepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\t\n\t\t}\n\t\n\t\tvar p = this.vertices;\n\t\n\t\tvar faces = [];\n\t\n\t\tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\t\n\t\t\tvar v1 = p[ indices[ i ] ];\n\t\t\tvar v2 = p[ indices[ i + 1 ] ];\n\t\t\tvar v3 = p[ indices[ i + 2 ] ];\n\t\n\t\t\tfaces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t\n\t\t}\n\t\n\t\tvar centroid = new THREE.Vector3();\n\t\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t\t\tsubdivide( faces[ i ], detail );\n\t\n\t\t}\n\t\n\t\n\t\t// Handle case when face straddles the seam\n\t\n\t\tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\t\n\t\t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\t\n\t\t\tvar x0 = uvs[ 0 ].x;\n\t\t\tvar x1 = uvs[ 1 ].x;\n\t\t\tvar x2 = uvs[ 2 ].x;\n\t\n\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\tvar min = Math.min( x0, x1, x2 );\n\t\n\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\t\n\t\t\t\t// 0.9 is somewhat arbitrary\n\t\n\t\t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n\t\t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n\t\t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\n\t\t// Apply radius\n\t\n\t\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\t\n\t\t\tthis.vertices[ i ].multiplyScalar( radius );\n\t\n\t\t}\n\t\n\t\n\t\t// Merge vertices\n\t\n\t\tthis.mergeVertices();\n\t\n\t\tthis.computeFaceNormals();\n\t\n\t\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\t\n\t\n\t\t// Project vector onto sphere's surface\n\t\n\t\tfunction prepare( vector ) {\n\t\n\t\t\tvar vertex = vector.normalize().clone();\n\t\t\tvertex.index = that.vertices.push( vertex ) - 1;\n\t\n\t\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\t\n\t\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n\t\t\tvar v = inclination( vector ) / Math.PI + 0.5;\n\t\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\n\t\n\t\t\treturn vertex;\n\t\n\t\t}\n\t\n\t\n\t\t// Approximate a curved face with recursively sub-divided triangles.\n\t\n\t\tfunction make( v1, v2, v3 ) {\n\t\n\t\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t\t\tthat.faces.push( face );\n\t\n\t\t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\t\n\t\t\tvar azi = azimuth( centroid );\n\t\n\t\t\tthat.faceVertexUvs[ 0 ].push( [\n\t\t\t\tcorrectUV( v1.uv, v1, azi ),\n\t\t\t\tcorrectUV( v2.uv, v2, azi ),\n\t\t\t\tcorrectUV( v3.uv, v3, azi )\n\t\t\t] );\n\t\n\t\t}\n\t\n\t\n\t\t// Analytically subdivide a face to the required detail level.\n\t\n\t\tfunction subdivide( face, detail ) {\n\t\n\t\t\tvar cols = Math.pow( 2, detail );\n\t\t\tvar a = prepare( that.vertices[ face.a ] );\n\t\t\tvar b = prepare( that.vertices[ face.b ] );\n\t\t\tvar c = prepare( that.vertices[ face.c ] );\n\t\t\tvar v = [];\n\t\n\t\t\t// Construct all of the vertices for this subdivision.\n\t\n\t\t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\t\n\t\t\t\tv[ i ] = [];\n\t\n\t\t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n\t\t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n\t\t\t\tvar rows = cols - i;\n\t\n\t\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\t\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\t\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\t// Construct all of the faces.\n\t\n\t\t\tfor ( var i = 0; i < cols ; i ++ ) {\n\t\n\t\t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\t\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\t\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\t\n\t\t\t\t\t\tmake(\n\t\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\t\tv[ i + 1 ][ k ],\n\t\t\t\t\t\t\tv[ i ][ k ]\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\tmake(\n\t\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n\t\t\t\t\t\t\tv[ i + 1 ][ k ]\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\t\n\t\tfunction azimuth( vector ) {\n\t\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\t\n\t\t}\n\t\n\t\n\t\t// Angle above the XZ plane.\n\t\n\t\tfunction inclination( vector ) {\n\t\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\t\n\t\t}\n\t\n\t\n\t\t// Texture fixing helper. Spheres have some odd behaviours.\n\t\n\t\tfunction correctUV( uv, vector, azimuth ) {\n\t\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n\t\t\treturn uv.clone();\n\t\n\t\t}\n\t\n\t\n\t};\n\t\n\tTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;\n\t\n\t// File:src/extras/geometries/DodecahedronGeometry.js\n\t\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t */\n\t\n\tTHREE.DodecahedronGeometry = function ( radius, detail ) {\n\t\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\t\n\t\tvar vertices = [\n\t\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t\t\t- 1,  1, - 1,    - 1,  1,  1,\n\t\t\t 1, - 1, - 1,     1, - 1,  1,\n\t\t\t 1,  1, - 1,     1,  1,  1,\n\t\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t,     0, - r,  t,\n\t\t\t 0,  r, - t,     0,  r,  t,\n\t\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t,  0,    - r,  t,  0,\n\t\t\t r, - t,  0,     r,  t,  0,\n\t\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t,  0, - r,     t,  0, - r,\n\t\t\t- t,  0,  r,     t,  0,  r\n\t\t];\n\t\n\t\tvar indices = [\n\t\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t\t];\n\t\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t\tthis.type = 'DodecahedronGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\t\n\t};\n\t\n\tTHREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\n\tTHREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;\n\t\n\t// File:src/extras/geometries/IcosahedronGeometry.js\n\t\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t */\n\t\n\tTHREE.IcosahedronGeometry = function ( radius, detail ) {\n\t\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\n\t\tvar vertices = [\n\t\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t\t];\n\t\n\t\tvar indices = [\n\t\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t\t];\n\t\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t\tthis.type = 'IcosahedronGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\t\n\t};\n\t\n\tTHREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\n\tTHREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;\n\t\n\t// File:src/extras/geometries/OctahedronGeometry.js\n\t\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t */\n\t\n\tTHREE.OctahedronGeometry = function ( radius, detail ) {\n\t\n\t\tvar vertices = [\n\t\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t\t];\n\t\n\t\tvar indices = [\n\t\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t\t];\n\t\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t\tthis.type = 'OctahedronGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\t\n\t};\n\t\n\tTHREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\n\tTHREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;\n\t\n\t// File:src/extras/geometries/TetrahedronGeometry.js\n\t\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t */\n\t\n\tTHREE.TetrahedronGeometry = function ( radius, detail ) {\n\t\n\t\tvar vertices = [\n\t\t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t\t];\n\t\n\t\tvar indices = [\n\t\t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t\t];\n\t\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\t\n\t\tthis.type = 'TetrahedronGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\t\n\t};\n\t\n\tTHREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\n\tTHREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;\n\t\n\t// File:src/extras/geometries/ParametricGeometry.js\n\t\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t *\n\t * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n\t *\n\t */\n\t\n\tTHREE.ParametricGeometry = function ( func, slices, stacks ) {\n\t\n\t\tTHREE.Geometry.call( this );\n\t\n\t\tthis.type = 'ParametricGeometry';\n\t\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\t\n\t\tvar verts = this.vertices;\n\t\tvar faces = this.faces;\n\t\tvar uvs = this.faceVertexUvs[ 0 ];\n\t\n\t\tvar i, j, p;\n\t\tvar u, v;\n\t\n\t\tvar sliceCount = slices + 1;\n\t\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\t\n\t\t\tv = i / stacks;\n\t\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\t\n\t\t\t\tu = j / slices;\n\t\n\t\t\t\tp = func( u, v );\n\t\t\t\tverts.push( p );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tvar a, b, c, d;\n\t\tvar uva, uvb, uvc, uvd;\n\t\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\t\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\t\n\t\t\t\ta = i * sliceCount + j;\n\t\t\t\tb = i * sliceCount + j + 1;\n\t\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\td = ( i + 1 ) * sliceCount + j;\n\t\n\t\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\n\t\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\n\t\t\t\tuvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n\t\t\t\tuvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\n\t\n\t\t\t\tfaces.push( new THREE.Face3( a, b, d ) );\n\t\t\t\tuvs.push( [ uva, uvb, uvd ] );\n\t\n\t\t\t\tfaces.push( new THREE.Face3( b, c, d ) );\n\t\t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\t// console.log(this);\n\t\n\t\t// magic bullet\n\t\t// var diff = this.mergeVertices();\n\t\t// console.log('removed ', diff, ' vertices by merging');\n\t\n\t\tthis.computeFaceNormals();\n\t\tthis.computeVertexNormals();\n\t\n\t};\n\t\n\tTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\tTHREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;\n\t\n\t// File:src/extras/geometries/WireframeGeometry.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.WireframeGeometry = function ( geometry ) {\n\t\n\t\tTHREE.BufferGeometry.call( this );\n\t\n\t\tvar edge = [ 0, 0 ], hash = {};\n\t\n\t\tfunction sortFunction( a, b ) {\n\t\n\t\t\treturn a - b;\n\t\n\t\t}\n\t\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t\tif ( geometry instanceof THREE.Geometry ) {\n\t\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar numEdges = 0;\n\t\n\t\t\t// allocate maximal size\n\t\t\tvar edges = new Uint32Array( 6 * faces.length );\n\t\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar face = faces[ i ];\n\t\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge.sort( sortFunction );\n\t\n\t\t\t\t\tvar key = edge.toString();\n\t\n\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\t\tnumEdges ++;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\t\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\t\n\t\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\t\n\t\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\t\tcoords[ index + 0 ] = vertex.x;\n\t\t\t\t\tcoords[ index + 1 ] = vertex.y;\n\t\t\t\t\tcoords[ index + 2 ] = vertex.z;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\t\n\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\tif ( geometry.index !== null ) {\n\t\n\t\t\t\t// Indexed BufferGeometry\n\t\n\t\t\t\tvar indices = geometry.index.array;\n\t\t\t\tvar vertices = geometry.attributes.position;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar numEdges = 0;\n\t\n\t\t\t\tif ( groups.length === 0 ) {\n\t\n\t\t\t\t\tgeometry.addGroup( 0, indices.length );\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// allocate maximal size\n\t\t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\t\n\t\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\t\n\t\t\t\t\tvar group = groups[ o ];\n\t\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\t\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\t\n\t\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n\t\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n\t\t\t\t\t\t\tedge.sort( sortFunction );\n\t\n\t\t\t\t\t\t\tvar key = edge.toString();\n\t\n\t\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\t\n\t\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\t\t\t\tnumEdges ++;\n\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\t\n\t\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\t\n\t\t\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\t\n\t\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n\t\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n\t\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\t\n\t\t\t} else {\n\t\n\t\t\t\t// non-indexed BufferGeometry\n\t\n\t\t\t\tvar vertices = geometry.attributes.position.array;\n\t\t\t\tvar numEdges = vertices.length / 3;\n\t\t\t\tvar numTris = numEdges / 3;\n\t\n\t\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\t\n\t\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\t\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\t\n\t\t\t\t\t\tvar index = 18 * i + 6 * j;\n\t\n\t\t\t\t\t\tvar index1 = 9 * i + 3 * j;\n\t\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n\t\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n\t\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\t\n\t\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n\t\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n\t\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\tTHREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;\n\t\n\t// File:src/extras/helpers/AxisHelper.js\n\t\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.AxisHelper = function ( size ) {\n\t\n\t\tsize = size || 1;\n\t\n\t\tvar vertices = new Float32Array( [\n\t\t\t0, 0, 0,  size, 0, 0,\n\t\t\t0, 0, 0,  0, size, 0,\n\t\t\t0, 0, 0,  0, 0, size\n\t\t] );\n\t\n\t\tvar colors = new Float32Array( [\n\t\t\t1, 0, 0,  1, 0.6, 0,\n\t\t\t0, 1, 0,  0.6, 1, 0,\n\t\t\t0, 0, 1,  0, 0.6, 1\n\t\t] );\n\t\n\t\tvar geometry = new THREE.BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\n\t\n\t\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\t\n\t\tTHREE.LineSegments.call( this, geometry, material );\n\t\n\t};\n\t\n\tTHREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.AxisHelper.prototype.constructor = THREE.AxisHelper;\n\t\n\t// File:src/extras/helpers/ArrowHelper.js\n\t\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\t\n\tTHREE.ArrowHelper = ( function () {\n\t\n\t\tvar lineGeometry = new THREE.BufferGeometry();\n\t\tlineGeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\t\n\t\tvar coneGeometry = new THREE.CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\tconeGeometry.translate( 0, - 0.5, 0 );\n\t\n\t\treturn function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\t\n\t\t\t// dir is assumed to be normalized\n\t\n\t\t\tTHREE.Object3D.call( this );\n\t\n\t\t\tif ( color === undefined ) color = 0xffff00;\n\t\t\tif ( length === undefined ) length = 1;\n\t\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\t\n\t\t\tthis.position.copy( origin );\n\t\n\t\t\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );\n\t\t\tthis.line.matrixAutoUpdate = false;\n\t\t\tthis.add( this.line );\n\t\n\t\t\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );\n\t\t\tthis.cone.matrixAutoUpdate = false;\n\t\t\tthis.add( this.cone );\n\t\n\t\t\tthis.setDirection( dir );\n\t\t\tthis.setLength( length, headLength, headWidth );\n\t\n\t\t};\n\t\n\t}() );\n\t\n\tTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\n\t\n\tTHREE.ArrowHelper.prototype.setDirection = ( function () {\n\t\n\t\tvar axis = new THREE.Vector3();\n\t\tvar radians;\n\t\n\t\treturn function setDirection( dir ) {\n\t\n\t\t\t// dir is assumed to be normalized\n\t\n\t\t\tif ( dir.y > 0.99999 ) {\n\t\n\t\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\t\n\t\t\t} else if ( dir.y < - 0.99999 ) {\n\t\n\t\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\t\n\t\t\t} else {\n\t\n\t\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\t\n\t\t\t\tradians = Math.acos( dir.y );\n\t\n\t\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\t\n\t\t\t}\n\t\n\t\t};\n\t\n\t}() );\n\t\n\tTHREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\t\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\t\n\t\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\t\tthis.line.updateMatrix();\n\t\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\t\n\t};\n\t\n\tTHREE.ArrowHelper.prototype.setColor = function ( color ) {\n\t\n\t\tthis.line.material.color.copy( color );\n\t\tthis.cone.material.color.copy( color );\n\t\n\t};\n\t\n\t// File:src/extras/helpers/BoxHelper.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.BoxHelper = function ( object, color ) {\n\t\n\t\tif ( color === undefined ) color = 0xffff00;\n\t\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\t\n\t\tvar geometry = new THREE.BufferGeometry();\n\t\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\t\n\t\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ) );\n\t\n\t\tif ( object !== undefined ) {\n\t\n\t\t\tthis.update( object );\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\n\t\n\tTHREE.BoxHelper.prototype.update = ( function () {\n\t\n\t\tvar box = new THREE.Box3();\n\t\n\t\treturn function update( object ) {\n\t\n\t\t\tif ( object instanceof THREE.Box3 ) {\n\t\n\t\t\t\tbox.copy( object );\n\t\n\t\t\t} else {\n\t\n\t\t\t\tbox.setFromObject( object );\n\t\n\t\t\t}\n\t\n\t\t\tif ( box.isEmpty() ) return;\n\t\n\t\t\tvar min = box.min;\n\t\t\tvar max = box.max;\n\t\n\t\t\t/*\n\t\t\t  5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\t\n\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\t\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\t\n\t\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\t\n\t\t\tposition.needsUpdate = true;\n\t\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\n\t\t};\n\t\n\t} )();\n\t\n\t// File:src/extras/helpers/BoundingBoxHelper.js\n\t\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\t\n\t// a helper to show the world-axis-aligned bounding box for an object\n\t\n\tTHREE.BoundingBoxHelper = function ( object, hex ) {\n\t\n\t\tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\t\n\t\tthis.object = object;\n\t\n\t\tthis.box = new THREE.Box3();\n\t\n\t\tTHREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\n\t\n\t};\n\t\n\tTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\n\tTHREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\n\t\n\tTHREE.BoundingBoxHelper.prototype.update = function () {\n\t\n\t\tthis.box.setFromObject( this.object );\n\t\n\t\tthis.box.size( this.scale );\n\t\n\t\tthis.box.center( this.position );\n\t\n\t};\n\t\n\t// File:src/extras/helpers/CameraHelper.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\t\n\tTHREE.CameraHelper = function ( camera ) {\n\t\n\t\tvar geometry = new THREE.Geometry();\n\t\tvar material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\n\t\n\t\tvar pointMap = {};\n\t\n\t\t// colors\n\t\n\t\tvar hexFrustum = 0xffaa00;\n\t\tvar hexCone = 0xff0000;\n\t\tvar hexUp = 0x00aaff;\n\t\tvar hexTarget = 0xffffff;\n\t\tvar hexCross = 0x333333;\n\t\n\t\t// near\n\t\n\t\taddLine( \"n1\", \"n2\", hexFrustum );\n\t\taddLine( \"n2\", \"n4\", hexFrustum );\n\t\taddLine( \"n4\", \"n3\", hexFrustum );\n\t\taddLine( \"n3\", \"n1\", hexFrustum );\n\t\n\t\t// far\n\t\n\t\taddLine( \"f1\", \"f2\", hexFrustum );\n\t\taddLine( \"f2\", \"f4\", hexFrustum );\n\t\taddLine( \"f4\", \"f3\", hexFrustum );\n\t\taddLine( \"f3\", \"f1\", hexFrustum );\n\t\n\t\t// sides\n\t\n\t\taddLine( \"n1\", \"f1\", hexFrustum );\n\t\taddLine( \"n2\", \"f2\", hexFrustum );\n\t\taddLine( \"n3\", \"f3\", hexFrustum );\n\t\taddLine( \"n4\", \"f4\", hexFrustum );\n\t\n\t\t// cone\n\t\n\t\taddLine( \"p\", \"n1\", hexCone );\n\t\taddLine( \"p\", \"n2\", hexCone );\n\t\taddLine( \"p\", \"n3\", hexCone );\n\t\taddLine( \"p\", \"n4\", hexCone );\n\t\n\t\t// up\n\t\n\t\taddLine( \"u1\", \"u2\", hexUp );\n\t\taddLine( \"u2\", \"u3\", hexUp );\n\t\taddLine( \"u3\", \"u1\", hexUp );\n\t\n\t\t// target\n\t\n\t\taddLine( \"c\", \"t\", hexTarget );\n\t\taddLine( \"p\", \"c\", hexCross );\n\t\n\t\t// cross\n\t\n\t\taddLine( \"cn1\", \"cn2\", hexCross );\n\t\taddLine( \"cn3\", \"cn4\", hexCross );\n\t\n\t\taddLine( \"cf1\", \"cf2\", hexCross );\n\t\taddLine( \"cf3\", \"cf4\", hexCross );\n\t\n\t\tfunction addLine( a, b, hex ) {\n\t\n\t\t\taddPoint( a, hex );\n\t\t\taddPoint( b, hex );\n\t\n\t\t}\n\t\n\t\tfunction addPoint( id, hex ) {\n\t\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.colors.push( new THREE.Color( hex ) );\n\t\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\t\n\t\t\t\tpointMap[ id ] = [];\n\t\n\t\t\t}\n\t\n\t\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\t\n\t\t}\n\t\n\t\tTHREE.LineSegments.call( this, geometry, material );\n\t\n\t\tthis.camera = camera;\n\t\tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\t\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\t\n\t\tthis.pointMap = pointMap;\n\t\n\t\tthis.update();\n\t\n\t};\n\t\n\tTHREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\n\t\n\tTHREE.CameraHelper.prototype.update = function () {\n\t\n\t\tvar geometry, pointMap;\n\t\n\t\tvar vector = new THREE.Vector3();\n\t\tvar camera = new THREE.Camera();\n\t\n\t\tfunction setPoint( point, x, y, z ) {\n\t\n\t\t\tvector.set( x, y, z ).unproject( camera );\n\t\n\t\t\tvar points = pointMap[ point ];\n\t\n\t\t\tif ( points !== undefined ) {\n\t\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\t\n\t\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\treturn function update() {\n\t\n\t\t\tgeometry = this.geometry;\n\t\t\tpointMap = this.pointMap;\n\t\n\t\t\tvar w = 1, h = 1;\n\t\n\t\t\t// we need just camera projection matrix\n\t\t\t// world matrix must be identity\n\t\n\t\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\t\n\t\t\t// center / target\n\t\n\t\t\tsetPoint( \"c\", 0, 0, - 1 );\n\t\t\tsetPoint( \"t\", 0, 0,  1 );\n\t\n\t\t\t// near\n\t\n\t\t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t\t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t\t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t\t\tsetPoint( \"n4\",   w,   h, - 1 );\n\t\n\t\t\t// far\n\t\n\t\t\tsetPoint( \"f1\", - w, - h, 1 );\n\t\t\tsetPoint( \"f2\",   w, - h, 1 );\n\t\t\tsetPoint( \"f3\", - w,   h, 1 );\n\t\t\tsetPoint( \"f4\",   w,   h, 1 );\n\t\n\t\t\t// up\n\t\n\t\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\t\n\t\t\t// cross\n\t\n\t\t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t\t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t\t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t\t\tsetPoint( \"cf4\",   0,   h, 1 );\n\t\n\t\t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t\t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t\t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t\t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\t\n\t\t\tgeometry.verticesNeedUpdate = true;\n\t\n\t\t};\n\t\n\t}();\n\t\n\t// File:src/extras/helpers/DirectionalLightHelper.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\t\n\tTHREE.DirectionalLightHelper = function ( light, size ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\t\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\t\n\t\tif ( size === undefined ) size = 1;\n\t\n\t\tvar geometry = new THREE.BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [\n\t\t\t- size,   size, 0,\n\t\t\t  size,   size, 0,\n\t\t\t  size, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size,   size, 0\n\t\t], 3 ) );\n\t\n\t\tvar material = new THREE.LineBasicMaterial( { fog: false } );\n\t\n\t\tthis.add( new THREE.Line( geometry, material ) );\n\t\n\t\tgeometry = new THREE.BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\t\n\t\tthis.add( new THREE.Line( geometry, material ));\n\t\n\t\tthis.update();\n\t\n\t};\n\t\n\tTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\n\t\n\tTHREE.DirectionalLightHelper.prototype.dispose = function () {\n\t\n\t\tvar lightPlane = this.children[ 0 ];\n\t\tvar targetLine = this.children[ 1 ];\n\t\n\t\tlightPlane.geometry.dispose();\n\t\tlightPlane.material.dispose();\n\t\ttargetLine.geometry.dispose();\n\t\ttargetLine.material.dispose();\n\t\n\t};\n\t\n\tTHREE.DirectionalLightHelper.prototype.update = function () {\n\t\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\t\tvar v3 = new THREE.Vector3();\n\t\n\t\treturn function update() {\n\t\n\t\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t\tv3.subVectors( v2, v1 );\n\t\n\t\t\tvar lightPlane = this.children[ 0 ];\n\t\t\tvar targetLine = this.children[ 1 ];\n\t\n\t\t\tlightPlane.lookAt( v3 );\n\t\t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t\t\ttargetLine.lookAt( v3 );\n\t\t\ttargetLine.scale.z = v3.length();\n\t\n\t\t};\n\t\n\t}();\n\t\n\t// File:src/extras/helpers/EdgesHelper.js\n\t\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @param object THREE.Mesh whose geometry will be used\n\t * @param hex line color\n\t * @param thresholdAngle the minimum angle (in degrees),\n\t * between the face normals of adjacent faces,\n\t * that is required to render an edge. A value of 10 means\n\t * an edge is only rendered if the angle is at least 10 degrees.\n\t */\n\t\n\tTHREE.EdgesHelper = function ( object, hex, thresholdAngle ) {\n\t\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\t\n\t\tTHREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );\n\t\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\t\n\t};\n\t\n\tTHREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;\n\t\n\t// File:src/extras/helpers/FaceNormalsHelper.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\t\n\tTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\n\t\n\t\t// FaceNormalsHelper only supports THREE.Geometry\n\t\n\t\tthis.object = object;\n\t\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\t\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\t\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\t\n\t\t//\n\t\n\t\tvar nNormals = 0;\n\t\n\t\tvar objGeometry = this.object.geometry;\n\t\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\n\t\n\t\t\tnNormals = objGeometry.faces.length;\n\t\n\t\t} else {\n\t\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tvar geometry = new THREE.BufferGeometry();\n\t\n\t\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\n\t\n\t\tgeometry.addAttribute( 'position', positions );\n\t\n\t\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\n\t\n\t\t//\n\t\n\t\tthis.matrixAutoUpdate = false;\n\t\tthis.update();\n\t\n\t};\n\t\n\tTHREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\n\t\n\tTHREE.FaceNormalsHelper.prototype.update = ( function () {\n\t\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\t\tvar normalMatrix = new THREE.Matrix3();\n\t\n\t\treturn function update() {\n\t\n\t\t\tthis.object.updateMatrixWorld( true );\n\t\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\t\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\t\n\t\t\tvar position = this.geometry.attributes.position;\n\t\n\t\t\t//\n\t\n\t\t\tvar objGeometry = this.object.geometry;\n\t\n\t\t\tvar vertices = objGeometry.vertices;\n\t\n\t\t\tvar faces = objGeometry.faces;\n\t\n\t\t\tvar idx = 0;\n\t\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t\t\t\tvar face = faces[ i ];\n\t\n\t\t\t\tvar normal = face.normal;\n\t\n\t\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t\t.divideScalar( 3 )\n\t\t\t\t\t.applyMatrix4( matrixWorld );\n\t\n\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t\t\t\tidx = idx + 1;\n\t\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t\t\t\tidx = idx + 1;\n\t\n\t\t\t}\n\t\n\t\t\tposition.needsUpdate = true;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t}() );\n\t\n\t// File:src/extras/helpers/GridHelper.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.GridHelper = function ( size, divisions, color1, color2 ) {\n\t\n\t\tdivisions = divisions || 1;\n\t\tcolor1 = new THREE.Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new THREE.Color( color2 !== undefined ? color2 : 0x888888 );\n\t\n\t\tvar center = divisions / 2;\n\t\tvar step = ( size * 2 ) / divisions;\n\t\tvar vertices = [], colors = [];\n\t\n\t\tfor ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {\n\t\n\t\t\tvertices.push( - size, 0, k, size, 0, k );\n\t\t\tvertices.push( k, 0, - size, k, 0, size );\n\t\n\t\t\tvar color = i === center ? color1 : color2;\n\t\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\n\t\t}\n\t\n\t\tvar geometry = new THREE.BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new THREE.Float32Attribute( colors, 3 ) );\n\t\n\t\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\t\n\t\tTHREE.LineSegments.call( this, geometry, material );\n\t\n\t};\n\t\n\tTHREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.GridHelper.prototype.constructor = THREE.GridHelper;\n\t\n\tTHREE.GridHelper.prototype.setColors = function () {\n\t\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\t\n\t};\n\t\n\t// File:src/extras/helpers/HemisphereLightHelper.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.HemisphereLightHelper = function ( light, sphereSize ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\t\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\t\n\t\tthis.colors = [ new THREE.Color(), new THREE.Color() ];\n\t\n\t\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\n\t\tgeometry.rotateX( - Math.PI / 2 );\n\t\n\t\tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\t\n\t\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\t\n\t\t}\n\t\n\t\tvar material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\n\t\n\t\tthis.lightSphere = new THREE.Mesh( geometry, material );\n\t\tthis.add( this.lightSphere );\n\t\n\t\tthis.update();\n\t\n\t};\n\t\n\tTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\n\t\n\tTHREE.HemisphereLightHelper.prototype.dispose = function () {\n\t\n\t\tthis.lightSphere.geometry.dispose();\n\t\tthis.lightSphere.material.dispose();\n\t\n\t};\n\t\n\tTHREE.HemisphereLightHelper.prototype.update = function () {\n\t\n\t\tvar vector = new THREE.Vector3();\n\t\n\t\treturn function update() {\n\t\n\t\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\t\n\t\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\t\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\t\n\t\t};\n\t\n\t}();\n\t\n\t// File:src/extras/helpers/PointLightHelper.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.PointLightHelper = function ( light, sphereSize ) {\n\t\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\t\n\t\tvar geometry = new THREE.SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\n\t\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t\tTHREE.Mesh.call( this, geometry, material );\n\t\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\t\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\n\t\tvar d = light.distance;\n\t\n\t\tif ( d === 0.0 ) {\n\t\n\t\t\tthis.lightDistance.visible = false;\n\t\n\t\t} else {\n\t\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\n\t\t}\n\t\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\t\n\t};\n\t\n\tTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\n\tTHREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\n\t\n\tTHREE.PointLightHelper.prototype.dispose = function () {\n\t\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\t\n\t};\n\t\n\tTHREE.PointLightHelper.prototype.update = function () {\n\t\n\t\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t\t/*\n\t\tvar d = this.light.distance;\n\t\n\t\tif ( d === 0.0 ) {\n\t\n\t\t\tthis.lightDistance.visible = false;\n\t\n\t\t} else {\n\t\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\n\t\t}\n\t\t*/\n\t\n\t};\n\t\n\t// File:src/extras/helpers/SkeletonHelper.js\n\t\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t */\n\t\n\tTHREE.SkeletonHelper = function ( object ) {\n\t\n\t\tthis.bones = this.getBoneList( object );\n\t\n\t\tvar geometry = new THREE.Geometry();\n\t\n\t\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\t\n\t\t\tvar bone = this.bones[ i ];\n\t\n\t\t\tif ( bone.parent instanceof THREE.Bone ) {\n\t\n\t\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\t\tgeometry.colors.push( new THREE.Color( 0, 0, 1 ) );\n\t\t\t\tgeometry.colors.push( new THREE.Color( 0, 1, 0 ) );\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tgeometry.dynamic = true;\n\t\n\t\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\t\n\t\tTHREE.LineSegments.call( this, geometry, material );\n\t\n\t\tthis.root = object;\n\t\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\t\n\t\tthis.update();\n\t\n\t};\n\t\n\t\n\tTHREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\n\t\n\tTHREE.SkeletonHelper.prototype.getBoneList = function( object ) {\n\t\n\t\tvar boneList = [];\n\t\n\t\tif ( object instanceof THREE.Bone ) {\n\t\n\t\t\tboneList.push( object );\n\t\n\t\t}\n\t\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\t\n\t\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\t\n\t\t}\n\t\n\t\treturn boneList;\n\t\n\t};\n\t\n\tTHREE.SkeletonHelper.prototype.update = function () {\n\t\n\t\tvar geometry = this.geometry;\n\t\n\t\tvar matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );\n\t\n\t\tvar boneMatrix = new THREE.Matrix4();\n\t\n\t\tvar j = 0;\n\t\n\t\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\t\n\t\t\tvar bone = this.bones[ i ];\n\t\n\t\t\tif ( bone.parent instanceof THREE.Bone ) {\n\t\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\t\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\t\n\t\t\t\tj += 2;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tgeometry.verticesNeedUpdate = true;\n\t\n\t\tgeometry.computeBoundingSphere();\n\t\n\t};\n\t\n\t// File:src/extras/helpers/SpotLightHelper.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\t\n\tTHREE.SpotLightHelper = function ( light ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\t\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\t\n\t\tvar geometry = new THREE.BufferGeometry();\n\t\n\t\tvar positions = [\n\t\t\t0, 0, 0,   0,   0,   1,\n\t\t\t0, 0, 0,   1,   0,   1,\n\t\t\t0, 0, 0, - 1,   0,   1,\n\t\t\t0, 0, 0,   0,   1,   1,\n\t\t\t0, 0, 0,   0, - 1,   1\n\t\t];\n\t\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\t\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\t\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\t\n\t\t}\n\t\n\t\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( positions, 3 ) );\n\t\n\t\tvar material = new THREE.LineBasicMaterial( { fog: false } );\n\t\n\t\tthis.cone = new THREE.LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\t\n\t\tthis.update();\n\t\n\t};\n\t\n\tTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\n\t\n\tTHREE.SpotLightHelper.prototype.dispose = function () {\n\t\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\t\n\t};\n\t\n\tTHREE.SpotLightHelper.prototype.update = function () {\n\t\n\t\tvar vector = new THREE.Vector3();\n\t\tvar vector2 = new THREE.Vector3();\n\t\n\t\treturn function update() {\n\t\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\t\n\t\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\t\n\t\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\n\t\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\t\n\t\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\n\t\t};\n\t\n\t}();\n\t\n\t// File:src/extras/helpers/VertexNormalsHelper.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\t\n\tTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\n\t\n\t\tthis.object = object;\n\t\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\t\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\t\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\t\n\t\t//\n\t\n\t\tvar nNormals = 0;\n\t\n\t\tvar objGeometry = this.object.geometry;\n\t\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\n\t\n\t\t\tnNormals = objGeometry.faces.length * 3;\n\t\n\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\tnNormals = objGeometry.attributes.normal.count;\n\t\n\t\t}\n\t\n\t\t//\n\t\n\t\tvar geometry = new THREE.BufferGeometry();\n\t\n\t\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\n\t\n\t\tgeometry.addAttribute( 'position', positions );\n\t\n\t\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\n\t\n\t\t//\n\t\n\t\tthis.matrixAutoUpdate = false;\n\t\n\t\tthis.update();\n\t\n\t};\n\t\n\tTHREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\n\t\n\tTHREE.VertexNormalsHelper.prototype.update = ( function () {\n\t\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\t\tvar normalMatrix = new THREE.Matrix3();\n\t\n\t\treturn function update() {\n\t\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\n\t\n\t\t\tthis.object.updateMatrixWorld( true );\n\t\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\t\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\t\n\t\t\tvar position = this.geometry.attributes.position;\n\t\n\t\t\t//\n\t\n\t\t\tvar objGeometry = this.object.geometry;\n\t\n\t\t\tif ( objGeometry instanceof THREE.Geometry ) {\n\t\n\t\t\t\tvar vertices = objGeometry.vertices;\n\t\n\t\t\t\tvar faces = objGeometry.faces;\n\t\n\t\t\t\tvar idx = 0;\n\t\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\t\n\t\t\t\t\tvar face = faces[ i ];\n\t\n\t\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\t\n\t\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\t\n\t\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\t\n\t\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\t\n\t\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t\t\t\t\t\tidx = idx + 1;\n\t\n\t\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t\t\t\t\t\tidx = idx + 1;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\n\t\n\t\t\t\tvar objPos = objGeometry.attributes.position;\n\t\n\t\t\t\tvar objNorm = objGeometry.attributes.normal;\n\t\n\t\t\t\tvar idx = 0;\n\t\n\t\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\t\n\t\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\t\n\t\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\t\n\t\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\t\n\t\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\t\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\t\n\t\t\t\t\tidx = idx + 1;\n\t\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\t\n\t\t\t\t\tidx = idx + 1;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tposition.needsUpdate = true;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t}() );\n\t\n\t// File:src/extras/helpers/WireframeHelper.js\n\t\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\t\n\tTHREE.WireframeHelper = function ( object, hex ) {\n\t\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\t\n\t\tTHREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );\n\t\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\t\n\t};\n\t\n\tTHREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );\n\tTHREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;\n\t\n\t// File:src/extras/objects/ImmediateRenderObject.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.ImmediateRenderObject = function ( material ) {\n\t\n\t\tTHREE.Object3D.call( this );\n\t\n\t\tthis.material = material;\n\t\tthis.render = function ( renderCallback ) {};\n\t\n\t};\n\t\n\tTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\n\tTHREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;\n\t\n\t// File:src/extras/objects/MorphBlendMesh.js\n\t\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\t\n\tTHREE.MorphBlendMesh = function( geometry, material ) {\n\t\n\t\tTHREE.Mesh.call( this, geometry, material );\n\t\n\t\tthis.animationsMap = {};\n\t\tthis.animationsList = [];\n\t\n\t\t// prepare default animation\n\t\t// (all frames played together in 1 second)\n\t\n\t\tvar numFrames = this.geometry.morphTargets.length;\n\t\n\t\tvar name = \"__default\";\n\t\n\t\tvar startFrame = 0;\n\t\tvar endFrame = numFrames - 1;\n\t\n\t\tvar fps = numFrames / 1;\n\t\n\t\tthis.createAnimation( name, startFrame, endFrame, fps );\n\t\tthis.setAnimationWeight( name, 1 );\n\t\n\t};\n\t\n\tTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\n\tTHREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\n\t\n\tTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\n\t\n\t\tvar animation = {\n\t\n\t\t\tstart: start,\n\t\t\tend: end,\n\t\n\t\t\tlength: end - start + 1,\n\t\n\t\t\tfps: fps,\n\t\t\tduration: ( end - start ) / fps,\n\t\n\t\t\tlastFrame: 0,\n\t\t\tcurrentFrame: 0,\n\t\n\t\t\tactive: false,\n\t\n\t\t\ttime: 0,\n\t\t\tdirection: 1,\n\t\t\tweight: 1,\n\t\n\t\t\tdirectionBackwards: false,\n\t\t\tmirroredLoop: false\n\t\n\t\t};\n\t\n\t\tthis.animationsMap[ name ] = animation;\n\t\tthis.animationsList.push( animation );\n\t\n\t};\n\t\n\tTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\n\t\n\t\tvar pattern = /([a-z]+)_?(\\d+)/i;\n\t\n\t\tvar firstAnimation, frameRanges = {};\n\t\n\t\tvar geometry = this.geometry;\n\t\n\t\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\n\t\n\t\t\tvar morph = geometry.morphTargets[ i ];\n\t\t\tvar chunks = morph.name.match( pattern );\n\t\n\t\t\tif ( chunks && chunks.length > 1 ) {\n\t\n\t\t\t\tvar name = chunks[ 1 ];\n\t\n\t\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\n\t\n\t\t\t\tvar range = frameRanges[ name ];\n\t\n\t\t\t\tif ( i < range.start ) range.start = i;\n\t\t\t\tif ( i > range.end ) range.end = i;\n\t\n\t\t\t\tif ( ! firstAnimation ) firstAnimation = name;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t\tfor ( var name in frameRanges ) {\n\t\n\t\t\tvar range = frameRanges[ name ];\n\t\t\tthis.createAnimation( name, range.start, range.end, fps );\n\t\n\t\t}\n\t\n\t\tthis.firstAnimation = firstAnimation;\n\t\n\t};\n\t\n\tTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\n\t\n\t\tvar animation = this.animationsMap[ name ];\n\t\n\t\tif ( animation ) {\n\t\n\t\t\tanimation.direction = 1;\n\t\t\tanimation.directionBackwards = false;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\n\t\n\t\tvar animation = this.animationsMap[ name ];\n\t\n\t\tif ( animation ) {\n\t\n\t\t\tanimation.direction = - 1;\n\t\t\tanimation.directionBackwards = true;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\n\t\n\t\tvar animation = this.animationsMap[ name ];\n\t\n\t\tif ( animation ) {\n\t\n\t\t\tanimation.fps = fps;\n\t\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\n\t\n\t\tvar animation = this.animationsMap[ name ];\n\t\n\t\tif ( animation ) {\n\t\n\t\t\tanimation.duration = duration;\n\t\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\n\t\n\t\tvar animation = this.animationsMap[ name ];\n\t\n\t\tif ( animation ) {\n\t\n\t\t\tanimation.weight = weight;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\n\t\n\t\tvar animation = this.animationsMap[ name ];\n\t\n\t\tif ( animation ) {\n\t\n\t\t\tanimation.time = time;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\n\t\n\t\tvar time = 0;\n\t\n\t\tvar animation = this.animationsMap[ name ];\n\t\n\t\tif ( animation ) {\n\t\n\t\t\ttime = animation.time;\n\t\n\t\t}\n\t\n\t\treturn time;\n\t\n\t};\n\t\n\tTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\n\t\n\t\tvar duration = - 1;\n\t\n\t\tvar animation = this.animationsMap[ name ];\n\t\n\t\tif ( animation ) {\n\t\n\t\t\tduration = animation.duration;\n\t\n\t\t}\n\t\n\t\treturn duration;\n\t\n\t};\n\t\n\tTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\n\t\n\t\tvar animation = this.animationsMap[ name ];\n\t\n\t\tif ( animation ) {\n\t\n\t\t\tanimation.time = 0;\n\t\t\tanimation.active = true;\n\t\n\t\t} else {\n\t\n\t\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\n\t\n\t\tvar animation = this.animationsMap[ name ];\n\t\n\t\tif ( animation ) {\n\t\n\t\t\tanimation.active = false;\n\t\n\t\t}\n\t\n\t};\n\t\n\tTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\n\t\n\t\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\n\t\n\t\t\tvar animation = this.animationsList[ i ];\n\t\n\t\t\tif ( ! animation.active ) continue;\n\t\n\t\t\tvar frameTime = animation.duration / animation.length;\n\t\n\t\t\tanimation.time += animation.direction * delta;\n\t\n\t\t\tif ( animation.mirroredLoop ) {\n\t\n\t\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\n\t\n\t\t\t\t\tanimation.direction *= - 1;\n\t\n\t\t\t\t\tif ( animation.time > animation.duration ) {\n\t\n\t\t\t\t\t\tanimation.time = animation.duration;\n\t\t\t\t\t\tanimation.directionBackwards = true;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( animation.time < 0 ) {\n\t\n\t\t\t\t\t\tanimation.time = 0;\n\t\t\t\t\t\tanimation.directionBackwards = false;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t} else {\n\t\n\t\t\t\tanimation.time = animation.time % animation.duration;\n\t\n\t\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\n\t\n\t\t\t}\n\t\n\t\t\tvar keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\n\t\t\tvar weight = animation.weight;\n\t\n\t\t\tif ( keyframe !== animation.currentFrame ) {\n\t\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\n\t\n\t\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\n\t\n\t\t\t\tanimation.lastFrame = animation.currentFrame;\n\t\t\t\tanimation.currentFrame = keyframe;\n\t\n\t\t\t}\n\t\n\t\t\tvar mix = ( animation.time % frameTime ) / frameTime;\n\t\n\t\t\tif ( animation.directionBackwards ) mix = 1 - mix;\n\t\n\t\t\tif ( animation.currentFrame !== animation.lastFrame ) {\n\t\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\n\t\n\t\t\t} else {\n\t\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar ServiceLocator = function () {\n\t  function ServiceLocator() {\n\t    _classCallCheck(this, ServiceLocator);\n\t  }\n\t\n\t  _createClass(ServiceLocator, null, [{\n\t    key: \"provide\",\n\t    value: function provide(name, service) {\n\t      if (!this._services) {\n\t        this._services = new Map();\n\t      }\n\t      this._services.set(name, service);\n\t    }\n\t  }, {\n\t    key: \"get\",\n\t    value: function get(name) {\n\t      if (this._services.has(name)) {\n\t        return this._services.get(name);\n\t      } else {\n\t        throw new ReferenceError(\"Service '\" + name + \"' not found.\");\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return ServiceLocator;\n\t}();\n\t\n\texports.default = ServiceLocator;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _game = __webpack_require__(7);\n\t\n\tvar _game2 = _interopRequireDefault(_game);\n\t\n\tvar _mouse = __webpack_require__(9);\n\t\n\tvar _mouse2 = _interopRequireDefault(_mouse);\n\t\n\tvar _touch = __webpack_require__(11);\n\t\n\tvar _touch2 = _interopRequireDefault(_touch);\n\t\n\tvar _m3scene = __webpack_require__(13);\n\t\n\tvar _m3scene2 = _interopRequireDefault(_m3scene);\n\t\n\tvar _tween = __webpack_require__(20);\n\t\n\tvar _tween2 = _interopRequireDefault(_tween);\n\t\n\tvar _serviceLocator = __webpack_require__(5);\n\t\n\tvar _serviceLocator2 = _interopRequireDefault(_serviceLocator);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar M3Game = function (_Game) {\n\t  _inherits(M3Game, _Game);\n\t\n\t  function M3Game(renderer) {\n\t    _classCallCheck(this, M3Game);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(M3Game).call(this, renderer));\n\t\n\t    _serviceLocator2.default.provide('Mouse', new _mouse2.default());\n\t    _serviceLocator2.default.provide('Touch', new _touch2.default());\n\t    return _this;\n\t  }\n\t\n\t  _createClass(M3Game, [{\n\t    key: 'start',\n\t    value: function start() {\n\t      _get(Object.getPrototypeOf(M3Game.prototype), 'start', this).call(this);\n\t      this.scene = new _m3scene2.default(this);\n\t    }\n\t  }, {\n\t    key: '_update',\n\t    value: function _update() {\n\t      _get(Object.getPrototypeOf(M3Game.prototype), '_update', this).call(this);\n\t      _tween2.default.update();\n\t    }\n\t  }]);\n\t\n\t  return M3Game;\n\t}(_game2.default);\n\t\n\texports.default = M3Game;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _three = __webpack_require__(4);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _stats = __webpack_require__(8);\n\t\n\tvar _stats2 = _interopRequireDefault(_stats);\n\t\n\tvar _serviceLocator = __webpack_require__(5);\n\t\n\tvar _serviceLocator2 = _interopRequireDefault(_serviceLocator);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Game = function () {\n\t  function Game(engine, width, height) {\n\t    var color = arguments.length <= 3 || arguments[3] === undefined ? 0x0099ff : arguments[3];\n\t\n\t    _classCallCheck(this, Game);\n\t\n\t    this._engine = engine;\n\t    this._width = width;\n\t    this._height = height;\n\t    this._camera = new _three2.default.PerspectiveCamera(75, this._width / this._height, 1, 1000);\n\t    this._camera.position.z = 500;\n\t\n\t    this._stats = new _stats2.default();\n\t    this._stats.domElement.style.position = 'absolute';\n\t    this._stats.domElement.style.left = '0px';\n\t    this._stats.domElement.style.top = '0px';\n\t\n\t    this._engine.renderer.setClearColor(color);\n\t    this._stats.setMode(0);\n\t\n\t    document.body.appendChild(this._stats.domElement);\n\t\n\t    this._animate();\n\t    _serviceLocator2.default.provide('Game', this);\n\t  }\n\t\n\t  _createClass(Game, [{\n\t    key: 'start',\n\t    value: function start() {}\n\t  }, {\n\t    key: 'resize',\n\t    value: function resize(width, height) {\n\t      this._width = width;\n\t      this._height = height;\n\t      this._camera.aspect = this._width / this._height;\n\t      this._camera.updateProjectionMatrix();\n\t      if (this._scene) {\n\t        this._scene.resize(width, height);\n\t      }\n\t    }\n\t  }, {\n\t    key: '_animate',\n\t    value: function _animate() {\n\t      this._stats.begin();\n\t      this._update();\n\t      this._stats.end();\n\t      window.requestAnimationFrame(this._animate.bind(this));\n\t    }\n\t  }, {\n\t    key: '_update',\n\t    value: function _update() {\n\t      if (this._scene) {\n\t        this._scene.update();\n\t        this._render();\n\t      }\n\t    }\n\t  }, {\n\t    key: '_render',\n\t    value: function _render() {\n\t      this._engine.renderer.clear();\n\t      this._engine.renderer.clearDepth();\n\t      this._engine.renderer.render(this._scene, this._camera);\n\t    }\n\t  }, {\n\t    key: 'scene',\n\t    set: function set(value) {\n\t      this._scene = value;\n\t    },\n\t    get: function get() {\n\t      return this._scene;\n\t    }\n\t  }, {\n\t    key: 'camera',\n\t    get: function get() {\n\t      return this._camera;\n\t    }\n\t  }, {\n\t    key: 'engine',\n\t    get: function get() {\n\t      return this._engine;\n\t    }\n\t  }]);\n\t\n\t  return Game;\n\t}();\n\t\n\texports.default = Game;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t// stats.js - http://github.com/mrdoob/stats.js\n\tvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\n\tif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\n\tStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\n\tv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _three = __webpack_require__(4);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _mouseEvent = __webpack_require__(10);\n\t\n\tvar _mouseEvent2 = _interopRequireDefault(_mouseEvent);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Mouse = function (_THREE$EventDispatche) {\n\t  _inherits(Mouse, _THREE$EventDispatche);\n\t\n\t  function Mouse(x, y) {\n\t    _classCallCheck(this, Mouse);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Mouse).call(this));\n\t\n\t    _this._position = new _three2.default.Vector2(x, y);\n\t    window.addEventListener('click', _this.onClick.bind(_this), false);\n\t    window.addEventListener('mousedown', _this.onMouseDown.bind(_this), false);\n\t    window.addEventListener('mousemove', _this.onMouseMove.bind(_this), false);\n\t    window.addEventListener('mouseup', _this.onMouseUp.bind(_this), false);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Mouse, [{\n\t    key: 'update',\n\t    value: function update(event) {\n\t      this._position.x = event.clientX / window.innerWidth * 2 - 1;\n\t      this._position.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\t    }\n\t  }, {\n\t    key: 'onClick',\n\t    value: function onClick(event) {\n\t      this.update(event);\n\t      this.dispatchEvent({ type: _mouseEvent2.default.CLICK });\n\t    }\n\t  }, {\n\t    key: 'onMouseMove',\n\t    value: function onMouseMove(event) {\n\t      this.update(event);\n\t      this.dispatchEvent({ type: _mouseEvent2.default.MOVE });\n\t    }\n\t  }, {\n\t    key: 'onMouseDown',\n\t    value: function onMouseDown(event) {\n\t      this.update(event);\n\t      this.dispatchEvent({ type: _mouseEvent2.default.DOWN });\n\t    }\n\t  }, {\n\t    key: 'onMouseUp',\n\t    value: function onMouseUp(event) {\n\t      this.update(event);\n\t      this.dispatchEvent({ type: _mouseEvent2.default.UP });\n\t    }\n\t  }, {\n\t    key: 'x',\n\t    get: function get() {\n\t      return this._position.x;\n\t    }\n\t  }, {\n\t    key: 'y',\n\t    get: function get() {\n\t      return this._position.y;\n\t    }\n\t  }, {\n\t    key: 'position',\n\t    get: function get() {\n\t      return this._position;\n\t    }\n\t  }]);\n\t\n\t  return Mouse;\n\t}(_three2.default.EventDispatcher);\n\t\n\texports.default = Mouse;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar MouseEvent = {\n\t  DOWN: 'core.MouseEvent.DOWN',\n\t  UP: 'core.MouseEvent.UP',\n\t  CLICK: 'core.MouseEvent.CLICK',\n\t  MOVE: 'core.MouseEvent.MOVE'\n\t};\n\texports.default = MouseEvent;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _three = __webpack_require__(4);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _touchEvent = __webpack_require__(12);\n\t\n\tvar _touchEvent2 = _interopRequireDefault(_touchEvent);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Touch = function (_THREE$EventDispatche) {\n\t  _inherits(Touch, _THREE$EventDispatche);\n\t\n\t  function Touch(x, y) {\n\t    _classCallCheck(this, Touch);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Touch).call(this));\n\t\n\t    _this._position = new _three2.default.Vector2(x, y);\n\t    window.addEventListener('touchstart', _this.onStart.bind(_this), false);\n\t    window.addEventListener('touchend', _this.onEnd.bind(_this), false);\n\t    window.addEventListener('touchmove', _this.onMove.bind(_this), false);\n\t    window.addEventListener('touchcancel', _this.onCancel.bind(_this), false);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Touch, [{\n\t    key: 'update',\n\t    value: function update(event) {\n\t      if (event.targetTouches.length > 0) {\n\t        var touchEvent = event.targetTouches.item(0);\n\t        this._position.x = touchEvent.clientX / window.innerWidth * 2 - 1;\n\t        this._position.y = -(touchEvent.clientY / window.innerHeight) * 2 + 1;\n\t        console.debug('Touch', this._position);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'onStart',\n\t    value: function onStart(event) {\n\t      this.update(event);\n\t      this.dispatchEvent({ type: _touchEvent2.default.START });\n\t    }\n\t  }, {\n\t    key: 'onEnd',\n\t    value: function onEnd(event) {\n\t      this.update(event);\n\t      this.dispatchEvent({ type: _touchEvent2.default.END });\n\t    }\n\t  }, {\n\t    key: 'onMove',\n\t    value: function onMove(event) {\n\t      this.update(event);\n\t      this.dispatchEvent({ type: _touchEvent2.default.MOVE });\n\t    }\n\t  }, {\n\t    key: 'onCancel',\n\t    value: function onCancel(event) {\n\t      this.update(event);\n\t      this.dispatchEvent({ type: _touchEvent2.default.CANCEL });\n\t    }\n\t  }, {\n\t    key: 'x',\n\t    get: function get() {\n\t      return this._position.x;\n\t    }\n\t  }, {\n\t    key: 'y',\n\t    get: function get() {\n\t      return this._position.y;\n\t    }\n\t  }, {\n\t    key: 'position',\n\t    get: function get() {\n\t      return this._position;\n\t    }\n\t  }]);\n\t\n\t  return Touch;\n\t}(_three2.default.EventDispatcher);\n\t\n\texports.default = Touch;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar TouchEvent = {\n\t  CANCEL: 'core.TouchEvent.CANCEL',\n\t  END: 'core.TouchEvent.END',\n\t  MOVE: 'core.TouchEvent.MOVE',\n\t  START: 'core.TouchEvent.START'\n\t};\n\texports.default = TouchEvent;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _scene = __webpack_require__(14);\n\t\n\tvar _scene2 = _interopRequireDefault(_scene);\n\t\n\tvar _model = __webpack_require__(15);\n\t\n\tvar _model2 = _interopRequireDefault(_model);\n\t\n\tvar _gridModel = __webpack_require__(16);\n\t\n\tvar _gridModel2 = _interopRequireDefault(_gridModel);\n\t\n\tvar _tileModel = __webpack_require__(18);\n\t\n\tvar _tileModel2 = _interopRequireDefault(_tileModel);\n\t\n\tvar _cellModel = __webpack_require__(17);\n\t\n\tvar _cellModel2 = _interopRequireDefault(_cellModel);\n\t\n\tvar _tileView = __webpack_require__(19);\n\t\n\tvar _tileView2 = _interopRequireDefault(_tileView);\n\t\n\tvar _gridView = __webpack_require__(27);\n\t\n\tvar _gridView2 = _interopRequireDefault(_gridView);\n\t\n\tvar _gridController = __webpack_require__(28);\n\t\n\tvar _gridController2 = _interopRequireDefault(_gridController);\n\t\n\tvar _serviceLocator = __webpack_require__(5);\n\t\n\tvar _serviceLocator2 = _interopRequireDefault(_serviceLocator);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar M3Scene = function (_Scene) {\n\t  _inherits(M3Scene, _Scene);\n\t\n\t  function M3Scene(game) {\n\t    _classCallCheck(this, M3Scene);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(M3Scene).call(this, game));\n\t\n\t    _this.setupModels();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(M3Scene, [{\n\t    key: 'setupModels',\n\t    value: function setupModels() {\n\t      var _this2 = this;\n\t\n\t      var gridModel = new _gridModel2.default(10, 6, 1);\n\t      var gridView = new _gridView2.default(gridModel);\n\t      var gridController = new _gridController2.default(gridModel, gridView);\n\t      gridModel.randomize();\n\t      _tileView2.default.loadTextures().then(function (textures) {\n\t        _tileView2.default.createMaterials(textures);\n\t        gridView.createTileViews();\n\t        _this2._game._engine.resize();\n\t      }.bind(this));\n\t      this.add(gridView);\n\t      document.addEventListener('keydown', function (event) {\n\t        console.log(gridModel.toString());\n\t      });\n\t    }\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      _get(Object.getPrototypeOf(M3Scene.prototype), 'update', this).call(this);\n\t    }\n\t  }]);\n\t\n\t  return M3Scene;\n\t}(_scene2.default);\n\t\n\texports.default = M3Scene;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _three = __webpack_require__(4);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Scene = function (_THREE$Scene) {\n\t  _inherits(Scene, _THREE$Scene);\n\t\n\t  function Scene(game) {\n\t    _classCallCheck(this, Scene);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Scene).call(this));\n\t\n\t    _this._game = game;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Scene, [{\n\t    key: 'resize',\n\t    value: function resize() {\n\t      var width = arguments.length <= 0 || arguments[0] === undefined ? this._game.renderer.domElement.width : arguments[0];\n\t      var height = arguments.length <= 1 || arguments[1] === undefined ? this._game.renderer.domElement.height : arguments[1];\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        for (var _iterator = this.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          var child = _step.value;\n\t\n\t          if ('resize' in child) {\n\t            child.resize(width, height);\n\t          }\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      var _iteratorNormalCompletion2 = true;\n\t      var _didIteratorError2 = false;\n\t      var _iteratorError2 = undefined;\n\t\n\t      try {\n\t        for (var _iterator2 = this.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t          var child = _step2.value;\n\t\n\t          if ('update' in child) {\n\t            child.update();\n\t          }\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError2 = true;\n\t        _iteratorError2 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t            _iterator2.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError2) {\n\t            throw _iteratorError2;\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'game',\n\t    get: function get() {\n\t      return this._game;\n\t    }\n\t  }]);\n\t\n\t  return Scene;\n\t}(_three2.default.Scene);\n\t\n\texports.default = Scene;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Model = function () {\n\t  function Model() {\n\t    _classCallCheck(this, Model);\n\t\n\t    this._onUpdated = null;\n\t  }\n\t\n\t  _createClass(Model, [{\n\t    key: \"update\",\n\t    value: function update() {\n\t      if (this._onUpdated) {\n\t        this._onUpdated();\n\t      }\n\t    }\n\t  }, {\n\t    key: \"onUpdated\",\n\t    set: function set(value) {\n\t      this._onUpdated = value;\n\t    },\n\t    get: function get() {\n\t      return this._onUpdated;\n\t    }\n\t  }]);\n\t\n\t  return Model;\n\t}();\n\t\n\texports.default = Model;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _model = __webpack_require__(15);\n\t\n\tvar _model2 = _interopRequireDefault(_model);\n\t\n\tvar _cellModel = __webpack_require__(17);\n\t\n\tvar _cellModel2 = _interopRequireDefault(_cellModel);\n\t\n\tvar _tileModel = __webpack_require__(18);\n\t\n\tvar _tileModel2 = _interopRequireDefault(_tileModel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar GridModel = function (_Model) {\n\t  _inherits(GridModel, _Model);\n\t\n\t  function GridModel(width, height, seed) {\n\t    _classCallCheck(this, GridModel);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GridModel).call(this));\n\t\n\t    _this._width = width;\n\t    _this._height = height;\n\t    _this._seed = seed;\n\t    _this._vector = [];\n\t    _this._vector.length = _this._width * _this._height;\n\t\n\t    _this._simulating = false;\n\t    _this._tilesFalling = 0;\n\t\n\t    _this._swappedCell1 = null;\n\t    _this._swappedCell2 = null;\n\t\n\t    _this._onTileMoved = null;\n\t    _this._onTileAdded = null;\n\t    _this._onTileRemoved = null;\n\t\n\t    _this._onRandomized = null;\n\t    _this._onChecked = null;\n\t    _this._onSwapped = null;\n\t    _this._onSimulated = null;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(GridModel, [{\n\t    key: 'beginSimulation',\n\t    value: function beginSimulation() {\n\t      console.log(\"simulate\");\n\t      if (this._simulating) {\n\t        return;\n\t      }\n\t      this._simulating = true;\n\t      this.check();\n\t    }\n\t  }, {\n\t    key: 'check',\n\t    value: function check() {\n\t      console.log(\"check\");\n\t      var matches = this.getMatches();\n\t      if (this._onChecked) {\n\t        this._onChecked(matches);\n\t      }\n\t      if (matches.length > 0) {\n\t        this.remove(matches);\n\t      } else {\n\t        if (!this.fill()) {\n\t          this.endSimulation();\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove(matches) {\n\t      console.log(\"remove\");\n\t      for (var i = 0; i < matches.length; i++) {\n\t        var match = matches[i];\n\t        this.removeTile(match);\n\t      }\n\t      this.gravity();\n\t    }\n\t  }, {\n\t    key: 'gravity',\n\t    value: function gravity() {\n\t      console.log(\"gravity\");\n\t      var movedTile = false;\n\t      for (var i = 0; i < this._width; i++) {\n\t        var drop = 0;\n\t        var cell = this.transformIndexToCellModel(i);\n\t        while (cell.y <= this._height - 1) {\n\t          if (!this.getTileModel(cell)) {\n\t            drop++;\n\t          } else if (drop) {\n\t            this._tilesFalling++;\n\t            this.moveTile(cell, new _cellModel2.default(cell.x, cell.y - drop), this.onTileFallen.bind(this));\n\t            movedTile = true;\n\t          }\n\t          cell.y++;\n\t        }\n\t      }\n\t      if (!movedTile) {\n\t        if (!this.fill()) {\n\t          this.check();\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'onTileFallen',\n\t    value: function onTileFallen() {\n\t      this._tilesFalling--;\n\t      if (this._tilesFalling === 0) {\n\t        if (!this.fill()) {\n\t          this.check();\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'fill',\n\t    value: function fill() {\n\t      console.log(\"fill\");\n\t      var filled = false;\n\t      for (var i = this._width * this._height - this._width * 2; i < this._width * this._height - this._width; i++) {\n\t        var cell = this.transformIndexToCellModel(i);\n\t        if (!this.getTileModel(cell)) {\n\t          this.addTile(this.createRandomTileModel(new _cellModel2.default(cell.x, cell.y + 1)));\n\t          filled = true;\n\t        }\n\t      }\n\t      if (filled) {\n\t        this.gravity();\n\t      }\n\t      return filled;\n\t    }\n\t  }, {\n\t    key: 'endSimulation',\n\t    value: function endSimulation() {\n\t      console.log(\"simulated\");\n\t      if (this._onSimulated) {\n\t        this._onSimulated();\n\t      }\n\t      this._simulating = false;\n\t    }\n\t  }, {\n\t    key: 'swapCells',\n\t    value: function swapCells(cell1, cell2) {\n\t\n\t      var tile1 = this.getTileModel(cell1);\n\t      var tile2 = this.getTileModel(cell2);\n\t\n\t      if (!tile1 || !tile2 || this._simulating) {\n\t        return false;\n\t      }\n\t\n\t      // After first swap remove matches.\n\t      this._swappedCell1 = tile1.cell;\n\t      this._swappedCell2 = tile2.cell;\n\t      this.swapTiles(tile1, tile2);\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'swapTiles',\n\t    value: function swapTiles(tile1, tile2) {\n\t      tile1.swap(tile2, this.onSwapped.bind(this));\n\t      this.setTileModel(tile1.cell, tile1);\n\t      this.setTileModel(tile2.cell, tile2);\n\t    }\n\t  }, {\n\t    key: 'onSwapped',\n\t    value: function onSwapped(tile1, tile2) {\n\t      var _this2 = this;\n\t\n\t      if (!tile1.cell.equals(this._swappedCell1) && !tile2.cell.equals(this._swappedCell2)) {\n\t        this._onChecked = function (matches) {\n\t          if (!matches) {\n\t            _this2.swapTiles(tile1, tile2);\n\t          } else {\n\t            if (_this2._onSwapped) {\n\t              _this2._onSwapped();\n\t            }\n\t          }\n\t          _this2._onChecked = null;\n\t        }.bind(this);\n\t        this.beginSimulation();\n\t      } else {\n\t        if (this._onSwapped) {\n\t          this._onSwapped();\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'moveTile',\n\t    value: function moveTile(fromCell, toCell, onMoved) {\n\t      var movingTile = this.getTileModel(fromCell);\n\t      if (movingTile) {\n\t        this.removeTile(toCell);\n\t        this.setTileModel(toCell, movingTile);\n\t        movingTile.move(toCell, onMoved);\n\t        this.setTileModel(fromCell, null);\n\t        if (this._onTileMoved) {\n\t          this._onTileMoved(fromCell, toCell);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'addTile',\n\t    value: function addTile(tileModel) {\n\t      if (tileModel) {\n\t        this.setTileModel(tileModel.cell, tileModel);\n\t        if (this._onTileAdded) {\n\t          this._onTileAdded(tileModel);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'removeTile',\n\t    value: function removeTile(fromCell) {\n\t      var removedModel = this.getTileModel(fromCell);\n\t      if (removedModel) {\n\t        removedModel.onRemoved();\n\t        this.setTileModel(fromCell, null);\n\t        if (this._onTileRemoved) {\n\t          this._onTileRemoved(removedModel);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'setTileModel',\n\t    value: function setTileModel(p, v) {\n\t      var i = this.transformCellModelToIndex(p);\n\t      if (i < 0 && i > this._vector.length - 1) {\n\t        return false;\n\t      }\n\t      this._vector[i] = v;\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'getTileModel',\n\t    value: function getTileModel(p) {\n\t      var i = this.transformCellModelToIndex(p);\n\t      if (!(i in this._vector)) {\n\t        return null;\n\t      }\n\t      return this._vector[i];\n\t    }\n\t  }, {\n\t    key: 'randomize',\n\t    value: function randomize(seed) {\n\t      for (var i = 0; i < this._vector.length - this._width; i++) {\n\t        var currentCell;\n\t        do {\n\t          currentCell = this.transformIndexToCellModel(i);\n\t          this._vector[i] = this.createRandomTileModel(currentCell);\n\t        } while (this.getVerticalMatches(currentCell).length > 2 || this.getHorizontalMatches(currentCell).length > 2);\n\t      }\n\t      if (this._onRandomized) {\n\t        this._onRandomized();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'random',\n\t    value: function random() {\n\t      var max = 1;\n\t      var min = 0;\n\t      this._seed = (this._seed * 9301 + 49297) % 233280;\n\t      var rnd = this._seed / 233280;\n\t      return min + rnd * (max - min);\n\t    }\n\t  }, {\n\t    key: 'createRandomTileModel',\n\t    value: function createRandomTileModel(cell) {\n\t      return new _tileModel2.default(this.randomTileValue(0, 4), cell, this);\n\t    }\n\t  }, {\n\t    key: 'randomTileValue',\n\t    value: function randomTileValue(min, max) {\n\t      return Math.floor(this.random() * (1 + max - min)) + min;\n\t    }\n\t  }, {\n\t    key: 'transformIndexToCellModel',\n\t    value: function transformIndexToCellModel(i) {\n\t      if (i < 0 || i > this._vector.length - 1) {\n\t        return null;\n\t      }\n\t      return new _cellModel2.default(i % this._width, Math.floor(i / this._width));\n\t    }\n\t  }, {\n\t    key: 'transformCellModelToIndex',\n\t    value: function transformCellModelToIndex(tile) {\n\t      if (!tile || tile.x < 0 || tile.x > this._width - 1 || tile.y < 0 || tile.y > this._height - 1) {\n\t        return -1;\n\t      }\n\t      return tile.x + tile.y * this._width;\n\t    }\n\t  }, {\n\t    key: 'unique',\n\t    value: function unique(cells) {\n\t      var unique = cells.concat();\n\t      for (var i = 0; i < unique.length; ++i) {\n\t        for (var j = i + 1; j < unique.length; ++j) {\n\t          if (unique[i].equals(unique[j])) {\n\t            unique.splice(j--, 1);\n\t          }\n\t        }\n\t      }\n\t      return unique;\n\t    }\n\t  }, {\n\t    key: 'getMatches',\n\t    value: function getMatches() {\n\t      var matches = [];\n\t      for (var i = 0; i < this._vector.length; ++i) {\n\t        var cursorCellModel = this.transformIndexToCellModel(i);\n\t        var horizontalMatches = this.getHorizontalMatches(cursorCellModel);\n\t        if (horizontalMatches.length > 2) {\n\t          matches = matches.concat(horizontalMatches);\n\t        }\n\t        var verticalMatches = this.getVerticalMatches(cursorCellModel);\n\t        if (verticalMatches.length > 2) {\n\t          matches = matches.concat(verticalMatches);\n\t        }\n\t      }\n\t      return this.unique(matches);\n\t    }\n\t  }, {\n\t    key: 'getVerticalMatches',\n\t    value: function getVerticalMatches(originCellModel) {\n\t      var matches = [];\n\t      var originTileModel = this.getTileModel(originCellModel);\n\t      if (!originTileModel) {\n\t        return matches;\n\t      }\n\t      matches.push(originCellModel);\n\t      var cursorCellModel = originCellModel.copy();\n\t      cursorCellModel.y--;\n\t      while (GridModel.tilesMatch(originTileModel, this.getTileModel(cursorCellModel))) {\n\t        matches.push(new _cellModel2.default(cursorCellModel.x, cursorCellModel.y));\n\t        cursorCellModel.y--;\n\t      }\n\t      cursorCellModel.y = originCellModel.y + 1;\n\t      while (GridModel.tilesMatch(originTileModel, this.getTileModel(cursorCellModel))) {\n\t        matches.push(new _cellModel2.default(cursorCellModel.x, cursorCellModel.y));\n\t        cursorCellModel.y++;\n\t      }\n\t      return matches;\n\t    }\n\t  }, {\n\t    key: 'getHorizontalMatches',\n\t    value: function getHorizontalMatches(originCellModel) {\n\t      var matches = [];\n\t      var originTileModel = this.getTileModel(originCellModel);\n\t      if (!originTileModel) {\n\t        return matches;\n\t      }\n\t      matches.push(originCellModel);\n\t      var cursorCellModel = originCellModel.copy();\n\t      cursorCellModel.x--;\n\t      while (GridModel.tilesMatch(originTileModel, this.getTileModel(cursorCellModel))) {\n\t        matches.push(new _cellModel2.default(cursorCellModel.x, cursorCellModel.y));\n\t        cursorCellModel.x--;\n\t      }\n\t      cursorCellModel.x = originCellModel.x + 1;\n\t      while (GridModel.tilesMatch(originTileModel, this.getTileModel(cursorCellModel))) {\n\t        matches.push(new _cellModel2.default(cursorCellModel.x, cursorCellModel.y));\n\t        cursorCellModel.x++;\n\t      }\n\t      return matches;\n\t    }\n\t  }, {\n\t    key: 'toString',\n\t    value: function toString() {\n\t      var string = \"\";\n\t      for (var y = this._height - 1; y >= 0; y--) {\n\t        for (var x = 0; x < this._width; x++) {\n\t          var cellModel = new _cellModel2.default(x, y);\n\t          var tileModel = this.getTileModel(cellModel);\n\t          string += tileModel ? tileModel.value : 'X'; //+ cellModel.toString() + '[' + this._vector.indexOf(tileModel) + ']';\n\t          if (x === this._width - 1) {\n\t            string += \"\\n\";\n\t          }\n\t        }\n\t      }\n\t      return string;\n\t    }\n\t  }, {\n\t    key: 'onRandomized',\n\t    set: function set(value) {\n\t      this._onRandomized = value;\n\t    },\n\t    get: function get() {\n\t      return this._onRandomized;\n\t    }\n\t  }, {\n\t    key: 'size',\n\t    get: function get() {\n\t      return this._vector.length;\n\t    }\n\t  }, {\n\t    key: 'width',\n\t    get: function get() {\n\t      return this._width;\n\t    }\n\t  }, {\n\t    key: 'height',\n\t    get: function get() {\n\t      return this._height;\n\t    }\n\t  }, {\n\t    key: 'onTileAdded',\n\t    get: function get() {\n\t      return this._onTileAdded;\n\t    },\n\t    set: function set(value) {\n\t      return this._onTileAdded = value;\n\t    }\n\t  }], [{\n\t    key: 'tilesMatch',\n\t    value: function tilesMatch(tileModel1, tileModel2) {\n\t      if (!tileModel1 || !tileModel2) {\n\t        return false;\n\t      }\n\t      return tileModel1.value === tileModel2.value;\n\t    }\n\t  }]);\n\t\n\t  return GridModel;\n\t}(_model2.default);\n\t\n\texports.default = GridModel;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _model = __webpack_require__(15);\n\t\n\tvar _model2 = _interopRequireDefault(_model);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar CellModel = function (_Model) {\n\t  _inherits(CellModel, _Model);\n\t\n\t  function CellModel(x, y) {\n\t    _classCallCheck(this, CellModel);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CellModel).call(this));\n\t\n\t    _this._x = x;\n\t    _this._y = y;\n\t    _this.update();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(CellModel, [{\n\t    key: 'distance',\n\t    value: function distance(cell) {\n\t      return Math.sqrt(Math.pow(cell.x - this._x, 2) + Math.pow(cell.y - this._y, 2));\n\t    }\n\t  }, {\n\t    key: 'equals',\n\t    value: function equals(cell) {\n\t      return this._x === cell.x && this._y === cell.y;\n\t    }\n\t  }, {\n\t    key: 'difference',\n\t    value: function difference(cell) {\n\t      return new CellModel(this._x - cell.x, this._y - cell.y);\n\t    }\n\t  }, {\n\t    key: 'copy',\n\t    value: function copy() {\n\t      return new CellModel(this._x, this._y);\n\t    }\n\t  }, {\n\t    key: 'toString',\n\t    value: function toString() {\n\t      return '(' + this._x + ',' + this._y + ')';\n\t    }\n\t  }, {\n\t    key: 'x',\n\t    get: function get() {\n\t      return this._x;\n\t    },\n\t    set: function set(value) {\n\t      this._x = value;\n\t      this.update();\n\t    }\n\t  }, {\n\t    key: 'y',\n\t    get: function get() {\n\t      return this._y;\n\t    },\n\t    set: function set(value) {\n\t      this._y = value;\n\t      this.update();\n\t    }\n\t  }]);\n\t\n\t  return CellModel;\n\t}(_model2.default);\n\t\n\texports.default = CellModel;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _model = __webpack_require__(15);\n\t\n\tvar _model2 = _interopRequireDefault(_model);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar TileModel = function (_Model) {\n\t  _inherits(TileModel, _Model);\n\t\n\t  function TileModel(value, cell, gridModel) {\n\t    _classCallCheck(this, TileModel);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TileModel).call(this));\n\t\n\t    _this._value = value;\n\t    _this._cell = cell;\n\t    _this._gridModel = gridModel;\n\t\n\t    _this._highlight = false;\n\t    _this._onMoved = null;\n\t    _this._onRemoved = null;\n\t    _this._onSwapped = null;\n\t    _this._swapTile = null;\n\t    _this._swapMovements = 0;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(TileModel, [{\n\t    key: 'swap',\n\t    value: function swap(tile, onSwapped) {\n\t      if (onSwapped) {\n\t        this._onSwapped = onSwapped;\n\t      }\n\t      this._swapTile = tile;\n\t      var cell = this._cell;\n\t      this.move(this._swapTile.cell, this.onSwapMovement.bind(this));\n\t      this._swapTile.move(cell, this.onSwapMovement.bind(this));\n\t    }\n\t  }, {\n\t    key: 'onSwapMovement',\n\t    value: function onSwapMovement() {\n\t      this._swapMovements++;\n\t      if (this._swapMovements == 2) {\n\t        this._swapMovements = 0;\n\t        if (this._onSwapped) {\n\t          this._onSwapped(this, this._swapTile);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'move',\n\t    value: function move(cell, onMovedCallback) {\n\t      var time = Math.sqrt(2 * this._cell.distance(cell) / 64) * 1000;\n\t      this._cell = cell;\n\t      if (this._onMoved) {\n\t        this._onMoved(this._cell, time, onMovedCallback);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'value',\n\t    get: function get() {\n\t      return this._value;\n\t    }\n\t  }, {\n\t    key: 'cell',\n\t    get: function get() {\n\t      return this._cell;\n\t    }\n\t  }, {\n\t    key: 'onRemoved',\n\t    get: function get() {\n\t      return this._onRemoved;\n\t    }\n\t  }, {\n\t    key: 'onMoved',\n\t    get: function get() {\n\t      return this._onMoved;\n\t    }\n\t  }, {\n\t    key: 'highlight',\n\t    get: function get() {\n\t      return this._highlight;\n\t    },\n\t    set: function set(value) {\n\t      this._highlight = value;\n\t      this.update();\n\t    }\n\t  }, {\n\t    key: 'gridModel',\n\t    get: function get() {\n\t      return this._gridModel;\n\t    }\n\t  }]);\n\t\n\t  return TileModel;\n\t}(_model2.default);\n\t\n\texports.default = TileModel;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _three = __webpack_require__(4);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _tween = __webpack_require__(20);\n\t\n\tvar _tween2 = _interopRequireDefault(_tween);\n\t\n\tvar _view = __webpack_require__(21);\n\t\n\tvar _view2 = _interopRequireDefault(_view);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar TileView = function (_View) {\n\t  _inherits(TileView, _View);\n\t\n\t  function TileView(model) {\n\t    _classCallCheck(this, TileView);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TileView).call(this, model));\n\t\n\t    if (!TileView.MATERIALS.length) {\n\t      throw new Error('Missing materials please create them with `TileView.createMaterials(textures)`.');\n\t    }\n\t    if (model.value > TileView.MATERIALS.length - 1) {\n\t      throw new Error('No material exists for tile value `' + model.value + '`.');\n\t    }\n\t    _this._plane = new _three2.default.Mesh(TileView.GEOMETRY, TileView.MATERIALS[_this._model.value]);\n\t    _this._plane.position.x = TileView.GEOMETRY.parameters.width / 2;\n\t    _this._plane.position.y = TileView.GEOMETRY.parameters.height / 2;\n\t\n\t    _this._tweenQueue = [];\n\t    _this._callbackQueue = [];\n\t\n\t    _this._model._onMoved = _this.onMoved.bind(_this);\n\t    _this._model._onRemoved = _this.onRemoved.bind(_this);\n\t\n\t    _this._highlight = false;\n\t\n\t    _this._outlineMaterial = new _three2.default.MeshBasicMaterial({ color: 0xffffff, side: _three2.default.FrontSide });\n\t    _this._outline = new _three2.default.Mesh(TileView.GEOMETRY, _this._outlineMaterial);\n\t    _this._outline.position.x = TileView.GEOMETRY.parameters.width / 2;\n\t    _this._outline.position.y = TileView.GEOMETRY.parameters.height / 2;\n\t    _this._outline.visible = false;\n\t\n\t    _this.add(_this._outline);\n\t    _this.add(_this._plane);\n\t\n\t    // this._sprite.scale.set(\n\t    //   this._sprite.material.map.image.width,\n\t    //   this._sprite.material.map.image.height,\n\t    //   1\n\t    // );\n\t    //\n\t    // this._sprite.position.set(\n\t    //   this._model.cell.x * this._sprite.scale.x,\n\t    //   this._model.cell.y * this._sprite.scale.y,\n\t    //   1\n\t    // );\n\t    return _this;\n\t  }\n\t\n\t  _createClass(TileView, [{\n\t    key: 'onMoved',\n\t    value: function onMoved(cell, time, onFinished) {\n\t      var size = this.size;\n\t      var tween = new _tween2.default.Tween(this.position).to({ x: cell.x * this.width, y: cell.y * this.height }, time);\n\t      tween.onComplete(this.onTweened.bind(this));\n\t      tween.easing(_tween2.default.Easing.Quadratic.InOut);\n\t\n\t      if (this._tweenQueue.length > 0) {\n\t        this._tweenQueue[this._tweenQueue.length - 1].nextTween = tween;\n\t      } else {\n\t        tween.start();\n\t      }\n\t\n\t      this._tweenQueue.push(tween);\n\t      this._callbackQueue.push(onFinished);\n\t    }\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      // this._plane.rotation.x += Math.random() * .05;\n\t      // let time    = new Date(Date.now()).getMilliseconds() / 1000;\n\t      // let circle  = Math.PI * 2 * time;\n\t      // let offsetX = this.model.cell.x / this.model.gridModel.width * Math.PI * 1;\n\t      // let offsetY = this.model.cell.y / this.model.gridModel.height * Math.PI * 1;\n\t      // this._plane.rotation.y = circle + offsetX + offsetY;\n\t    }\n\t  }, {\n\t    key: 'onRemoved',\n\t    value: function onRemoved() {\n\t      this.parent.remove(this);\n\t    }\n\t  }, {\n\t    key: 'onTweened',\n\t    value: function onTweened() {\n\t      this._tweenQueue.splice(0, 1);\n\t      var onFinished = this._callbackQueue[0];\n\t      if (onFinished) {\n\t        onFinished();\n\t      }\n\t      this._callbackQueue.splice(0, 1);\n\t    }\n\t  }, {\n\t    key: 'onUpdated',\n\t    value: function onUpdated() {\n\t      _get(Object.getPrototypeOf(TileView.prototype), 'onUpdated', this).call(this);\n\t      // TODO: Highlight here relative to this._model.highlight\n\t    }\n\t  }, {\n\t    key: 'highlight',\n\t    set: function set(value) {\n\t      this._outline.visible = value;\n\t    },\n\t    get: function get() {\n\t      return this._outline.visible;\n\t    }\n\t  }, {\n\t    key: 'wireframe',\n\t    get: function get() {\n\t      return this._material.wireframe;\n\t    },\n\t    set: function set(value) {\n\t      this._material.wireframe = value;\n\t    }\n\t  }, {\n\t    key: 'moving',\n\t    get: function get() {\n\t      return this._tweenQueue.length > 0;\n\t    }\n\t  }, {\n\t    key: 'model',\n\t    get: function get() {\n\t      return this._model;\n\t    }\n\t  }, {\n\t    key: 'sprite',\n\t    get: function get() {\n\t      return this._sprite;\n\t    }\n\t  }, {\n\t    key: 'width',\n\t    get: function get() {\n\t      return this._plane.geometry.parameters.width;\n\t    }\n\t  }, {\n\t    key: 'height',\n\t    get: function get() {\n\t      return this._plane.geometry.parameters.height;\n\t    }\n\t  }], [{\n\t    key: 'loadTextures',\n\t    value: function loadTextures() {\n\t      var loader = new _three2.default.TextureLoader();\n\t      var textures = [];\n\t      return new Promise(function (resolve, reject) {\n\t        function onLoad(texture) {\n\t          textures.push(texture);\n\t          if (textures.length === Object.keys(TileView.IMAGES).length) {\n\t            resolve(textures);\n\t          }\n\t        }\n\t        function onProgress(event) {\n\t          console.debug((event.loaded / event.total * 100).toFixed() + '% ' + event.currentTarget.responseURL);\n\t        }\n\t        for (var key in TileView.IMAGES) {\n\t          var url = TileView.IMAGES[key];\n\t          loader.load(url, onLoad, onProgress, reject);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'createOutline',\n\t    value: function createOutline() {\n\t      var outlineMaterial = new _three2.default.MeshBasicMaterial({ color: 0xffffff, side: _three2.default.BackSide });\n\t      var outlineMesh = new _three2.default.Mesh(TileView.GEOMETRY, outlineMaterial);\n\t      outlineMesh.scale.multiplyScale(1.05);\n\t      this.add(outlineMesh);\n\t    }\n\t  }, {\n\t    key: 'createMaterials',\n\t    value: function createMaterials(textures) {\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        for (var _iterator = textures[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          var texture = _step.value;\n\t\n\t          TileView.MATERIALS.push(new _three2.default.MeshBasicMaterial({\n\t            map: texture,\n\t            side: _three2.default.DoubleSide,\n\t            transparent: true,\n\t            depthWrite: false,\n\t            depthTest: false\n\t          }));\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return TileView;\n\t}(_view2.default);\n\t\n\texports.default = TileView;\n\t\n\tTileView.GEOMETRY = new _three2.default.PlaneGeometry(48, 46);\n\tTileView.MATERIALS = [];\n\tTileView.IMAGES = {\n\t  tile_blue: __webpack_require__(22),\n\t  tile_green: __webpack_require__(23),\n\t  tile_purple: __webpack_require__(24),\n\t  tile_red: __webpack_require__(25),\n\t  tile_yellow: __webpack_require__(26)\n\t};\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * Tween.js - Licensed under the MIT license\n\t * https://github.com/tweenjs/tween.js\n\t * ----------------------------------------------\n\t *\n\t * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n\t * Thank you all, you're awesome!\n\t */\n\t\n\t// Include a performance.now polyfill\n\t(function () {\n\t\n\t\tif ('performance' in window === false) {\n\t\t\twindow.performance = {};\n\t\t}\n\t\n\t\t// IE 8\n\t\tDate.now = (Date.now || function () {\n\t\t\treturn new Date().getTime();\n\t\t});\n\t\n\t\tif ('now' in window.performance === false) {\n\t\t\tvar offset = window.performance.timing && window.performance.timing.navigationStart ? window.performance.timing.navigationStart\n\t\t\t                                                                                    : Date.now();\n\t\n\t\t\twindow.performance.now = function () {\n\t\t\t\treturn Date.now() - offset;\n\t\t\t};\n\t\t}\n\t\n\t})();\n\t\n\tvar TWEEN = TWEEN || (function () {\n\t\n\t\tvar _tweens = [];\n\t\n\t\treturn {\n\t\n\t\t\tgetAll: function () {\n\t\n\t\t\t\treturn _tweens;\n\t\n\t\t\t},\n\t\n\t\t\tremoveAll: function () {\n\t\n\t\t\t\t_tweens = [];\n\t\n\t\t\t},\n\t\n\t\t\tadd: function (tween) {\n\t\n\t\t\t\t_tweens.push(tween);\n\t\n\t\t\t},\n\t\n\t\t\tremove: function (tween) {\n\t\n\t\t\t\tvar i = _tweens.indexOf(tween);\n\t\n\t\t\t\tif (i !== -1) {\n\t\t\t\t\t_tweens.splice(i, 1);\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tupdate: function (time) {\n\t\n\t\t\t\tif (_tweens.length === 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\tvar i = 0;\n\t\n\t\t\t\ttime = time !== undefined ? time : window.performance.now();\n\t\n\t\t\t\twhile (i < _tweens.length) {\n\t\n\t\t\t\t\tif (_tweens[i].update(time)) {\n\t\t\t\t\t\ti++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_tweens.splice(i, 1);\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t\treturn true;\n\t\n\t\t\t}\n\t\t};\n\t\n\t})();\n\t\n\tTWEEN.Tween = function (object) {\n\t\n\t\tvar _object = object;\n\t\tvar _valuesStart = {};\n\t\tvar _valuesEnd = {};\n\t\tvar _valuesStartRepeat = {};\n\t\tvar _duration = 1000;\n\t\tvar _repeat = 0;\n\t\tvar _yoyo = false;\n\t\tvar _isPlaying = false;\n\t\tvar _reversed = false;\n\t\tvar _delayTime = 0;\n\t\tvar _startTime = null;\n\t\tvar _easingFunction = TWEEN.Easing.Linear.None;\n\t\tvar _interpolationFunction = TWEEN.Interpolation.Linear;\n\t\tvar _chainedTweens = [];\n\t\tvar _onStartCallback = null;\n\t\tvar _onStartCallbackFired = false;\n\t\tvar _onUpdateCallback = null;\n\t\tvar _onCompleteCallback = null;\n\t\tvar _onStopCallback = null;\n\t\n\t\t// Set all starting values present on the target object\n\t\tfor (var field in object) {\n\t\t\t_valuesStart[field] = parseFloat(object[field], 10);\n\t\t}\n\t\n\t\tthis.to = function (properties, duration) {\n\t\n\t\t\tif (duration !== undefined) {\n\t\t\t\t_duration = duration;\n\t\t\t}\n\t\n\t\t\t_valuesEnd = properties;\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\tthis.start = function (time) {\n\t\n\t\t\tTWEEN.add(this);\n\t\n\t\t\t_isPlaying = true;\n\t\n\t\t\t_onStartCallbackFired = false;\n\t\n\t\t\t_startTime = time !== undefined ? time : window.performance.now();\n\t\t\t_startTime += _delayTime;\n\t\n\t\t\tfor (var property in _valuesEnd) {\n\t\n\t\t\t\t// Check if an Array was provided as property value\n\t\t\t\tif (_valuesEnd[property] instanceof Array) {\n\t\n\t\t\t\t\tif (_valuesEnd[property].length === 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Create a local copy of the Array with the start value at the front\n\t\t\t\t\t_valuesEnd[property] = [_object[property]].concat(_valuesEnd[property]);\n\t\n\t\t\t\t}\n\t\n\t\t\t\t// If `to()` specifies a property that doesn't exist in the source object,\n\t\t\t\t// we should not set that property in the object\n\t\t\t\tif (_valuesStart[property] === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\n\t\t\t\t_valuesStart[property] = _object[property];\n\t\n\t\t\t\tif ((_valuesStart[property] instanceof Array) === false) {\n\t\t\t\t\t_valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n\t\t\t\t}\n\t\n\t\t\t\t_valuesStartRepeat[property] = _valuesStart[property] || 0;\n\t\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\tthis.stop = function () {\n\t\n\t\t\tif (!_isPlaying) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\n\t\t\tTWEEN.remove(this);\n\t\t\t_isPlaying = false;\n\t\n\t\t\tif (_onStopCallback !== null) {\n\t\t\t\t_onStopCallback.call(_object);\n\t\t\t}\n\t\n\t\t\tthis.stopChainedTweens();\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\tthis.stopChainedTweens = function () {\n\t\n\t\t\tfor (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t\t_chainedTweens[i].stop();\n\t\t\t}\n\t\n\t\t};\n\t\n\t\tthis.delay = function (amount) {\n\t\n\t\t\t_delayTime = amount;\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\tthis.repeat = function (times) {\n\t\n\t\t\t_repeat = times;\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\tthis.yoyo = function (yoyo) {\n\t\n\t\t\t_yoyo = yoyo;\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\n\t\tthis.easing = function (easing) {\n\t\n\t\t\t_easingFunction = easing;\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\tthis.interpolation = function (interpolation) {\n\t\n\t\t\t_interpolationFunction = interpolation;\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\tthis.chain = function () {\n\t\n\t\t\t_chainedTweens = arguments;\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\tthis.onStart = function (callback) {\n\t\n\t\t\t_onStartCallback = callback;\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\tthis.onUpdate = function (callback) {\n\t\n\t\t\t_onUpdateCallback = callback;\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\tthis.onComplete = function (callback) {\n\t\n\t\t\t_onCompleteCallback = callback;\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\tthis.onStop = function (callback) {\n\t\n\t\t\t_onStopCallback = callback;\n\t\t\treturn this;\n\t\n\t\t};\n\t\n\t\tthis.update = function (time) {\n\t\n\t\t\tvar property;\n\t\t\tvar elapsed;\n\t\t\tvar value;\n\t\n\t\t\tif (time < _startTime) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\tif (_onStartCallbackFired === false) {\n\t\n\t\t\t\tif (_onStartCallback !== null) {\n\t\t\t\t\t_onStartCallback.call(_object);\n\t\t\t\t}\n\t\n\t\t\t\t_onStartCallbackFired = true;\n\t\n\t\t\t}\n\t\n\t\t\telapsed = (time - _startTime) / _duration;\n\t\t\telapsed = elapsed > 1 ? 1 : elapsed;\n\t\n\t\t\tvalue = _easingFunction(elapsed);\n\t\n\t\t\tfor (property in _valuesEnd) {\n\t\n\t\t\t\t// Don't update properties that do not exist in the source object\n\t\t\t\tif (_valuesStart[property] === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\n\t\t\t\tvar start = _valuesStart[property] || 0;\n\t\t\t\tvar end = _valuesEnd[property];\n\t\n\t\t\t\tif (end instanceof Array) {\n\t\n\t\t\t\t\t_object[property] = _interpolationFunction(end, value);\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\t// Parses relative end values with start as base (e.g.: +10, -3)\n\t\t\t\t\tif (typeof (end) === 'string') {\n\t\n\t\t\t\t\t\tif (end.startsWith('+') || end.startsWith('-')) {\n\t\t\t\t\t\t\tend = start + parseFloat(end, 10);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tend = parseFloat(end, 10);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Protect against non numeric properties.\n\t\t\t\t\tif (typeof (end) === 'number') {\n\t\t\t\t\t\t_object[property] = start + (end - start) * value;\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\tif (_onUpdateCallback !== null) {\n\t\t\t\t_onUpdateCallback.call(_object, value);\n\t\t\t}\n\t\n\t\t\tif (elapsed === 1) {\n\t\n\t\t\t\tif (_repeat > 0) {\n\t\n\t\t\t\t\tif (isFinite(_repeat)) {\n\t\t\t\t\t\t_repeat--;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Reassign starting values, restart by making startTime = now\n\t\t\t\t\tfor (property in _valuesStartRepeat) {\n\t\n\t\t\t\t\t\tif (typeof (_valuesEnd[property]) === 'string') {\n\t\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property], 10);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (_yoyo) {\n\t\t\t\t\t\t\tvar tmp = _valuesStartRepeat[property];\n\t\n\t\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesEnd[property];\n\t\t\t\t\t\t\t_valuesEnd[property] = tmp;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t_valuesStart[property] = _valuesStartRepeat[property];\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (_yoyo) {\n\t\t\t\t\t\t_reversed = !_reversed;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t_startTime = time + _delayTime;\n\t\n\t\t\t\t\treturn true;\n\t\n\t\t\t\t} else {\n\t\n\t\t\t\t\tif (_onCompleteCallback !== null) {\n\t\t\t\t\t\t_onCompleteCallback.call(_object);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t\t\t\t// Make the chained tweens start exactly at the time they should,\n\t\t\t\t\t\t// even if the `update()` method was called way past the duration of the tween\n\t\t\t\t\t\t_chainedTweens[i].start(_startTime + _duration);\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn false;\n\t\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\n\t\t};\n\t\n\t};\n\t\n\t\n\tTWEEN.Easing = {\n\t\n\t\tLinear: {\n\t\n\t\t\tNone: function (k) {\n\t\n\t\t\t\treturn k;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tQuadratic: {\n\t\n\t\t\tIn: function (k) {\n\t\n\t\t\t\treturn k * k;\n\t\n\t\t\t},\n\t\n\t\t\tOut: function (k) {\n\t\n\t\t\t\treturn k * (2 - k);\n\t\n\t\t\t},\n\t\n\t\t\tInOut: function (k) {\n\t\n\t\t\t\tif ((k *= 2) < 1) {\n\t\t\t\t\treturn 0.5 * k * k;\n\t\t\t\t}\n\t\n\t\t\t\treturn - 0.5 * (--k * (k - 2) - 1);\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tCubic: {\n\t\n\t\t\tIn: function (k) {\n\t\n\t\t\t\treturn k * k * k;\n\t\n\t\t\t},\n\t\n\t\t\tOut: function (k) {\n\t\n\t\t\t\treturn --k * k * k + 1;\n\t\n\t\t\t},\n\t\n\t\t\tInOut: function (k) {\n\t\n\t\t\t\tif ((k *= 2) < 1) {\n\t\t\t\t\treturn 0.5 * k * k * k;\n\t\t\t\t}\n\t\n\t\t\t\treturn 0.5 * ((k -= 2) * k * k + 2);\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tQuartic: {\n\t\n\t\t\tIn: function (k) {\n\t\n\t\t\t\treturn k * k * k * k;\n\t\n\t\t\t},\n\t\n\t\t\tOut: function (k) {\n\t\n\t\t\t\treturn 1 - (--k * k * k * k);\n\t\n\t\t\t},\n\t\n\t\t\tInOut: function (k) {\n\t\n\t\t\t\tif ((k *= 2) < 1) {\n\t\t\t\t\treturn 0.5 * k * k * k * k;\n\t\t\t\t}\n\t\n\t\t\t\treturn - 0.5 * ((k -= 2) * k * k * k - 2);\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tQuintic: {\n\t\n\t\t\tIn: function (k) {\n\t\n\t\t\t\treturn k * k * k * k * k;\n\t\n\t\t\t},\n\t\n\t\t\tOut: function (k) {\n\t\n\t\t\t\treturn --k * k * k * k * k + 1;\n\t\n\t\t\t},\n\t\n\t\t\tInOut: function (k) {\n\t\n\t\t\t\tif ((k *= 2) < 1) {\n\t\t\t\t\treturn 0.5 * k * k * k * k * k;\n\t\t\t\t}\n\t\n\t\t\t\treturn 0.5 * ((k -= 2) * k * k * k * k + 2);\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tSinusoidal: {\n\t\n\t\t\tIn: function (k) {\n\t\n\t\t\t\treturn 1 - Math.cos(k * Math.PI / 2);\n\t\n\t\t\t},\n\t\n\t\t\tOut: function (k) {\n\t\n\t\t\t\treturn Math.sin(k * Math.PI / 2);\n\t\n\t\t\t},\n\t\n\t\t\tInOut: function (k) {\n\t\n\t\t\t\treturn 0.5 * (1 - Math.cos(Math.PI * k));\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tExponential: {\n\t\n\t\t\tIn: function (k) {\n\t\n\t\t\t\treturn k === 0 ? 0 : Math.pow(1024, k - 1);\n\t\n\t\t\t},\n\t\n\t\t\tOut: function (k) {\n\t\n\t\t\t\treturn k === 1 ? 1 : 1 - Math.pow(2, - 10 * k);\n\t\n\t\t\t},\n\t\n\t\t\tInOut: function (k) {\n\t\n\t\t\t\tif (k === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\n\t\t\t\tif (k === 1) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\n\t\t\t\tif ((k *= 2) < 1) {\n\t\t\t\t\treturn 0.5 * Math.pow(1024, k - 1);\n\t\t\t\t}\n\t\n\t\t\t\treturn 0.5 * (- Math.pow(2, - 10 * (k - 1)) + 2);\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tCircular: {\n\t\n\t\t\tIn: function (k) {\n\t\n\t\t\t\treturn 1 - Math.sqrt(1 - k * k);\n\t\n\t\t\t},\n\t\n\t\t\tOut: function (k) {\n\t\n\t\t\t\treturn Math.sqrt(1 - (--k * k));\n\t\n\t\t\t},\n\t\n\t\t\tInOut: function (k) {\n\t\n\t\t\t\tif ((k *= 2) < 1) {\n\t\t\t\t\treturn - 0.5 * (Math.sqrt(1 - k * k) - 1);\n\t\t\t\t}\n\t\n\t\t\t\treturn 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tElastic: {\n\t\n\t\t\tIn: function (k) {\n\t\n\t\t\t\tvar s;\n\t\t\t\tvar a = 0.1;\n\t\t\t\tvar p = 0.4;\n\t\n\t\t\t\tif (k === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\n\t\t\t\tif (k === 1) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\n\t\t\t\tif (!a || a < 1) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else {\n\t\t\t\t\ts = p * Math.asin(1 / a) / (2 * Math.PI);\n\t\t\t\t}\n\t\n\t\t\t\treturn - (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\n\t\n\t\t\t},\n\t\n\t\t\tOut: function (k) {\n\t\n\t\t\t\tvar s;\n\t\t\t\tvar a = 0.1;\n\t\t\t\tvar p = 0.4;\n\t\n\t\t\t\tif (k === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\n\t\t\t\tif (k === 1) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\n\t\t\t\tif (!a || a < 1) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else {\n\t\t\t\t\ts = p * Math.asin(1 / a) / (2 * Math.PI);\n\t\t\t\t}\n\t\n\t\t\t\treturn (a * Math.pow(2, - 10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1);\n\t\n\t\t\t},\n\t\n\t\t\tInOut: function (k) {\n\t\n\t\t\t\tvar s;\n\t\t\t\tvar a = 0.1;\n\t\t\t\tvar p = 0.4;\n\t\n\t\t\t\tif (k === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\n\t\t\t\tif (k === 1) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\n\t\t\t\tif (!a || a < 1) {\n\t\t\t\t\ta = 1;\n\t\t\t\t\ts = p / 4;\n\t\t\t\t} else {\n\t\t\t\t\ts = p * Math.asin(1 / a) / (2 * Math.PI);\n\t\t\t\t}\n\t\n\t\t\t\tif ((k *= 2) < 1) {\n\t\t\t\t\treturn - 0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\n\t\t\t\t}\n\t\n\t\t\t\treturn a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tBack: {\n\t\n\t\t\tIn: function (k) {\n\t\n\t\t\t\tvar s = 1.70158;\n\t\n\t\t\t\treturn k * k * ((s + 1) * k - s);\n\t\n\t\t\t},\n\t\n\t\t\tOut: function (k) {\n\t\n\t\t\t\tvar s = 1.70158;\n\t\n\t\t\t\treturn --k * k * ((s + 1) * k + s) + 1;\n\t\n\t\t\t},\n\t\n\t\t\tInOut: function (k) {\n\t\n\t\t\t\tvar s = 1.70158 * 1.525;\n\t\n\t\t\t\tif ((k *= 2) < 1) {\n\t\t\t\t\treturn 0.5 * (k * k * ((s + 1) * k - s));\n\t\t\t\t}\n\t\n\t\t\t\treturn 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tBounce: {\n\t\n\t\t\tIn: function (k) {\n\t\n\t\t\t\treturn 1 - TWEEN.Easing.Bounce.Out(1 - k);\n\t\n\t\t\t},\n\t\n\t\t\tOut: function (k) {\n\t\n\t\t\t\tif (k < (1 / 2.75)) {\n\t\t\t\t\treturn 7.5625 * k * k;\n\t\t\t\t} else if (k < (2 / 2.75)) {\n\t\t\t\t\treturn 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\n\t\t\t\t} else if (k < (2.5 / 2.75)) {\n\t\t\t\t\treturn 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\n\t\t\t\t} else {\n\t\t\t\t\treturn 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\n\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tInOut: function (k) {\n\t\n\t\t\t\tif (k < 0.5) {\n\t\t\t\t\treturn TWEEN.Easing.Bounce.In(k * 2) * 0.5;\n\t\t\t\t}\n\t\n\t\t\t\treturn TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\tTWEEN.Interpolation = {\n\t\n\t\tLinear: function (v, k) {\n\t\n\t\t\tvar m = v.length - 1;\n\t\t\tvar f = m * k;\n\t\t\tvar i = Math.floor(f);\n\t\t\tvar fn = TWEEN.Interpolation.Utils.Linear;\n\t\n\t\t\tif (k < 0) {\n\t\t\t\treturn fn(v[0], v[1], f);\n\t\t\t}\n\t\n\t\t\tif (k > 1) {\n\t\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t\t}\n\t\n\t\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\t\n\t\t},\n\t\n\t\tBezier: function (v, k) {\n\t\n\t\t\tvar b = 0;\n\t\t\tvar n = v.length - 1;\n\t\t\tvar pw = Math.pow;\n\t\t\tvar bn = TWEEN.Interpolation.Utils.Bernstein;\n\t\n\t\t\tfor (var i = 0; i <= n; i++) {\n\t\t\t\tb += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n\t\t\t}\n\t\n\t\t\treturn b;\n\t\n\t\t},\n\t\n\t\tCatmullRom: function (v, k) {\n\t\n\t\t\tvar m = v.length - 1;\n\t\t\tvar f = m * k;\n\t\t\tvar i = Math.floor(f);\n\t\t\tvar fn = TWEEN.Interpolation.Utils.CatmullRom;\n\t\n\t\t\tif (v[0] === v[m]) {\n\t\n\t\t\t\tif (k < 0) {\n\t\t\t\t\ti = Math.floor(f = m * (1 + k));\n\t\t\t\t}\n\t\n\t\t\t\treturn fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n\t\n\t\t\t} else {\n\t\n\t\t\t\tif (k < 0) {\n\t\t\t\t\treturn v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n\t\t\t\t}\n\t\n\t\t\t\tif (k > 1) {\n\t\t\t\t\treturn v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n\t\t\t\t}\n\t\n\t\t\t\treturn fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n\t\n\t\t\t}\n\t\n\t\t},\n\t\n\t\tUtils: {\n\t\n\t\t\tLinear: function (p0, p1, t) {\n\t\n\t\t\t\treturn (p1 - p0) * t + p0;\n\t\n\t\t\t},\n\t\n\t\t\tBernstein: function (n, i) {\n\t\n\t\t\t\tvar fc = TWEEN.Interpolation.Utils.Factorial;\n\t\n\t\t\t\treturn fc(n) / fc(i) / fc(n - i);\n\t\n\t\t\t},\n\t\n\t\t\tFactorial: (function () {\n\t\n\t\t\t\tvar a = [1];\n\t\n\t\t\t\treturn function (n) {\n\t\n\t\t\t\t\tvar s = 1;\n\t\n\t\t\t\t\tif (a[n]) {\n\t\t\t\t\t\treturn a[n];\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor (var i = n; i > 1; i--) {\n\t\t\t\t\t\ts *= i;\n\t\t\t\t\t}\n\t\n\t\t\t\t\ta[n] = s;\n\t\t\t\t\treturn s;\n\t\n\t\t\t\t};\n\t\n\t\t\t})(),\n\t\n\t\t\tCatmullRom: function (p0, p1, p2, p3, t) {\n\t\n\t\t\t\tvar v0 = (p2 - p0) * 0.5;\n\t\t\t\tvar v1 = (p3 - p1) * 0.5;\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t * t2;\n\t\n\t\t\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (- 3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t\n\t\t\t}\n\t\n\t\t}\n\t\n\t};\n\t\n\t// UMD (Universal Module Definition)\n\t(function (root) {\n\t\n\t\tif (true) {\n\t\n\t\t\t// AMD\n\t\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t\t\t\treturn TWEEN;\n\t\t\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\n\t\t} else if (typeof module !== 'undefined' && typeof exports === 'object') {\n\t\n\t\t\t// Node.js\n\t\t\tmodule.exports = TWEEN;\n\t\n\t\t} else if (root !== undefined) {\n\t\n\t\t\t// Global variable\n\t\t\troot.TWEEN = TWEEN;\n\t\n\t\t}\n\t\n\t})(this);\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _three = __webpack_require__(4);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar View = function (_THREE$Object3D) {\n\t  _inherits(View, _THREE$Object3D);\n\t\n\t  function View(model) {\n\t    _classCallCheck(this, View);\n\t\n\t    if (!model) {\n\t      throw new ReferenceError('View requires a model to be passed.');\n\t    }\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(View).call(this));\n\t\n\t    _this._model = model;\n\t    _this._model.onUpdated = _this.onUpdated;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(View, [{\n\t    key: 'resize',\n\t    value: function resize(width, height) {\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        for (var _iterator = this.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          var child = _step.value;\n\t\n\t          if ('resize' in child) {\n\t            child.resize(width, height);\n\t          }\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      var _iteratorNormalCompletion2 = true;\n\t      var _didIteratorError2 = false;\n\t      var _iteratorError2 = undefined;\n\t\n\t      try {\n\t        for (var _iterator2 = this.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t          var child = _step2.value;\n\t\n\t          if ('update' in child) {\n\t            child.update();\n\t          }\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError2 = true;\n\t        _iteratorError2 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t            _iterator2.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError2) {\n\t            throw _iteratorError2;\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'onUpdated',\n\t    value: function onUpdated() {\n\t      // Abstract\n\t    }\n\t  }, {\n\t    key: 'model',\n\t    get: function get() {\n\t      return this._model;\n\t    }\n\t  }, {\n\t    key: 'size',\n\t    get: function get() {\n\t      return new _three2.default.Box3().setFromObject(this).size();\n\t    }\n\t  }, {\n\t    key: 'screen',\n\t    get: function get() {\n\t      // return {\n\t      //   position:\n\t      //   size:\n\t      // };\n\t    }\n\t  }]);\n\t\n\t  return View;\n\t}(_three2.default.Object3D);\n\t\n\texports.default = View;\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"679cf6466579db86f3a526972f9f8f0a.png\";\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"837c823272fbcab78d7a5679d2e45b3b.png\";\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"28cde9f210d6682bc3fd7c1d79588c6f.png\";\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"b570fae677b988bd68ce1ec5f4c510ac.png\";\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"7e473ce7b20cb31cb11b31da756cb6ae.png\";\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _three = __webpack_require__(4);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _view = __webpack_require__(21);\n\t\n\tvar _view2 = _interopRequireDefault(_view);\n\t\n\tvar _tileView = __webpack_require__(19);\n\t\n\tvar _tileView2 = _interopRequireDefault(_tileView);\n\t\n\tvar _serviceLocator = __webpack_require__(5);\n\t\n\tvar _serviceLocator2 = _interopRequireDefault(_serviceLocator);\n\t\n\tvar _mouseEvent = __webpack_require__(10);\n\t\n\tvar _mouseEvent2 = _interopRequireDefault(_mouseEvent);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar GridView = function (_View) {\n\t  _inherits(GridView, _View);\n\t\n\t  function GridView(model) {\n\t    _classCallCheck(this, GridView);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GridView).call(this, model));\n\t\n\t    _this._camera = _serviceLocator2.default.get('Game').camera;\n\t    _this._dimensions = new _three2.default.Vector2();\n\t\n\t    _this._model.onTileAdded = _this.onTileAdded.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(GridView, [{\n\t    key: 'onTileAdded',\n\t    value: function onTileAdded(tileModel) {\n\t      this.createTileView(tileModel);\n\t    }\n\t  }, {\n\t    key: 'getWorldDimensions',\n\t    value: function getWorldDimensions(width, height) {\n\t      var dimensions = new _three2.default.Vector2();\n\t      var vFOV = this._camera.fov * Math.PI / 180;\n\t      dimensions.y = 2 * Math.tan(vFOV / 2) * this._camera.position.z;\n\t      var aspect = width / height;\n\t      dimensions.x = dimensions.y * aspect;\n\t      return dimensions;\n\t    }\n\t  }, {\n\t    key: 'update',\n\t    value: function update() {\n\t      _get(Object.getPrototypeOf(GridView.prototype), 'update', this).call(this);\n\t    }\n\t  }, {\n\t    key: 'resize',\n\t    value: function resize(width, height) {\n\t      this._dimensions = this.getWorldDimensions(width, height);\n\t      var size = this.size;\n\t      var scale = 1;\n\t\n\t      if (height / width < size.y / size.x) {\n\t        scale = this._dimensions.y / size.y;\n\t      } else {\n\t        scale = this._dimensions.x / size.x;\n\t      }\n\t\n\t      // Scaling\n\t      this.scale.x *= scale;\n\t      this.scale.y *= scale;\n\t\n\t      // Centering\n\t      size = this.size;\n\t      this.position.x = -size.x / 2;\n\t      this.position.y = -size.y / 2;\n\t    }\n\t  }, {\n\t    key: 'createTileView',\n\t    value: function createTileView(tileModel) {\n\t      var tileView = new _tileView2.default(tileModel);\n\t      tileView.position.x = tileModel.cell.x * tileView.width;\n\t      tileView.position.y = tileModel.cell.y * tileView.height;\n\t      this.add(tileView);\n\t      this._tileViews.push(tileView);\n\t    }\n\t  }, {\n\t    key: 'createTileViews',\n\t    value: function createTileViews() {\n\t      this.children.length = 0;\n\t      this._tileViews = [];\n\t      for (var i = 0; i < this._model.size; i++) {\n\t        var tileCell = this._model.transformIndexToCellModel(i);\n\t        var tileModel = this._model.getTileModel(tileCell);\n\t        if (!tileModel) {\n\t          this._tileViews.push(null);\n\t          continue;\n\t        }\n\t        this.createTileView(tileModel);\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return GridView;\n\t}(_view2.default);\n\t\n\texports.default = GridView;\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _three = __webpack_require__(4);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _feature = __webpack_require__(29);\n\t\n\tvar _feature2 = _interopRequireDefault(_feature);\n\t\n\tvar _controller = __webpack_require__(30);\n\t\n\tvar _controller2 = _interopRequireDefault(_controller);\n\t\n\tvar _serviceLocator = __webpack_require__(5);\n\t\n\tvar _serviceLocator2 = _interopRequireDefault(_serviceLocator);\n\t\n\tvar _touchEvent = __webpack_require__(12);\n\t\n\tvar _touchEvent2 = _interopRequireDefault(_touchEvent);\n\t\n\tvar _mouseEvent = __webpack_require__(10);\n\t\n\tvar _mouseEvent2 = _interopRequireDefault(_mouseEvent);\n\t\n\tvar _tileView = __webpack_require__(19);\n\t\n\tvar _tileView2 = _interopRequireDefault(_tileView);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar GridController = function (_Controller) {\n\t  _inherits(GridController, _Controller);\n\t\n\t  function GridController(gridModel, gridView) {\n\t    _classCallCheck(this, GridController);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GridController).call(this, gridModel, gridView));\n\t\n\t    _this._camera = _serviceLocator2.default.get('Game').camera;\n\t\n\t    if (_feature2.default.touch) {\n\t      _this._input = _serviceLocator2.default.get('Touch');\n\t      _this._input.addEventListener(_touchEvent2.default.START, _this.onMouseDown.bind(_this));\n\t      _this._input.addEventListener(_touchEvent2.default.END, _this.onMouseUp.bind(_this));\n\t    } else {\n\t      _this._input = _serviceLocator2.default.get('Mouse');\n\t      _this._input.addEventListener(_mouseEvent2.default.DOWN, _this.onMouseDown.bind(_this));\n\t      _this._input.addEventListener(_mouseEvent2.default.UP, _this.onMouseUp.bind(_this));\n\t    }\n\t\n\t    _this._raycaster = new _three2.default.Raycaster();\n\t    _this._selected = [];\n\t    return _this;\n\t  }\n\t\n\t  _createClass(GridController, [{\n\t    key: 'getIntersects',\n\t    value: function getIntersects() {\n\t      this._raycaster.setFromCamera(this._input.position, this._camera);\n\t      var intersects = this._raycaster.intersectObjects(this.view.children, true);\n\t      return intersects;\n\t    }\n\t  }, {\n\t    key: 'selectTileView',\n\t    value: function selectTileView(view) {\n\t      if (view instanceof _tileView2.default) {\n\t        if (this._selected.length) {\n\t          var last = this._selected[0];\n\t          if (last.model.cell.distance(view.model.cell) !== 1) {\n\t            this._selected[this._selected.length - 1].highlight = false;\n\t            this._selected = [];\n\t            return;\n\t          }\n\t        }\n\t        this._selected.push(view);\n\t        view.highlight = true;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'swapSelectedTiles',\n\t    value: function swapSelectedTiles() {\n\t      this.model.swapCells(this._selected[0].model.cell, this._selected[1].model.cell);\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        for (var _iterator = this._selected[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          var selected = _step.value;\n\t\n\t          selected.highlight = false;\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      this._selected = [];\n\t    }\n\t  }, {\n\t    key: 'onMouseDown',\n\t    value: function onMouseDown(event) {\n\t      console.debug('onMouseDown', event);\n\t      var intersects = this.getIntersects();\n\t      if (intersects.length) {\n\t        this.selectTileView(intersects[0].object.parent);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'onMouseUp',\n\t    value: function onMouseUp(event) {\n\t      console.debug('onMouseUp', event);\n\t      if (this._selected.length === 2) {\n\t        this.swapSelectedTiles();\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return GridController;\n\t}(_controller2.default);\n\t\n\texports.default = GridController;\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * FEATURE.JS 1.0.0, A Fast, simple and lightweight browser feature\n\t * detection library in just 1kb.\n\t *\n\t * http://featurejs.com\n\t *\n\t * CSS 3D Transform, CSS Transform, CSS Transition, Canvas, SVG,\n\t * addEventListener, querySelectorAll, matchMedia, classList API,\n\t * placeholder, localStorage, History API, Viewport Units, REM Units,\n\t * CORS, WebGL, Service Worker, Context Menu, Geolocation,\n\t * Device Motion, Device Orientation, Touch, Async, Defer,\n\t * Srcset, Sizes & Picture Element.\n\t *\n\t *\n\t * USAGE EXAMPLE:\n\t * if (feature.webGL) {\n\t *   console.log(\"webGL supported!\");\n\t * }\n\t *\n\t * Author: @viljamis, https://viljamis.com\n\t */\n\t\n\t/* globals DocumentTouch */\n\t;(function (window, document, undefined) {\n\t  \"use strict\";\n\t\n\t  // For minification only\n\t  var docEl = document.documentElement;\n\t\n\t\n\t  /**\n\t   * Utilities\n\t   */\n\t  var util = {\n\t\n\t    /**\n\t     * Simple create element method\n\t     */\n\t    create : function(el) {\n\t      return document.createElement(el);\n\t    },\n\t\n\t    /**\n\t     * Test if it's an old device that we want to filter out\n\t     */\n\t    old : !!(/(Android\\s(1.|2.))|(Silk\\/1.)/i.test(navigator.userAgent)),\n\t\n\t    /**\n\t     * Function that takes a standard CSS property name as a parameter and\n\t     * returns it's prefixed version valid for current browser it runs in\n\t     */\n\t    pfx : (function() {\n\t      var style = document.createElement(\"dummy\").style;\n\t      var prefixes = [\"Webkit\", \"Moz\", \"O\", \"ms\"];\n\t      var memory = {};\n\t      return function(prop) {\n\t        if (typeof memory[prop] === \"undefined\") {\n\t          var ucProp = prop.charAt(0).toUpperCase() + prop.substr(1),\n\t            props = (prop + \" \" + prefixes.join(ucProp + \" \") + ucProp).split(\" \");\n\t            memory[prop] = null;\n\t          for (var i in props) {\n\t            if (style[props[i]] !== undefined) {\n\t              memory[prop] = props[i];\n\t              break;\n\t            }\n\t          }\n\t        }\n\t        return memory[prop];\n\t      };\n\t    })()\n\t\n\t  };\n\t\n\t\n\t  /**\n\t   * The Feature.js object\n\t   */\n\t\n\t  var Feature = {\n\t    // Test if CSS 3D transforms are supported\n\t    css3Dtransform : (function() {\n\t      var test = (!util.old && util.pfx(\"perspective\") !== null);\n\t      return !!test;\n\t    })(),\n\t\n\t    // Test if CSS transforms are supported\n\t    cssTransform : (function() {\n\t      var test = (!util.old && util.pfx(\"transformOrigin\") !== null);\n\t      return !!test;\n\t    })(),\n\t\n\t    // Test if CSS transitions are supported\n\t    cssTransition : (function() {\n\t      var test = util.pfx(\"transition\") !== null;\n\t      return !!test;\n\t    })(),\n\t\n\t    // Test if addEventListener is supported\n\t    addEventListener : !!window.addEventListener,\n\t\n\t    // Test if querySelectorAll is supported\n\t    querySelectorAll : !!document.querySelectorAll,\n\t\n\t    // Test if matchMedia is supported\n\t    matchMedia : !!window.matchMedia,\n\t\n\t    // Test if Device Motion is supported\n\t    deviceMotion : (\"DeviceMotionEvent\" in window),\n\t\n\t    // Test if Device Orientation is supported\n\t    deviceOrientation : (\"DeviceOrientationEvent\" in window),\n\t\n\t    // Test if Context Menu is supported\n\t    contextMenu : (\"contextMenu\" in docEl && \"HTMLMenuItemElement\" in window),\n\t\n\t    // Test if classList API is supported\n\t    classList : (\"classList\" in docEl),\n\t\n\t    // Test if placeholder attribute is supported\n\t    placeholder : (\"placeholder\" in util.create(\"input\")),\n\t\n\t    // Test if localStorage is supported\n\t    localStorage : (function() {\n\t      var test = \"x\";\n\t      try {\n\t        localStorage.setItem(test, test);\n\t        localStorage.removeItem(test);\n\t        return true;\n\t      } catch(err) {\n\t        return false;\n\t      }\n\t    })(),\n\t\n\t    // Test if History API is supported\n\t    historyAPI : (window.history && \"pushState\" in window.history),\n\t\n\t    // Test if ServiceWorkers are supported\n\t    serviceWorker : (\"serviceWorker\" in navigator),\n\t\n\t    // Test if viewport units are supported\n\t    viewportUnit : (function(el) {\n\t      try {\n\t        el.style.width = \"1vw\";\n\t        var test = el.style.width !== \"\";\n\t        return !!test;\n\t      } catch(err) {\n\t        return false;\n\t      }\n\t    })(util.create(\"dummy\")),\n\t\n\t    // Test if REM units are supported\n\t    remUnit : (function(el) {\n\t      try {\n\t        el.style.width = \"1rem\";\n\t        var test = el.style.width !== \"\";\n\t        return !!test;\n\t      } catch(err) {\n\t        return false;\n\t      }\n\t    })(util.create(\"dummy\")),\n\t\n\t    // Test if Canvas is supported\n\t    canvas : (function(el) {\n\t      return !!(el.getContext && el.getContext(\"2d\"));\n\t    })(util.create(\"canvas\")),\n\t\n\t    // Test if SVG is supported\n\t    svg : !!document.createElementNS && !!document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGRect,\n\t\n\t    // Test if WebGL is supported\n\t    webGL : (function(el) {\n\t      try {\n\t        return !!(window.WebGLRenderingContext && (el.getContext(\"webgl\") || el.getContext(\"experimental-webgl\")));\n\t      } catch(err) {\n\t        return false;\n\t      }\n\t    })(util.create(\"canvas\")),\n\t\n\t    // Test if cors is supported\n\t    cors : (\"XMLHttpRequest\" in window && \"withCredentials\" in new XMLHttpRequest()),\n\t\n\t    // Tests if touch events are supported, but doesn't necessarily reflect a touchscreen device\n\t    touch : !!((\"ontouchstart\" in window) || window.navigator && window.navigator.msPointerEnabled && window.MSGesture || window.DocumentTouch && document instanceof DocumentTouch),\n\t\n\t    // Test if async attribute is supported\n\t    async : (\"async\" in util.create(\"script\")),\n\t\n\t    // Test if defer attribute is supported\n\t    defer : (\"defer\" in util.create(\"script\")),\n\t\n\t    // Test if Geolocation is supported\n\t    geolocation : (\"geolocation\" in navigator),\n\t\n\t    // Test if img srcset attribute is supported\n\t    srcset : (\"srcset\" in util.create(\"img\")),\n\t\n\t    // Test if img sizes attribute is supported\n\t    sizes : (\"sizes\" in util.create(\"img\")),\n\t\n\t    // Test if Picture element is supported\n\t    pictureElement : (\"HTMLPictureElement\" in window),\n\t\n\t    // Run all the tests and add supported classes\n\t    testAll : function() {\n\t      var classes = \" js\";\n\t      for (var test in this) {\n\t        if (test !== \"testAll\" && test !== \"constructor\" && this[test]) {\n\t          classes += \" \" + test;\n\t        }\n\t      }\n\t      docEl.className += classes.toLowerCase();\n\t    }\n\t\n\t  };\n\t\n\t  /**\n\t   * Expose a public-facing API\n\t   */\n\t  window.feature = Feature;\n\t\n\t}(window, document));\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Controller = function () {\n\t  function Controller(model, view) {\n\t    _classCallCheck(this, Controller);\n\t\n\t    this._model = model;\n\t    this._view = view;\n\t  }\n\t\n\t  _createClass(Controller, [{\n\t    key: \"view\",\n\t    get: function get() {\n\t      return this._view;\n\t    }\n\t  }, {\n\t    key: \"model\",\n\t    get: function get() {\n\t      return this._model;\n\t    }\n\t  }]);\n\t\n\t  return Controller;\n\t}();\n\t\n\texports.default = Controller;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(32);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(34)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../node_modules/css-loader/index.js!./index.css\", function() {\n\t\t\t\tvar newContent = require(\"!!./../node_modules/css-loader/index.js!./index.css\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(33)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"*{margin:0;padding:0;-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-touch-callout:none;-webkit-text-size-adjust:none;-webkit-user-select:none}body{overflow:hidden}canvas{cursor:default}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\t// css base code, injected by the css-loader\r\n\tmodule.exports = function() {\r\n\t\tvar list = [];\r\n\t\r\n\t\t// return the list of modules as css string\r\n\t\tlist.toString = function toString() {\r\n\t\t\tvar result = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar item = this[i];\r\n\t\t\t\tif(item[2]) {\r\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(item[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result.join(\"\");\r\n\t\t};\r\n\t\r\n\t\t// import a list of modules into the list\r\n\t\tlist.i = function(modules, mediaQuery) {\r\n\t\t\tif(typeof modules === \"string\")\r\n\t\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\t\tvar alreadyImportedModules = {};\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar id = this[i][0];\r\n\t\t\t\tif(typeof id === \"number\")\r\n\t\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\t\tvar item = modules[i];\r\n\t\t\t\t// skip already imported module\r\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn list;\r\n\t};\r\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tvar stylesInDom = {},\r\n\t\tmemoize = function(fn) {\r\n\t\t\tvar memo;\r\n\t\t\treturn function () {\r\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\t\treturn memo;\r\n\t\t\t};\r\n\t\t},\r\n\t\tisOldIE = memoize(function() {\r\n\t\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t\t}),\r\n\t\tgetHeadElement = memoize(function () {\r\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t\t}),\r\n\t\tsingletonElement = null,\r\n\t\tsingletonCounter = 0,\r\n\t\tstyleElementsInsertedAtTop = [];\r\n\t\r\n\tmodule.exports = function(list, options) {\r\n\t\tif(false) {\r\n\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t\t}\r\n\t\r\n\t\toptions = options || {};\r\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t\t// tags it will allow on a page\r\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\t\r\n\t\t// By default, add <style> tags to the bottom of <head>.\r\n\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\t\r\n\t\tvar styles = listToStyles(list);\r\n\t\taddStylesToDom(styles, options);\r\n\t\r\n\t\treturn function update(newList) {\r\n\t\t\tvar mayRemove = [];\r\n\t\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\t\tvar item = styles[i];\r\n\t\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\t\tdomStyle.refs--;\r\n\t\t\t\tmayRemove.push(domStyle);\r\n\t\t\t}\r\n\t\t\tif(newList) {\r\n\t\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\t\taddStylesToDom(newStyles, options);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction addStylesToDom(styles, options) {\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tif(domStyle) {\r\n\t\t\t\tdomStyle.refs++;\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t\t}\r\n\t\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar parts = [];\r\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction listToStyles(list) {\r\n\t\tvar styles = [];\r\n\t\tvar newStyles = {};\r\n\t\tfor(var i = 0; i < list.length; i++) {\r\n\t\t\tvar item = list[i];\r\n\t\t\tvar id = item[0];\r\n\t\t\tvar css = item[1];\r\n\t\t\tvar media = item[2];\r\n\t\t\tvar sourceMap = item[3];\r\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\t\tif(!newStyles[id])\r\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\t\telse\r\n\t\t\t\tnewStyles[id].parts.push(part);\r\n\t\t}\r\n\t\treturn styles;\r\n\t}\r\n\t\r\n\tfunction insertStyleElement(options, styleElement) {\r\n\t\tvar head = getHeadElement();\r\n\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\t\tif (options.insertAt === \"top\") {\r\n\t\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t\t} else {\r\n\t\t\t\thead.appendChild(styleElement);\r\n\t\t\t}\r\n\t\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t\t} else if (options.insertAt === \"bottom\") {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction removeStyleElement(styleElement) {\r\n\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\t\tif(idx >= 0) {\r\n\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction createStyleElement(options) {\r\n\t\tvar styleElement = document.createElement(\"style\");\r\n\t\tstyleElement.type = \"text/css\";\r\n\t\tinsertStyleElement(options, styleElement);\r\n\t\treturn styleElement;\r\n\t}\r\n\t\r\n\tfunction createLinkElement(options) {\r\n\t\tvar linkElement = document.createElement(\"link\");\r\n\t\tlinkElement.rel = \"stylesheet\";\r\n\t\tinsertStyleElement(options, linkElement);\r\n\t\treturn linkElement;\r\n\t}\r\n\t\r\n\tfunction addStyle(obj, options) {\r\n\t\tvar styleElement, update, remove;\r\n\t\r\n\t\tif (options.singleton) {\r\n\t\t\tvar styleIndex = singletonCounter++;\r\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t\t} else if(obj.sourceMap &&\r\n\t\t\ttypeof URL === \"function\" &&\r\n\t\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\t\ttypeof Blob === \"function\" &&\r\n\t\t\ttypeof btoa === \"function\") {\r\n\t\t\tstyleElement = createLinkElement(options);\r\n\t\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t\tif(styleElement.href)\r\n\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tstyleElement = createStyleElement(options);\r\n\t\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tupdate(obj);\r\n\t\r\n\t\treturn function updateStyle(newObj) {\r\n\t\t\tif(newObj) {\r\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tupdate(obj = newObj);\r\n\t\t\t} else {\r\n\t\t\t\tremove();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tvar replaceText = (function () {\r\n\t\tvar textStore = [];\r\n\t\r\n\t\treturn function (index, replacement) {\r\n\t\t\ttextStore[index] = replacement;\r\n\t\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t\t};\r\n\t})();\r\n\t\r\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\t\tvar css = remove ? \"\" : obj.css;\r\n\t\r\n\t\tif (styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t\t} else {\r\n\t\t\tvar cssNode = document.createTextNode(css);\r\n\t\t\tvar childNodes = styleElement.childNodes;\r\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\t\tif (childNodes.length) {\r\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t\t} else {\r\n\t\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction applyToTag(styleElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\r\n\t\tif(media) {\r\n\t\t\tstyleElement.setAttribute(\"media\", media)\r\n\t\t}\r\n\t\r\n\t\tif(styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = css;\r\n\t\t} else {\r\n\t\t\twhile(styleElement.firstChild) {\r\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t\t}\r\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateLink(linkElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\t\r\n\t\tif(sourceMap) {\r\n\t\t\t// http://stackoverflow.com/a/26603875\r\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t\t}\r\n\t\r\n\t\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\t\r\n\t\tvar oldSrc = linkElement.href;\r\n\t\r\n\t\tlinkElement.href = URL.createObjectURL(blob);\r\n\t\r\n\t\tif(oldSrc)\r\n\t\t\tURL.revokeObjectURL(oldSrc);\r\n\t}\r\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** bundle.1470078875719.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 5497dca8470d7c2281b0\n **/","require('./index.css');\r\nimport M3Engine from './m3/m3engine';\r\nvar m3engine = new M3Engine();\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./index.js\n **/","import Engine from './../core/engine';\r\nimport M3Game from './m3game';\r\n\r\nexport default class M3Engine extends Engine {\r\n  constructor() {\r\n    super(M3Game);\r\n    this.start();\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./m3/m3engine.js\n **/","import THREE from 'three';\r\nimport ServiceLocator from './service-locator';\r\n\r\nexport default class Engine {\r\n  constructor(gameClass) {\r\n    this._gameClass = gameClass;\r\n    this._renderer  = new THREE.WebGLRenderer();\r\n    this.isStarted  = false;\r\n    this._width     = window.innerWidth;\r\n    this._height    = window.innerHeight;\r\n    ServiceLocator.provide('Engine', this);\r\n  }\r\n  get renderer() {\r\n    return this._renderer;\r\n  }\r\n  resize() {\r\n    this._width  = window.innerWidth;\r\n    this._height = window.innerHeight;\r\n    this._renderer.setSize(this._width, this._height);\r\n    this._game.resize(this._width, this._height);\r\n  }\r\n  start() {\r\n    if (!this._game) {\r\n      document.body.appendChild(this._renderer.domElement);\r\n      this._game = new this._gameClass(this, this._width, this._height);\r\n      window.addEventListener('resize', this.resize.bind(this));\r\n      this.resize();\r\n      this._game.start();\r\n    }\r\n    this.isStarted = true;\r\n  }\r\n  stop() {\r\n    this.isStarted = false;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./core/engine.js\n **/","// File:src/Three.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar THREE = { REVISION: '79' };\n\n//\n\nif ( typeof define === 'function' && define.amd ) {\n\n\tdefine( 'three', THREE );\n\n} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {\n\n\tmodule.exports = THREE;\n\n}\n\n// Polyfills\n\nif ( Number.EPSILON === undefined ) {\n\n\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n}\n\n//\n\nif ( Math.sign === undefined ) {\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\tMath.sign = function ( x ) {\n\n\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t};\n\n}\n\nif ( Function.prototype.name === undefined ) {\n\n\t// Missing in IE9-11.\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\tget: function () {\n\n\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\n\t\t}\n\n\t} );\n\n}\n\nif ( Object.assign === undefined ) {\n\n\t// Missing in IE.\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t( function () {\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\t'use strict';\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t} )();\n\n}\n\n//\n\nObject.assign( THREE, {\n\n\t// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\n\n\tMOUSE: { LEFT: 0, MIDDLE: 1, RIGHT: 2 },\n\n\t// GL STATE CONSTANTS\n\n\tCullFaceNone: 0,\n\tCullFaceBack: 1,\n\tCullFaceFront: 2,\n\tCullFaceFrontBack: 3,\n\n\tFrontFaceDirectionCW: 0,\n\tFrontFaceDirectionCCW: 1,\n\n\t// SHADOWING TYPES\n\n\tBasicShadowMap: 0,\n\tPCFShadowMap: 1,\n\tPCFSoftShadowMap: 2,\n\n\t// MATERIAL CONSTANTS\n\n\t// side\n\n\tFrontSide: 0,\n\tBackSide: 1,\n\tDoubleSide: 2,\n\n\t// shading\n\n\tFlatShading: 1,\n\tSmoothShading: 2,\n\n\t// colors\n\n\tNoColors: 0,\n\tFaceColors: 1,\n\tVertexColors: 2,\n\n\t// blending modes\n\n\tNoBlending: 0,\n\tNormalBlending: 1,\n\tAdditiveBlending: 2,\n\tSubtractiveBlending: 3,\n\tMultiplyBlending: 4,\n\tCustomBlending: 5,\n\n\t// custom blending equations\n\t// (numbers start from 100 not to clash with other\n\t// mappings to OpenGL constants defined in Texture.js)\n\n\tAddEquation: 100,\n\tSubtractEquation: 101,\n\tReverseSubtractEquation: 102,\n\tMinEquation: 103,\n\tMaxEquation: 104,\n\n\t// custom blending destination factors\n\n\tZeroFactor: 200,\n\tOneFactor: 201,\n\tSrcColorFactor: 202,\n\tOneMinusSrcColorFactor: 203,\n\tSrcAlphaFactor: 204,\n\tOneMinusSrcAlphaFactor: 205,\n\tDstAlphaFactor: 206,\n\tOneMinusDstAlphaFactor: 207,\n\n\t// custom blending source factors\n\n\t//ZeroFactor: 200,\n\t//OneFactor: 201,\n\t//SrcAlphaFactor: 204,\n\t//OneMinusSrcAlphaFactor: 205,\n\t//DstAlphaFactor: 206,\n\t//OneMinusDstAlphaFactor: 207,\n\tDstColorFactor: 208,\n\tOneMinusDstColorFactor: 209,\n\tSrcAlphaSaturateFactor: 210,\n\n\t// depth modes\n\n\tNeverDepth: 0,\n\tAlwaysDepth: 1,\n\tLessDepth: 2,\n\tLessEqualDepth: 3,\n\tEqualDepth: 4,\n\tGreaterEqualDepth: 5,\n\tGreaterDepth: 6,\n\tNotEqualDepth: 7,\n\n\n\t// TEXTURE CONSTANTS\n\n\tMultiplyOperation: 0,\n\tMixOperation: 1,\n\tAddOperation: 2,\n\n\t// Tone Mapping modes\n\n\tNoToneMapping: 0, // do not do any tone mapping, not even exposure (required for special purpose passes.)\n\tLinearToneMapping: 1, // only apply exposure.\n\tReinhardToneMapping: 2,\n\tUncharted2ToneMapping: 3, // John Hable\n\tCineonToneMapping: 4, // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\n\t// Mapping modes\n\n\tUVMapping: 300,\n\n\tCubeReflectionMapping: 301,\n\tCubeRefractionMapping: 302,\n\n\tEquirectangularReflectionMapping: 303,\n\tEquirectangularRefractionMapping: 304,\n\n\tSphericalReflectionMapping: 305,\n\tCubeUVReflectionMapping: 306,\n\tCubeUVRefractionMapping: 307,\n\n\t// Wrapping modes\n\n\tRepeatWrapping: 1000,\n\tClampToEdgeWrapping: 1001,\n\tMirroredRepeatWrapping: 1002,\n\n\t// Filters\n\n\tNearestFilter: 1003,\n\tNearestMipMapNearestFilter: 1004,\n\tNearestMipMapLinearFilter: 1005,\n\tLinearFilter: 1006,\n\tLinearMipMapNearestFilter: 1007,\n\tLinearMipMapLinearFilter: 1008,\n\n\t// Data types\n\n\tUnsignedByteType: 1009,\n\tByteType: 1010,\n\tShortType: 1011,\n\tUnsignedShortType: 1012,\n\tIntType: 1013,\n\tUnsignedIntType: 1014,\n\tFloatType: 1015,\n\tHalfFloatType: 1025,\n\n\t// Pixel types\n\n\t//UnsignedByteType: 1009,\n\tUnsignedShort4444Type: 1016,\n\tUnsignedShort5551Type: 1017,\n\tUnsignedShort565Type: 1018,\n\n\t// Pixel formats\n\n\tAlphaFormat: 1019,\n\tRGBFormat: 1020,\n\tRGBAFormat: 1021,\n\tLuminanceFormat: 1022,\n\tLuminanceAlphaFormat: 1023,\n\t// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\n\tRGBEFormat: THREE.RGBAFormat, //1024;\n\tDepthFormat: 1026,\n\n\t// DDS / ST3C Compressed texture formats\n\n\tRGB_S3TC_DXT1_Format: 2001,\n\tRGBA_S3TC_DXT1_Format: 2002,\n\tRGBA_S3TC_DXT3_Format: 2003,\n\tRGBA_S3TC_DXT5_Format: 2004,\n\n\t// PVRTC compressed texture formats\n\n\tRGB_PVRTC_4BPPV1_Format: 2100,\n\tRGB_PVRTC_2BPPV1_Format: 2101,\n\tRGBA_PVRTC_4BPPV1_Format: 2102,\n\tRGBA_PVRTC_2BPPV1_Format: 2103,\n\n\t// ETC compressed texture formats\n\n\tRGB_ETC1_Format: 2151,\n\n\t// Loop styles for AnimationAction\n\n\tLoopOnce: 2200,\n\tLoopRepeat: 2201,\n\tLoopPingPong: 2202,\n\n\t// Interpolation\n\n\tInterpolateDiscrete: 2300,\n\tInterpolateLinear: 2301,\n\tInterpolateSmooth: 2302,\n\n\t// Interpolant ending modes\n\n\tZeroCurvatureEnding: 2400,\n\tZeroSlopeEnding: 2401,\n\tWrapAroundEnding: 2402,\n\n\t// Triangle Draw modes\n\n\tTrianglesDrawMode: 0,\n\tTriangleStripDrawMode: 1,\n\tTriangleFanDrawMode: 2,\n\n\t// Texture Encodings\n\n\tLinearEncoding: 3000, // No encoding at all.\n\tsRGBEncoding: 3001,\n\tGammaEncoding: 3007, // uses GAMMA_FACTOR, for backwards compatibility with WebGLRenderer.gammaInput/gammaOutput\n\n\t// The following Texture Encodings are for RGB-only (no alpha) HDR light emission sources.\n\t// These encodings should not specified as output encodings except in rare situations.\n\tRGBEEncoding: 3002, // AKA Radiance.\n\tLogLuvEncoding: 3003,\n\tRGBM7Encoding: 3004,\n\tRGBM16Encoding: 3005,\n\tRGBDEncoding: 3006, // MaxRange is 256.\n\n\t// Depth packing strategies\n\n\tBasicDepthPacking: 3200, // for writing to float textures for high precision or for visualizing results in RGB buffers\n\tRGBADepthPacking: 3201 // for packing into RGBA buffers.\n\n} );\n\n// File:src/math/Color.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Color = function ( r, g, b ) {\n\n\tif ( g === undefined && b === undefined ) {\n\n\t\t// r is THREE.Color, hex or string\n\t\treturn this.set( r );\n\n\t}\n\n\treturn this.setRGB( r, g, b );\n\n};\n\nTHREE.Color.prototype = {\n\n\tconstructor: THREE.Color,\n\n\tr: 1, g: 1, b: 1,\n\n\tset: function ( value ) {\n\n\t\tif ( value instanceof THREE.Color ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t},\n\n\tsetHex: function ( hex ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\treturn this;\n\n\t},\n\n\tsetRGB: function ( r, g, b ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\treturn this;\n\n\t},\n\n\tsetHSL: function () {\n\n\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\tif ( t < 0 ) t += 1;\n\t\t\tif ( t > 1 ) t -= 1;\n\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\treturn p;\n\n\t\t}\n\n\t\treturn function setHSL( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = THREE.Math.euclideanModulo( h, 1 );\n\t\t\ts = THREE.Math.clamp( s, 0, 1 );\n\t\t\tl = THREE.Math.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetStyle: function ( style ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tvar color;\n\t\t\tvar name = m[ 1 ];\n\t\t\tvar components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tvar hex = m[ 1 ];\n\t\t\tvar size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = THREE.ColorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t},\n\n\tcopy: function ( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t},\n\n\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\treturn this;\n\n\t},\n\n\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\treturn this;\n\n\t},\n\n\tconvertGammaToLinear: function () {\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tthis.r = r * r;\n\t\tthis.g = g * g;\n\t\tthis.b = b * b;\n\n\t\treturn this;\n\n\t},\n\n\tconvertLinearToGamma: function () {\n\n\t\tthis.r = Math.sqrt( this.r );\n\t\tthis.g = Math.sqrt( this.g );\n\t\tthis.b = Math.sqrt( this.b );\n\n\t\treturn this;\n\n\t},\n\n\tgetHex: function () {\n\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t},\n\n\tgetHexString: function () {\n\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t},\n\n\tgetHSL: function ( optionalTarget ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tvar max = Math.max( r, g, b );\n\t\tvar min = Math.min( r, g, b );\n\n\t\tvar hue, saturation;\n\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tvar delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\thsl.h = hue;\n\t\thsl.s = saturation;\n\t\thsl.l = lightness;\n\n\t\treturn hsl;\n\n\t},\n\n\tgetStyle: function () {\n\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t},\n\n\toffsetHSL: function ( h, s, l ) {\n\n\t\tvar hsl = this.getHSL();\n\n\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t},\n\n\taddColors: function ( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n};\n\nTHREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n// File:src/math/Quaternion.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nTHREE.Quaternion = function ( x, y, z, w ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._w = ( w !== undefined ) ? w : 1;\n\n};\n\nTHREE.Quaternion.prototype = {\n\n\tconstructor: THREE.Quaternion,\n\n\tget x () {\n\n\t\treturn this._x;\n\n\t},\n\n\tset x ( value ) {\n\n\t\tthis._x = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget y () {\n\n\t\treturn this._y;\n\n\t},\n\n\tset y ( value ) {\n\n\t\tthis._y = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget z () {\n\n\t\treturn this._z;\n\n\t},\n\n\tset z ( value ) {\n\n\t\tthis._z = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget w () {\n\n\t\treturn this._w;\n\n\t},\n\n\tset w ( value ) {\n\n\t\tthis._w = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t},\n\n\tcopy: function ( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromEuler: function ( euler, update ) {\n\n\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tvar c1 = Math.cos( euler._x / 2 );\n\t\tvar c2 = Math.cos( euler._y / 2 );\n\t\tvar c3 = Math.cos( euler._z / 2 );\n\t\tvar s1 = Math.sin( euler._x / 2 );\n\t\tvar s2 = Math.sin( euler._y / 2 );\n\t\tvar s3 = Math.sin( euler._z / 2 );\n\n\t\tvar order = euler.order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t}\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33,\n\t\t\ts;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromUnitVectors: function () {\n\n\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tvar v1, r;\n\n\t\tvar EPS = 0.000001;\n\n\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t}\n\n\t\t\tthis._x = v1.x;\n\t\t\tthis._y = v1.y;\n\t\t\tthis._z = v1.z;\n\t\t\tthis._w = r;\n\n\t\t\treturn this.normalize();\n\n\t\t};\n\n\t}(),\n\n\tinverse: function () {\n\n\t\treturn this.conjugate().normalize();\n\n\t},\n\n\tconjugate: function () {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\tvar l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t},\n\n\tpremultiply: function ( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t},\n\n\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tslerp: function ( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\tthis._z = 0.5 * ( z + this._z );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n};\n\nObject.assign( THREE.Quaternion, {\n\n\tslerp: function( qa, qb, qm, t ) {\n\n\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t},\n\n\tslerpFlat: function(\n\t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tvar s = 1 - t,\n\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tvar tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n} );\n\n// File:src/math/Vector2.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author philogb / http://blog.thejit.org/\n * @author egraether / http://egraether.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.Vector2 = function ( x, y ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\n};\n\nTHREE.Vector2.prototype = {\n\n\tconstructor: THREE.Vector2,\n\n\tget width() {\n\n\t\treturn this.x;\n\n\t},\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t},\n\n\tget height() {\n\n\t\treturn this.y;\n\n\t},\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t},\n\n\t//\n\n\tset: function ( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector2();\n\t\t\t\tmax = new THREE.Vector2();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t},\n\n\tlengthManhattan: function() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tangle: function () {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\treturn angle;\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t},\n\n\tdistanceToManhattan: function ( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\trotateAround: function ( center, angle ) {\n\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tvar x = this.x - center.x;\n\t\tvar y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Vector3.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author *kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Vector3 = function ( x, y, z ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\n};\n\nTHREE.Vector3.prototype = {\n\n\tconstructor: THREE.Vector3,\n\n\tset: function ( x, y, z ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVectors: function ( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyEuler: function () {\n\n\t\tvar quaternion;\n\n\t\treturn function applyEuler( euler ) {\n\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyAxisAngle: function () {\n\n\t\tvar quaternion;\n\n\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\tapplyProjection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 projection matrix\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\n\t\treturn this;\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tvar ix =  qw * x + qy * z - qz * y;\n\t\tvar iy =  qw * y + qz * x - qx * z;\n\t\tvar iz =  qw * z + qx * y - qy * x;\n\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t},\n\n\tproject: function () {\n\n\t\tvar matrix;\n\n\t\treturn function project( camera ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\treturn this.applyProjection( matrix );\n\n\t\t};\n\n\t}(),\n\n\tunproject: function () {\n\n\t\tvar matrix;\n\n\t\treturn function unproject( camera ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\treturn this.applyProjection( matrix );\n\n\t\t};\n\n\t}(),\n\n\ttransformDirection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector3();\n\t\t\t\tmax = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t},\n\n\tlengthManhattan: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tcross: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\tthis.x = y * v.z - z * v.y;\n\t\tthis.y = z * v.x - x * v.z;\n\t\tthis.z = x * v.y - y * v.x;\n\n\t\treturn this;\n\n\t},\n\n\tcrossVectors: function ( a, b ) {\n\n\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t},\n\n\tprojectOnVector: function ( vector ) {\n\n\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\t\n\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\t\n\t},\n\n\tprojectOnPlane: function () {\n\n\t\tvar v1;\n\n\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( v1 );\n\n\t\t};\n\n\t}(),\n\n\treflect: function () {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\tvar v1;\n\n\t\treturn function reflect( normal ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t};\n\n\t}(),\n\n\tangleTo: function ( v ) {\n\n\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t},\n\n\tdistanceToManhattan: function ( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t},\n\n\tsetFromSpherical: function( s ) {\n\n\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixPosition: function ( m ) {\n\n\t\treturn this.setFromMatrixColumn( m, 3 );\n\n\t},\n\n\tsetFromMatrixScale: function ( m ) {\n\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\tif ( typeof m === 'number' ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n\t\t\tvar temp = m\n\t\t\tm = index;\n\t\t\tindex = temp;\n\n\t\t}\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\t\tthis.z = attribute.array[ index + 2 ];\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Vector4.js\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Vector4 = function ( x, y, z, w ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\tthis.w = ( w !== undefined ) ? w : 1;\n\n};\n\nTHREE.Vector4.prototype = {\n\n\tconstructor: THREE.Vector4,\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\t\t\tthis.w = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\t this.x = 1;\n\t\t\t this.y = 0;\n\t\t\t this.z = 0;\n\n\t\t} else {\n\n\t\t\t this.x = q.x / s;\n\t\t\t this.y = q.y / s;\n\t\t\t this.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector4();\n\t\t\t\tmax = new THREE.Vector4();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t},\n\n\tlengthManhattan: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\t\tthis.z = attribute.array[ index + 2 ];\n\t\tthis.w = attribute.array[ index + 3 ];\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Euler.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nTHREE.Euler = function ( x, y, z, order ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._order = order || THREE.Euler.DefaultOrder;\n\n};\n\nTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nTHREE.Euler.DefaultOrder = 'XYZ';\n\nTHREE.Euler.prototype = {\n\n\tconstructor: THREE.Euler,\n\n\tget x () {\n\n\t\treturn this._x;\n\n\t},\n\n\tset x ( value ) {\n\n\t\tthis._x = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget y () {\n\n\t\treturn this._y;\n\n\t},\n\n\tset y ( value ) {\n\n\t\tthis._y = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget z () {\n\n\t\treturn this._z;\n\n\t},\n\n\tset z ( value ) {\n\n\t\tthis._z = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget order () {\n\n\t\treturn this._order;\n\n\t},\n\n\tset order ( value ) {\n\n\t\tthis._order = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tset: function ( x, y, z, order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order || this._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t},\n\n\tcopy: function ( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\tvar clamp = THREE.Math.clamp;\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements;\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\torder = order || this._order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._y = 0;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromQuaternion: function () {\n\n\t\tvar matrix;\n\n\t\treturn function setFromQuaternion( q, order, update ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n\t\t};\n\n\t}(),\n\n\tsetFromVector3: function ( v, order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t},\n\n\treorder: function () {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\tvar q = new THREE.Quaternion();\n\n\t\treturn function reorder( newOrder ) {\n\n\t\t\tq.setFromEuler( this );\n\t\t\t\n\t\t\treturn this.setFromQuaternion( q, newOrder );\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t},\n\n\ttoVector3: function ( optionalResult ) {\n\n\t\tif ( optionalResult ) {\n\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t} else {\n\n\t\t\treturn new THREE.Vector3( this._x, this._y, this._z );\n\n\t\t}\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n};\n\n// File:src/math/Line3.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Line3 = function ( start, end ) {\n\n\tthis.start = ( start !== undefined ) ? start : new THREE.Vector3();\n\tthis.end = ( end !== undefined ) ? end : new THREE.Vector3();\n\n};\n\nTHREE.Line3.prototype = {\n\n\tconstructor: THREE.Line3,\n\n\tset: function ( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t},\n\n\tdelta: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.subVectors( this.end, this.start );\n\n\t},\n\n\tdistanceSq: function () {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t},\n\n\tdistance: function () {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t},\n\n\tat: function ( t, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tclosestPointToPointParameter: function () {\n\n\t\tvar startP = new THREE.Vector3();\n\t\tvar startEnd = new THREE.Vector3();\n\n\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n\t\t\tstartP.subVectors( point, this.start );\n\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = THREE.Math.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n};\n\n// File:src/math/Box2.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Box2 = function ( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );\n\n};\n\nTHREE.Box2.prototype = {\n\n\tconstructor: THREE.Box2,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new THREE.Vector2();\n\n\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tsize: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t     point.y < this.min.y || point.y > this.max.y ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\n\t\treturn result.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector2();\n\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n};\n\n// File:src/math/Box3.js\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Box3 = function ( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( + Infinity, + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );\n\n};\n\nTHREE.Box3.prototype = {\n\n\tconstructor: THREE.Box3,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromArray: function ( array ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tvar x = array[ i ];\n\t\t\tvar y = array[ i + 1 ];\n\t\t\tvar z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetFromObject: function () {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function setFromObject( object ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tobject.traverse( function ( node ) {\n\n\t\t\t\tvar geometry = node.geometry;\n\n\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\t\tvar array, offset, stride;\n\n\t\t\t\t\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tarray = attribute.data.array;\n\t\t\t\t\t\t\t\toffset = attribute.offset;\n\t\t\t\t\t\t\t\tstride = attribute.data.stride;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tarray = attribute.array;\n\t\t\t\t\t\t\t\toffset = 0;\n\t\t\t\t\t\t\t\tstride = 3;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfor ( var i = offset, il = array.length; i < il; i += stride ) {\n\n\t\t\t\t\t\t\t\tv1.fromArray( array, i );\n\t\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tsize: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n\t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn result.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsSphere: ( function () {\n\n\t\tvar closestPoint;\n\n\t\treturn function intersectsSphere( sphere ) {\n\n\t\t\tif ( closestPoint === undefined ) closestPoint = new THREE.Vector3();\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t};\n\n\t} )(),\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tvar min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= plane.constant && max >= plane.constant );\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tgetBoundingSphere: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function getBoundingSphere( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Sphere();\n\n\t\t\tresult.center = this.center();\n\t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar points = [\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3()\n\t\t];\n\n\t\treturn function applyMatrix4( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif( this.isEmpty() ) return this;\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n};\n\n// File:src/math/Matrix3.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n * @author tschw\n */\n\nTHREE.Matrix3 = function () {\n\n\tthis.elements = new Float32Array( [\n\n\t\t1, 0, 0,\n\t\t0, 1, 0,\n\t\t0, 0, 1\n\n\t] );\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n};\n\nTHREE.Matrix3.prototype = {\n\n\tconstructor: THREE.Matrix3,\n\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix4: function( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tapplyToVector3Array: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToVector3Array( array, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n\t\t\t\tv1.fromArray( array, j );\n\t\t\t\tv1.applyMatrix3( this );\n\t\t\t\tv1.toArray( array, j );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t};\n\n\t}(),\n\n\tapplyToBuffer: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToBuffer( buffer, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\tv1.z = buffer.getZ( j );\n\n\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t};\n\n\t}(),\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t},\n\n\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\tif ( matrix instanceof THREE.Matrix4 ) {\n\n\t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\n\t\t}\n\n\t\tvar me = matrix.elements,\n\t\t\tte = this.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate || false ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\t\t}\n\t\t\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar tmp, m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\"- just use .toArray instead.\" );\n\n\t\treturn this.toArray( array, offset );\n\n\t},\n\n\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t},\n\n\ttransposeIntoArray: function ( r ) {\n\n\t\tvar m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis.elements.set( array );\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ]  = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n};\n\n// File:src/math/Matrix4.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author jordi_ros / http://plattsoft.com\n * @author D1plo1d / http://github.com/D1plo1d\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author timknip / http://www.floorplanner.com/\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Matrix4 = function () {\n\n\tthis.elements = new Float32Array( [\n\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1\n\n\t] );\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n};\n\nTHREE.Matrix4.prototype = {\n\n\tconstructor: THREE.Matrix4,\n\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Matrix4().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tthis.elements.set( m.elements );\n\n\t\treturn this;\n\n\t},\n\n\tcopyPosition: function ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0,       0,       0,       1\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\textractRotation: function () {\n\n\t\tvar v1;\n\n\t\treturn function extractRotation( m ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeRotationFromEuler: function ( euler ) {\n\n\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\tvar te = this.elements;\n\n\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\tte[ 4 ] = xy - wz;\n\t\tte[ 8 ] = xz + wy;\n\n\t\tte[ 1 ] = xy + wz;\n\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\tte[ 9 ] = yz - wx;\n\n\t\tte[ 2 ] = xz - wy;\n\t\tte[ 6 ] = yz + wx;\n\t\tte[ 10 ] = 1 - ( xx + yy );\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tlookAt: function () {\n\n\t\tvar x, y, z;\n\n\t\treturn function lookAt( eye, target, up ) {\n\n\t\t\tif ( x === undefined ) {\n\n\t\t\t\tx = new THREE.Vector3();\n\t\t\t\ty = new THREE.Vector3();\n\t\t\t\tz = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tz.subVectors( eye, target ).normalize();\n\n\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\tz.z = 1;\n\n\t\t\t}\n\n\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\tz.z += 0.0001;\n\t\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\t}\n\n\t\t\ty.crossVectors( z, x );\n\n\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmultiply: function ( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t},\n\n\tpremultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t},\n\n\tmultiplyMatrices: function ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyToArray: function ( a, b, r ) {\n\n\t\tvar te = this.elements;\n\n\t\tthis.multiplyMatrices( a, b );\n\n\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tapplyToVector3Array: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToVector3Array( array, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n\t\t\t\tv1.fromArray( array, j );\n\t\t\t\tv1.applyMatrix4( this );\n\t\t\t\tv1.toArray( array, j );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t};\n\n\t}(),\n\n\tapplyToBuffer: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToBuffer( buffer, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\tv1.z = buffer.getZ( j );\n\n\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t};\n\n\t}(),\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar te = this.elements;\n\t\tvar tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\"- just use .toArray instead.\" );\n\n\t\treturn this.toArray( array, offset );\n\n\t},\n\n\tgetPosition: function () {\n\n\t\tvar v1;\n\n\t\treturn function getPosition() {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\n\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n\t\t};\n\n\t}(),\n\n\tsetPosition: function ( v ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 12 ] = v.x;\n\t\tte[ 13 ] = v.y;\n\t\tte[ 14 ] = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tvar te = this.elements,\n\t\t\tme = m.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate || false ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\n\t\t}\n\t\t\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\tscale: function ( v ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t},\n\n\tgetMaxScaleOnAxis: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t},\n\n\tmakeTranslation: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationX: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0,  0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s,  c, 0,\n\t\t\t0, 0,  0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationY: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationZ: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts,  c, 0, 0,\n\t\t\t0,  0, 1, 0,\n\t\t\t0,  0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tvar c = Math.cos( angle );\n\t\tvar s = Math.sin( angle );\n\t\tvar t = 1 - c;\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\tvar tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\t return this;\n\n\t},\n\n\tmakeScale: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tcompose: function ( position, quaternion, scale ) {\n\n\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\tthis.scale( scale );\n\t\tthis.setPosition( position );\n\n\t\treturn this;\n\n\t},\n\n\tdecompose: function () {\n\n\t\tvar vector, matrix;\n\n\t\treturn function decompose( position, quaternion, scale ) {\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tvector = new THREE.Vector3();\n\t\t\t\tmatrix = new THREE.Matrix4();\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) {\n\n\t\t\t\tsx = - sx;\n\n\t\t\t}\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\n\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = 2 * near / ( right - left );\n\t\tvar y = 2 * near / ( top - bottom );\n\n\t\tvar a = ( right + left ) / ( right - left );\n\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\tvar c = - ( far + near ) / ( far - near );\n\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t},\n\n\tmakePerspective: function ( fov, aspect, near, far ) {\n\n\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\n\t\tvar ymin = - ymax;\n\t\tvar xmin = ymin * aspect;\n\t\tvar xmax = ymax * aspect;\n\n\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\n\t},\n\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar w = 1.0 / ( right - left );\n\t\tvar h = 1.0 / ( top - bottom );\n\t\tvar p = 1.0 / ( far - near );\n\n\t\tvar x = ( right + left ) * w;\n\t\tvar y = ( top + bottom ) * h;\n\t\tvar z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis.elements.set( array );\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\tarray[ offset + 9 ]  = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n};\n\n// File:src/math/Ray.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Ray = function ( origin, direction ) {\n\n\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\n\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\n\n};\n\nTHREE.Ray.prototype = {\n\n\tconstructor: THREE.Ray,\n\n\tset: function ( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t},\n\n\tat: function ( t, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t},\n\n\tlookAt: function ( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\trecast: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function recast( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\tresult.subVectors( point, this.origin );\n\t\tvar directionDistance = result.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn result.copy( this.origin );\n\n\t\t}\n\n\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t},\n\n\tdistanceSqToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function distanceSqToPoint( point ) {\n\n\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn v1.distanceToSquared( point );\n\n\t\t};\n\n\t}(),\n\n\tdistanceSqToSegment: function () {\n\n\t\tvar segCenter = new THREE.Vector3();\n\t\tvar segDir = new THREE.Vector3();\n\t\tvar diff = new THREE.Vector3();\n\n\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\tvar c = diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t};\n\n\t}(),\n\n\tintersectSphere: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = v1.dot( this.direction );\n\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, optionalTarget );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t},\n\n\tdistanceToPlane: function ( plane ) {\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t :  null;\n\n\t},\n\n\tintersectPlane: function ( plane, optionalTarget ) {\n\n\t\tvar t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, optionalTarget );\n\n\t},\n\n\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t},\n\n\tintersectBox: function ( box, optionalTarget ) {\n\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tvar invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tvar origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n\t},\n\n\tintersectsBox: ( function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function intersectsBox( box ) {\n\n\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t};\n\n\t} )(),\n\n\tintersectTriangle: function () {\n\n\t\t// Compute the offset origin, edges, and normal.\n\t\tvar diff = new THREE.Vector3();\n\t\tvar edge1 = new THREE.Vector3();\n\t\tvar edge2 = new THREE.Vector3();\n\t\tvar normal = new THREE.Vector3();\n\n\t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\tedge1.subVectors( b, a );\n\t\t\tedge2.subVectors( c, a );\n\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tdiff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix4: function ( matrix4 ) {\n\n\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.sub( this.origin );\n\t\tthis.direction.normalize();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n};\n\n// File:src/math/Sphere.js\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Sphere = function ( center, radius ) {\n\n\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n};\n\nTHREE.Sphere.prototype = {\n\n\tconstructor: THREE.Sphere,\n\n\tset: function ( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function () {\n\n\t\tvar box = new THREE.Box3();\n\n\t\treturn function setFromPoints( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\tbox.setFromPoints( points ).center( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t},\n\n\tempty: function () {\n\n\t\treturn ( this.radius <= 0 );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t},\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// We use the following equation to compute the signed distance from\n\t\t// the center of the sphere to the plane.\n\t\t//\n\t\t// distance = q * n - d\n\t\t//\n\t\t// If this distance is greater than the radius of the sphere,\n\t\t// then there is no intersection.\n\n\t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tresult.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tresult.sub( this.center ).normalize();\n\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\tgetBoundingBox: function ( optionalTarget ) {\n\n\t\tvar box = optionalTarget || new THREE.Box3();\n\n\t\tbox.set( this.center, this.center );\n\t\tbox.expandByScalar( this.radius );\n\n\t\treturn box;\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n};\n\n// File:src/math/Frustum.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / http://clara.io\n */\n\nTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\n\n\tthis.planes = [\n\n\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\n\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\n\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\n\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\n\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\n\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\n\n\t];\n\n};\n\nTHREE.Frustum.prototype = {\n\n\tconstructor: THREE.Frustum,\n\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tvar planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( frustum ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix: function ( m ) {\n\n\t\tvar planes = this.planes;\n\t\tvar me = m.elements;\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\tintersectsObject: function () {\n\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function intersectsObject( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t.applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSprite: function () {\n\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function intersectsSprite( sprite ) {\n\n\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar planes = this.planes;\n\t\tvar center = sphere.center;\n\t\tvar negRadius = - sphere.radius;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsBox: function () {\n\n\t\tvar p1 = new THREE.Vector3(),\n\t\t\tp2 = new THREE.Vector3();\n\n\t\treturn function intersectsBox( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n\t\t\t\t// if both outside plane, no intersection\n\n\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t};\n\n\t}(),\n\n\n\tcontainsPoint: function ( point ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n};\n\n// File:src/math/Plane.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Plane = function ( normal, constant ) {\n\n\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n};\n\nTHREE.Plane.prototype = {\n\n\tconstructor: THREE.Plane,\n\n\tset: function ( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponents: function ( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCoplanarPoints: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\n\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t},\n\n\tnormalize: function () {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t},\n\n\tdistanceToSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t},\n\n\tprojectPoint: function ( point, optionalTarget ) {\n\n\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n\t},\n\n\torthoPoint: function ( point, optionalTarget ) {\n\n\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n\t},\n\n\tintersectLine: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function intersectLine( line, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tvar direction = line.delta( v1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn result.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t};\n\n\t}(),\n\n\tintersectsLine: function ( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tvar startSign = this.distanceToPoint( line.start );\n\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t},\n\n\tcoplanarPoint: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar m1 = new THREE.Matrix3();\n\n\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n\t\t\t// transform normal based on theory here:\n\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.constant = this.constant - offset.dot( this.normal );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n};\n\n// File:src/math/Spherical.js\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The poles (phi) are at the positive and negative y axis.\n * The equator starts at positive z.\n */\n\nTHREE.Spherical = function ( radius, phi, theta ) {\n\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n\treturn this;\n\n};\n\nTHREE.Spherical.prototype = {\n\n\tconstructor: THREE.Spherical,\n\n\tset: function ( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( other ) {\n\n\t\tthis.radius.copy( other.radius );\n\t\tthis.phi.copy( other.phi );\n\t\tthis.theta.copy( other.theta );\n\n\t\treturn this;\n\n\t},\n\n\t// restrict phi to be betwee EPS and PI-EPS\n\tmakeSafe: function() {\n\n\t\tvar EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromVector3: function( vec3 ) {\n\n\t\tthis.radius = vec3.length();\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t\t\tthis.phi = Math.acos( THREE.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n};\n\n// File:src/math/Math.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Math = {\n\n\tDEG2RAD: Math.PI / 180,\n\tRAD2DEG: 180 / Math.PI,\n\n\tgenerateUUID: function () {\n\n\t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t\tvar uuid = new Array( 36 );\n\t\tvar rnd = 0, r;\n\n\t\treturn function generateUUID() {\n\n\t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n\t\t\t\t\tuuid[ i ] = '-';\n\n\t\t\t\t} else if ( i === 14 ) {\n\n\t\t\t\t\tuuid[ i ] = '4';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t\t\t\t\tr = rnd & 0xf;\n\t\t\t\t\trnd = rnd >> 4;\n\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn uuid.join( '' );\n\n\t\t};\n\n\t}(),\n\n\tclamp: function ( value, min, max ) {\n\n\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t},\n\n\t// compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\teuclideanModulo: function ( n, m ) {\n\n\t\treturn ( ( n % m ) + m ) % m;\n\n\t},\n\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t},\n\n\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\tsmoothstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * ( 3 - 2 * x );\n\n\t},\n\n\tsmootherstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t},\n\n\trandom16: function () {\n\n\t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n\t\treturn Math.random();\n\n\t},\n\n\t// Random integer from <low, high> interval\n\n\trandInt: function ( low, high ) {\n\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t},\n\n\t// Random float from <low, high> interval\n\n\trandFloat: function ( low, high ) {\n\n\t\treturn low + Math.random() * ( high - low );\n\n\t},\n\n\t// Random float from <-range/2, range/2> interval\n\n\trandFloatSpread: function ( range ) {\n\n\t\treturn range * ( 0.5 - Math.random() );\n\n\t},\n\n\tdegToRad: function ( degrees ) {\n\n\t\treturn degrees * THREE.Math.DEG2RAD;\n\n\t},\n\n\tradToDeg: function ( radians ) {\n\n\t\treturn radians * THREE.Math.RAD2DEG;\n\n\t},\n\n\tisPowerOfTwo: function ( value ) {\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t},\n\n\tnearestPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\n\t},\n\n\tnextPowerOfTwo: function ( value ) {\n\n\t\tvalue --;\n\t\tvalue |= value >> 1;\n\t\tvalue |= value >> 2;\n\t\tvalue |= value >> 4;\n\t\tvalue |= value >> 8;\n\t\tvalue |= value >> 16;\n\t\tvalue ++;\n\n\t\treturn value;\n\n\t}\n\n};\n\n// File:src/math/Spline.js\n\n/**\n * Spline from Tween.js, slightly optimized (and trashed)\n * http://sole.github.com/tween.js/examples/05_spline.html\n *\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Spline = function ( points ) {\n\n\tthis.points = points;\n\n\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n\tpoint, intPoint, weight, w2, w3,\n\tpa, pb, pc, pd;\n\n\tthis.initFromArray = function ( a ) {\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0; i < a.length; i ++ ) {\n\n\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\n\t\t}\n\n\t};\n\n\tthis.getPoint = function ( k ) {\n\n\t\tpoint = ( this.points.length - 1 ) * k;\n\t\tintPoint = Math.floor( point );\n\t\tweight = point - intPoint;\n\n\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t\tc[ 1 ] = intPoint;\n\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\n\t\tpa = this.points[ c[ 0 ] ];\n\t\tpb = this.points[ c[ 1 ] ];\n\t\tpc = this.points[ c[ 2 ] ];\n\t\tpd = this.points[ c[ 3 ] ];\n\n\t\tw2 = weight * weight;\n\t\tw3 = weight * w2;\n\n\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\n\t\treturn v3;\n\n\t};\n\n\tthis.getControlPointsArray = function () {\n\n\t\tvar i, p, l = this.points.length,\n\t\t\tcoords = [];\n\n\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\tp = this.points[ i ];\n\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\n\t\t}\n\n\t\treturn coords;\n\n\t};\n\n\t// approximate length by summing linear segments\n\n\tthis.getLength = function ( nSubDivisions ) {\n\n\t\tvar i, index, nSamples, position,\n\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n\t\t\toldPosition = new THREE.Vector3(),\n\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\tchunkLengths = [],\n\t\t\ttotalLength = 0;\n\n\t\t// first point has 0 length\n\n\t\tchunkLengths[ 0 ] = 0;\n\n\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\n\t\tnSamples = this.points.length * nSubDivisions;\n\n\t\toldPosition.copy( this.points[ 0 ] );\n\n\t\tfor ( i = 1; i < nSamples; i ++ ) {\n\n\t\t\tindex = i / nSamples;\n\n\t\t\tposition = this.getPoint( index );\n\t\t\ttmpVec.copy( position );\n\n\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\n\t\t\toldPosition.copy( position );\n\n\t\t\tpoint = ( this.points.length - 1 ) * index;\n\t\t\tintPoint = Math.floor( point );\n\n\t\t\tif ( intPoint !== oldIntPoint ) {\n\n\t\t\t\tchunkLengths[ intPoint ] = totalLength;\n\t\t\t\toldIntPoint = intPoint;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// last point ends with total length\n\n\t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\n\t\treturn { chunks: chunkLengths, total: totalLength };\n\n\t};\n\n\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\n\t\tvar i, j,\n\t\t\tindex, indexCurrent, indexNext,\n\t\t\trealDistance,\n\t\t\tsampling, position,\n\t\t\tnewpoints = [],\n\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\tsl = this.getLength();\n\n\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\n\t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\n\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\n\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\n\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\n\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n\t\t\tindexNext = i / ( this.points.length - 1 );\n\n\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\n\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\n\t\t\t\tposition = this.getPoint( index );\n\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\n\t\t\t}\n\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\n\t\t}\n\n\t\tthis.points = newpoints;\n\n\t};\n\n\t// Catmull-Rom\n\n\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t\t\tv1 = ( p3 - p1 ) * 0.5;\n\n\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n};\n\n// File:src/math/Triangle.js\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Triangle = function ( a, b, c ) {\n\n\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\n\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\n\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\n\n};\n\nTHREE.Triangle.normal = function () {\n\n\tvar v0 = new THREE.Vector3();\n\n\treturn function normal( a, b, c, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tresult.subVectors( c, b );\n\t\tv0.subVectors( a, b );\n\t\tresult.cross( v0 );\n\n\t\tvar resultLengthSq = result.lengthSq();\n\t\tif ( resultLengthSq > 0 ) {\n\n\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n\t\t}\n\n\t\treturn result.set( 0, 0, 0 );\n\n\t};\n\n}();\n\n// static/instance method to calculate barycentric coordinates\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\nTHREE.Triangle.barycoordFromPoint = function () {\n\n\tvar v0 = new THREE.Vector3();\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\n\treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n\t\tv0.subVectors( c, a );\n\t\tv1.subVectors( b, a );\n\t\tv2.subVectors( point, a );\n\n\t\tvar dot00 = v0.dot( v0 );\n\t\tvar dot01 = v0.dot( v1 );\n\t\tvar dot02 = v0.dot( v2 );\n\t\tvar dot11 = v1.dot( v1 );\n\t\tvar dot12 = v1.dot( v2 );\n\n\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn result.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tvar invDenom = 1 / denom;\n\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn result.set( 1 - u - v, v, u );\n\n\t};\n\n}();\n\nTHREE.Triangle.containsPoint = function () {\n\n\tvar v1 = new THREE.Vector3();\n\n\treturn function containsPoint( point, a, b, c ) {\n\n\t\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n\t};\n\n}();\n\nTHREE.Triangle.prototype = {\n\n\tconstructor: THREE.Triangle,\n\n\tset: function ( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t},\n\n\tarea: function () {\n\n\t\tvar v0 = new THREE.Vector3();\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function area() {\n\n\t\t\tv0.subVectors( this.c, this.b );\n\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t};\n\n\t}(),\n\n\tmidpoint: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t},\n\n\tnormal: function ( optionalTarget ) {\n\n\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n\t},\n\n\tplane: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Plane();\n\n\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t},\n\n\tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t},\n\n\tclosestPointToPoint: function () {\n\n\t\tvar plane, edgeList, projectedPoint, closestPoint;\n\n\t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n\t\t\tif ( plane === undefined ) {\n\n\t\t\t\tplane = new THREE.Plane();\n\t\t\t\tedgeList = [ new THREE.Line3(), new THREE.Line3(), new THREE.Line3() ];\n\t\t\t\tprojectedPoint = new THREE.Vector3();\n\t\t\t\tclosestPoint = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\tvar minDistance = Infinity;\n\n\t\t\t// project the point onto the plane of the triangle\n\n\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\t\tplane.projectPoint( point, projectedPoint );\n\n\t\t\t// check if the projection lies within the triangle\n\n\t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\n\t\t\t\t// if so, this is the closest point\n\n\t\t\t\tresult.copy( projectedPoint );\n\n\t\t\t} else {\n\n\t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n\t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\n\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n\t\t\t\t\tif( distance < minDistance ) {\n\n\t\t\t\t\t\tminDistance = distance;\n\n\t\t\t\t\t\tresult.copy( closestPoint );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n};\n\n// File:src/math/Interpolant.js\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n * @author tschw\n */\n\nTHREE.Interpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tthis.parameterPositions = parameterPositions;\n\tthis._cachedIndex = 0;\n\n\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\tthis.sampleValues = sampleValues;\n\tthis.valueSize = sampleSize;\n\n};\n\nTHREE.Interpolant.prototype = {\n\n\tconstructor: THREE.Interpolant,\n\n\tevaluate: function( t ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\ti1 = this._cachedIndex,\n\n\t\t\tt1 = pp[   i1   ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tvar right;\n\n\t\t\t\tlinear_scan: {\n//- See http://jsperf.com/comparison-to-undefined/3\n//- slower code:\n//-\n//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n//- slower code:\n//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[   i1   ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t},\n\n\tsettings: null, // optional, subclass-specific settings structure\n\t// Note: The indirection allows central control of many interpolants.\n\n\t// --- Protected interface\n\n\tDefaultSettings_: {},\n\n\tgetSettings_: function() {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t},\n\n\tcopySampleValue_: function( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// Template methods for derived classes:\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tthrow new Error( \"call to abstract method\" );\n\t\t// implementations shall return this.resultBuffer\n\n\t},\n\n\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\t// empty\n\n\t}\n\n};\n\nObject.assign( THREE.Interpolant.prototype, {\n\n\tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n\t\tTHREE.Interpolant.prototype.copySampleValue_,\n\n\tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n\t\tTHREE.Interpolant.prototype.copySampleValue_\n\n} );\n\n// File:src/math/interpolants/CubicInterpolant.js\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @author tschw\n */\n\nTHREE.CubicInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\tthis._weightPrev = -0;\n\tthis._offsetPrev = -0;\n\tthis._weightNext = -0;\n\tthis._offsetNext = -0;\n\n};\n\nTHREE.CubicInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.CubicInterpolant,\n\n\tDefaultSettings_: {\n\n\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\n\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\n\n\t},\n\n\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\tiPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase THREE.ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase THREE.ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t},\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n\t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n\t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n\t\tvar sN =       wN   * ppp   -           wN      * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n// File:src/math/interpolants/DiscreteInterpolant.js\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceeding\n * the parameter.\n *\n * @author tschw\n */\n\nTHREE.DiscreteInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n};\n\nTHREE.DiscreteInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.DiscreteInterpolant,\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n} );\n\n// File:src/math/interpolants/LinearInterpolant.js\n\n/**\n * @author tschw\n */\n\nTHREE.LinearInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n};\n\nTHREE.LinearInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.LinearInterpolant,\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n// File:src/math/interpolants/QuaternionLinearInterpolant.js\n\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @author tschw\n */\n\nTHREE.QuaternionLinearInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n};\n\nTHREE.QuaternionLinearInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.QuaternionLinearInterpolant,\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset = i1 * stride,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tTHREE.Quaternion.slerpFlat( result, 0,\n\t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n// File:src/core/Clock.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Clock = function ( autoStart ) {\n\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\tthis.startTime = 0;\n\tthis.oldTime = 0;\n\tthis.elapsedTime = 0;\n\n\tthis.running = false;\n\n};\n\nTHREE.Clock.prototype = {\n\n\tconstructor: THREE.Clock,\n\n\tstart: function () {\n\n\t\tthis.startTime = ( performance || Date ).now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.running = true;\n\n\t},\n\n\tstop: function () {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\n\t},\n\n\tgetElapsedTime: function () {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t},\n\n\tgetDelta: function () {\n\n\t\tvar diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tvar newTime = ( performance || Date ).now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n};\n\n// File:src/core/EventDispatcher.js\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nTHREE.EventDispatcher = function () {};\n\nObject.assign( THREE.EventDispatcher.prototype, {\n\n\taddEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t},\n\n\thasEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tremoveEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tdispatchEvent: function ( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\tvar array = [], i = 0;\n\t\t\tvar length = listenerArray.length;\n\n\t\t\tfor ( i = 0; i < length; i ++ ) {\n\n\t\t\t\tarray[ i ] = listenerArray[ i ];\n\n\t\t\t}\n\n\t\t\tfor ( i = 0; i < length; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/core/Layers.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Layers = function () {\n\n\tthis.mask = 1;\n\n};\n\nTHREE.Layers.prototype = {\n\n\tconstructor: THREE.Layers,\n\n\tset: function ( channel ) {\n\n\t\tthis.mask = 1 << channel;\n\n\t},\n\n\tenable: function ( channel ) {\n\n\t\tthis.mask |= 1 << channel;\n\n\t},\n\n\ttoggle: function ( channel ) {\n\n\t\tthis.mask ^= 1 << channel;\n\n\t},\n\n\tdisable: function ( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel );\n\n\t},\n\n\ttest: function ( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n};\n\n// File:src/core/Raycaster.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author bhouston / http://clara.io/\n * @author stephomi / http://stephaneginier.com/\n */\n\n( function ( THREE ) {\n\n\tTHREE.Raycaster = function ( origin, direction, near, far ) {\n\n\t\tthis.ray = new THREE.Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t};\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t//\n\n\tTHREE.Raycaster.prototype = {\n\n\t\tconstructor: THREE.Raycaster,\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( camera instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t\t} else if ( camera instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t};\n\n}( THREE ) );\n\n// File:src/core/Object3D.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author elephantatwork / www.elephantatwork.ch\n */\n\nTHREE.Object3D = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Object3D';\n\n\tthis.parent = null;\n\tthis.children = [];\n\n\tthis.up = THREE.Object3D.DefaultUp.clone();\n\n\tvar position = new THREE.Vector3();\n\tvar rotation = new THREE.Euler();\n\tvar quaternion = new THREE.Quaternion();\n\tvar scale = new THREE.Vector3( 1, 1, 1 );\n\n\tfunction onRotationChange() {\n\n\t\tquaternion.setFromEuler( rotation, false );\n\n\t}\n\n\tfunction onQuaternionChange() {\n\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t}\n\n\trotation.onChange( onRotationChange );\n\tquaternion.onChange( onQuaternionChange );\n\n\tObject.defineProperties( this, {\n\t\tposition: {\n\t\t\tenumerable: true,\n\t\t\tvalue: position\n\t\t},\n\t\trotation: {\n\t\t\tenumerable: true,\n\t\t\tvalue: rotation\n\t\t},\n\t\tquaternion: {\n\t\t\tenumerable: true,\n\t\t\tvalue: quaternion\n\t\t},\n\t\tscale: {\n\t\t\tenumerable: true,\n\t\t\tvalue: scale\n\t\t},\n\t\tmodelViewMatrix: {\n\t\t\tvalue: new THREE.Matrix4()\n\t\t},\n\t\tnormalMatrix: {\n\t\t\tvalue: new THREE.Matrix3()\n\t\t}\n\t} );\n\n\tthis.matrix = new THREE.Matrix4();\n\tthis.matrixWorld = new THREE.Matrix4();\n\n\tthis.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\n\tthis.matrixWorldNeedsUpdate = false;\n\n\tthis.layers = new THREE.Layers();\n\tthis.visible = true;\n\n\tthis.castShadow = false;\n\tthis.receiveShadow = false;\n\n\tthis.frustumCulled = true;\n\tthis.renderOrder = 0;\n\n\tthis.userData = {};\n\n};\n\nTHREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );\nTHREE.Object3D.DefaultMatrixAutoUpdate = true;\n\nObject.assign( THREE.Object3D.prototype, THREE.EventDispatcher.prototype, {\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t},\n\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t},\n\n\tsetRotationFromEuler: function ( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t},\n\n\tsetRotationFromMatrix: function ( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t},\n\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t},\n\n\trotateOnAxis: function () {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar q1 = new THREE.Quaternion();\n\n\t\treturn function rotateOnAxis( axis, angle ) {\n\n\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateX: function () {\n\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\ttranslateOnAxis: function () {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function translateOnAxis( axis, distance ) {\n\n\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslateX: function () {\n\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\n\t\treturn function translateX( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateY: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\n\t\treturn function translateY( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateZ: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\n\t\treturn function translateZ( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\tlocalToWorld: function ( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t},\n\n\tworldToLocal: function () {\n\n\t\tvar m1 = new THREE.Matrix4();\n\n\t\treturn function worldToLocal( vector ) {\n\n\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\t// This routine does not support objects with rotated and/or translated parent(s)\n\n\t\tvar m1 = new THREE.Matrix4();\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t};\n\n\t}(),\n\n\tadd: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object instanceof THREE.Object3D ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\tthis.children.push( object );\n\n\t\t} else {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tremove: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t}\n\n\t},\n\n\tgetObjectById: function ( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t},\n\n\tgetObjectByName: function ( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t},\n\n\tgetObjectByProperty: function ( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tvar child = this.children[ i ];\n\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t},\n\n\tgetWorldPosition: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n\t},\n\n\tgetWorldQuaternion: function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar scale = new THREE.Vector3();\n\n\t\treturn function getWorldQuaternion( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Quaternion();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldRotation: function () {\n\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function getWorldRotation( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Euler();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n\t\t};\n\n\t}(),\n\n\tgetWorldScale: function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function getWorldScale( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldDirection: function () {\n\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t};\n\n\t}(),\n\n\traycast: function () {},\n\n\ttraverse: function ( callback ) {\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseVisible: function ( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseAncestors: function ( callback ) {\n\n\t\tvar parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t},\n\n\tupdateMatrix: function () {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\t// meta is '' when called from JSON.stringify\n\t\tvar isRootObject = ( meta === undefined || meta === '' );\n\n\t\tvar output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tvar object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\t//\n\n\t\tif ( this.geometry !== undefined ) {\n\n\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\n\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\n\t\t\t}\n\n\t\t\tobject.geometry = this.geometry.uuid;\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\n\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\n\t\t\t}\n\n\t\t\tobject.material = this.material.uuid;\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache ( cache ) {\n\n\t\t\tvar values = [];\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\t\t\treturn values;\n\n\t\t}\n\n\t},\n\n\tclone: function ( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t},\n\n\tcopy: function ( source, recursive ) {\n\n\t\tif ( recursive === undefined ) recursive = true;\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tvar child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\nTHREE.Object3DIdCount = 0;\n\n// File:src/core/Face3.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\n\n\tthis.a = a;\n\tthis.b = b;\n\tthis.c = c;\n\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n};\n\nTHREE.Face3.prototype = {\n\n\tconstructor: THREE.Face3,\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.a = source.a;\n\t\tthis.b = source.b;\n\t\tthis.c = source.c;\n\n\t\tthis.normal.copy( source.normal );\n\t\tthis.color.copy( source.color );\n\n\t\tthis.materialIndex = source.materialIndex;\n\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t}\n\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/core/BufferAttribute.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferAttribute = function ( array, itemSize, normalized ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.array = array;\n\tthis.itemSize = itemSize;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\tthis.normalized = normalized === true;\n\n};\n\nTHREE.BufferAttribute.prototype = {\n\n\tconstructor: THREE.BufferAttribute,\n\n\tget count() {\n\n\t\treturn this.array.length / this.itemSize;\n\n\t},\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyArray: function ( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t},\n\n\tcopyColorsArray: function ( colors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\tvar color = colors[ i ];\n\n\t\t\tif ( color === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\tcolor = new THREE.Color();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = color.r;\n\t\t\tarray[ offset ++ ] = color.g;\n\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyIndicesArray: function ( indices ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\tvar index = indices[ i ];\n\n\t\t\tarray[ offset ++ ] = index.a;\n\t\t\tarray[ offset ++ ] = index.b;\n\t\t\tarray[ offset ++ ] = index.c;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector2sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector2();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector3sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector4sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector4();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize ];\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n};\n\n//\n\nTHREE.Int8Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int8Array( array ), itemSize );\n\n};\n\nTHREE.Uint8Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint8Array( array ), itemSize );\n\n};\n\nTHREE.Uint8ClampedAttribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\n};\n\nTHREE.Int16Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int16Array( array ), itemSize );\n\n};\n\nTHREE.Uint16Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint16Array( array ), itemSize );\n\n};\n\nTHREE.Int32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int32Array( array ), itemSize );\n\n};\n\nTHREE.Uint32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint32Array( array ), itemSize );\n\n};\n\nTHREE.Float32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Float32Array( array ), itemSize );\n\n};\n\nTHREE.Float64Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Float64Array( array ), itemSize );\n\n};\n\n\n// Deprecated\n\nTHREE.DynamicBufferAttribute = function ( array, itemSize ) {\n\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\treturn new THREE.BufferAttribute( array, itemSize ).setDynamic( true );\n\n};\n\n// File:src/core/InstancedBufferAttribute.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {\n\n\tTHREE.BufferAttribute.call( this, array, itemSize );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n};\n\nTHREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );\nTHREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\n\nTHREE.InstancedBufferAttribute.prototype.copy = function ( source ) {\n\n\tTHREE.BufferAttribute.prototype.copy.call( this, source );\n\n\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\treturn this;\n\n};\n\n// File:src/core/InterleavedBuffer.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InterleavedBuffer = function ( array, stride ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.array = array;\n\tthis.stride = stride;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\n};\n\nTHREE.InterleavedBuffer.prototype = {\n\n\tconstructor: THREE.InterleavedBuffer,\n\n\tget length () {\n\n\t\treturn this.array.length;\n\n\t},\n\n\tget count () {\n\n\t\treturn this.array.length / this.stride;\n\n\t},\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.stride = source.stride;\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n};\n\n// File:src/core/InstancedInterleavedBuffer.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {\n\n\tTHREE.InterleavedBuffer.call( this, array, stride );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n};\n\nTHREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );\nTHREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\n\nTHREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\n\tTHREE.InterleavedBuffer.prototype.copy.call( this, source );\n\n\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\treturn this;\n\n};\n\n// File:src/core/InterleavedBufferAttribute.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset, normalized ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.data = interleavedBuffer;\n\tthis.itemSize = itemSize;\n\tthis.offset = offset;\n\n\tthis.normalized = normalized === true;\n\n};\n\n\nTHREE.InterleavedBufferAttribute.prototype = {\n\n\tconstructor: THREE.InterleavedBufferAttribute,\n\n\tget length() {\n\n\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\treturn this.array.length;\n\n\t},\n\n\tget count() {\n\n\t\treturn this.data.count;\n\n\t},\n\n\tget array() {\n\n\t\treturn this.data.array;\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/core/Geometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author bhouston / http://clara.io\n */\n\nTHREE.Geometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Geometry';\n\n\tthis.vertices = [];\n\tthis.colors = [];\n\tthis.faces = [];\n\tthis.faceVertexUvs = [ [] ];\n\n\tthis.morphTargets = [];\n\tthis.morphNormals = [];\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\tthis.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.elementsNeedUpdate = false;\n\tthis.verticesNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.lineDistancesNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n};\n\nObject.assign( THREE.Geometry.prototype, THREE.EventDispatcher.prototype, {\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.verticesNeedUpdate = true;\n\t\tthis.normalsNeedUpdate = true;\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1;\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1;\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj;\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tfromBufferGeometry: function ( geometry ) {\n\n\t\tvar scope = this;\n\n\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\tvar attributes = geometry.attributes;\n\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\tvar tempNormals = [];\n\t\tvar tempUVs = [];\n\t\tvar tempUVs2 = [];\n\n\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\tscope.vertices.push( new THREE.Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\ttempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\tscope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\ttempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\ttempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\tvar face = new THREE.Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\tscope.faces.push( face );\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( indices !== undefined ) {\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeFaceNormals();\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tvar offset = this.boundingBox.center().negate();\n\n\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\treturn offset;\n\n\t},\n\n\tnormalize: function () {\n\n\t\tthis.computeBoundingSphere();\n\n\t\tvar center = this.boundingSphere.center;\n\t\tvar radius = this.boundingSphere.radius;\n\n\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\tvar matrix = new THREE.Matrix4();\n\t\tmatrix.set(\n\t\t\ts, 0, 0, - s * center.x,\n\t\t\t0, s, 0, - s * center.y,\n\t\t\t0, 0, s, - s * center.z,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\tthis.applyMatrix( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tcomputeFaceNormals: function () {\n\n\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tvar face = this.faces[ f ];\n\n\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\tcb.subVectors( vC, vB );\n\t\t\tab.subVectors( vA, vB );\n\t\t\tcb.cross( ab );\n\n\t\t\tcb.normalize();\n\n\t\t\tface.normal.copy( cb );\n\n\t\t}\n\n\t},\n\n\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\tvar v, vl, f, fl, face, vertices;\n\n\t\tvertices = new Array( this.vertices.length );\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ] = new THREE.Vector3();\n\n\t\t}\n\n\t\tif ( areaWeighted ) {\n\n\t\t\t// vertex normals weighted by triangle areas\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\tvar vA, vB, vC;\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ].normalize();\n\n\t\t}\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.faces.length > 0 ) {\n\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcomputeMorphNormals: function () {\n\n\t\tvar i, il, f, fl, face;\n\n\t\t// save original normals\n\t\t// - create temp variables on first access\n\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t} else {\n\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t}\n\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\tvar tmpGeo = new THREE.Geometry();\n\t\ttmpGeo.faces = this.faces;\n\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t// create on first access\n\n\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tfaceNormal = new THREE.Vector3();\n\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\n\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t// set vertices to morph target\n\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t// compute morph normals\n\n\t\t\ttmpGeo.computeFaceNormals();\n\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t// store morph normals\n\n\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore original normals\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t}\n\n\t},\n\n\tcomputeTangents: function () {\n\n\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t},\n\n\tcomputeLineDistances: function () {\n\n\t\tvar d = 0;\n\t\tvar vertices = this.vertices;\n\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tif ( i > 0 ) {\n\n\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.lineDistances[ i ] = d;\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new THREE.Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new THREE.Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t},\n\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\tif ( geometry instanceof THREE.Geometry === false ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar normalMatrix,\n\t\tvertexOffset = this.vertices.length,\n\t\tvertices1 = this.vertices,\n\t\tvertices2 = geometry.vertices,\n\t\tfaces1 = this.faces,\n\t\tfaces2 = geometry.faces,\n\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\tuvs2 = geometry.faceVertexUvs[ 0 ];\n\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\tif ( matrix !== undefined ) {\n\n\t\t\tnormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t}\n\n\t\t// vertices\n\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\tvertices1.push( vertexCopy );\n\n\t\t}\n\n\t\t// faces\n\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t}\n\n\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t}\n\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\tfaces1.push( faceCopy );\n\n\t\t}\n\n\t\t// uvs\n\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\tif ( uv === undefined ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t}\n\n\t\t\tuvs1.push( uvCopy );\n\n\t\t}\n\n\t},\n\n\tmergeMesh: function ( mesh ) {\n\n\t\tif ( mesh instanceof THREE.Mesh === false ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\treturn;\n\n\t\t}\n\n\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t},\n\n\t/*\n\t * Checks for duplicate vertices with hashmap.\n\t * Duplicated vertices are removed\n\t * and faces' vertices are updated.\n\t */\n\n\tmergeVertices: function () {\n\n\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\tvar unique = [], changes = [];\n\n\t\tvar v, key;\n\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\tvar i, il, face;\n\t\tvar indices, j, jl;\n\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tv = this.vertices[ i ];\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// if faces are completely degenerate after merging vertices, we\n\t\t// have to remove them from the geometry.\n\t\tvar faceIndicesToRemove = [];\n\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tface = this.faces[ i ];\n\n\t\t\tface.a = changes[ face.a ];\n\t\t\tface.b = changes[ face.b ];\n\t\t\tface.c = changes[ face.c ];\n\n\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\tvar dupIndex = - 1;\n\n\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t// we have to remove the face as nothing can be saved\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\tdupIndex = n;\n\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Use unique set of vertices\n\n\t\tvar diff = this.vertices.length - unique.length;\n\t\tthis.vertices = unique;\n\t\treturn diff;\n\n\t},\n\n\tsortFacesByMaterialIndex: function () {\n\n\t\tvar faces = this.faces;\n\t\tvar length = faces.length;\n\n\t\t// tag faces\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tfaces[ i ]._id = i;\n\n\t\t}\n\n\t\t// sort faces\n\n\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t}\n\n\t\tfaces.sort( materialIndexSort );\n\n\t\t// sort uvs\n\n\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\tvar newUvs1, newUvs2;\n\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar id = faces[ i ]._id;\n\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t}\n\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Geometry',\n\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Geometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tvar vertices = [];\n\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tvar faces = [];\n\t\tvar normals = [];\n\t\tvar normalsHash = {};\n\t\tvar colors = [];\n\t\tvar colorsHash = {};\n\t\tvar uvs = [];\n\t\tvar uvsHash = {};\n\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\n\t\t\tvar hasMaterial = true;\n\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\tvar faceType = 0;\n\n\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\tfaces.push( faceType );\n\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\tfaces.push( face.materialIndex );\n\n\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t}\n\n\t\tfunction getNormalIndex( normal ) {\n\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\treturn normalsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getColorIndex( color ) {\n\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\tcolors.push( color.getHex() );\n\n\t\t\treturn colorsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getUvIndex( uv ) {\n\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\treturn uvsHash[ hash ];\n\n\t\t}\n\n\t\tdata.data = {};\n\n\t\tdata.data.vertices = vertices;\n\t\tdata.data.normals = normals;\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\tdata.data.faces = faces;\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t// Handle primitives\n\n\t\tvar parameters = this.parameters;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tvalues.push( parameters[ key ] );\n\n\t\t\t}\n\n\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\tthis.constructor.apply( geometry, values );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\treturn new this.constructor().copy( this );\n\t\t*/\n\n\t\treturn new THREE.Geometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.vertices = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [ [] ];\n\n\t\tvar vertices = source.vertices;\n\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t}\n\n\t\tvar faces = source.faces;\n\n\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\nTHREE.GeometryIdCount = 0;\n\n// File:src/core/DirectGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.DirectGeometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'DirectGeometry';\n\n\tthis.indices = [];\n\tthis.vertices = [];\n\tthis.normals = [];\n\tthis.colors = [];\n\tthis.uvs = [];\n\tthis.uvs2 = [];\n\n\tthis.groups = [];\n\n\tthis.morphTargets = {};\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\t// this.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n};\n\nObject.assign( THREE.DirectGeometry.prototype, THREE.EventDispatcher.prototype, {\n\n\tcomputeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\n\tcomputeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\n\n\tcomputeFaceNormals: function () {\n\n\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\n\t},\n\n\tcomputeGroups: function ( geometry ) {\n\n\t\tvar group;\n\t\tvar groups = [];\n\t\tvar materialIndex;\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// materials\n\n\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t}\n\n\t\t\t\tgroup = {\n\t\t\t\t\tstart: i * 3,\n\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( group !== undefined ) {\n\n\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\tgroups.push( group );\n\n\t\t}\n\n\t\tthis.groups = groups;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tvar faces = geometry.faces;\n\t\tvar vertices = geometry.vertices;\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t// morphs\n\n\t\tvar morphTargets = geometry.morphTargets;\n\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\tvar morphTargetsPosition;\n\n\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\tmorphTargetsPosition = [];\n\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsPosition[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t}\n\n\t\tvar morphNormals = geometry.morphNormals;\n\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\tvar morphTargetsNormal;\n\n\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\tmorphTargetsNormal = [];\n\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsNormal[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t}\n\n\t\t// skins\n\n\t\tvar skinIndices = geometry.skinIndices;\n\t\tvar skinWeights = geometry.skinWeights;\n\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t//\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t}\n\n\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar color = face.color;\n\n\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\tthis.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\tthis.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morphs\n\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t}\n\n\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeGroups( geometry );\n\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n// File:src/core/BufferGeometry.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferGeometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'BufferGeometry';\n\n\tthis.index = null;\n\tthis.attributes = {};\n\n\tthis.morphAttributes = {};\n\n\tthis.groups = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\tthis.drawRange = { start: 0, count: Infinity };\n\n};\n\nObject.assign( THREE.BufferGeometry.prototype, THREE.EventDispatcher.prototype, {\n\n\tgetIndex: function () {\n\n\t\treturn this.index;\n\n\t},\n\n\tsetIndex: function ( index ) {\n\n\t\tthis.index = index;\n\n\t},\n\n\taddAttribute: function ( name, attribute ) {\n\n\t\tif ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\tthis.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( name === 'index' ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\tthis.setIndex( attribute );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t},\n\n\tgetAttribute: function ( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t},\n\n\tremoveAttribute: function ( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t},\n\n\taddGroup: function ( start, count, materialIndex ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t} );\n\n\t},\n\n\tclearGroups: function () {\n\n\t\tthis.groups = [];\n\n\t},\n\n\tsetDrawRange: function ( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tmatrix.applyToVector3Array( position.array );\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tvar normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormalMatrix.applyToVector3Array( normal.array );\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1;\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1;\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj;\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tvar offset = this.boundingBox.center().negate();\n\n\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\treturn offset;\n\n\t},\n\n\tsetFromObject: function ( object ) {\n\n\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object instanceof THREE.Points || object instanceof THREE.Line ) {\n\n\t\t\tvar positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );\n\t\t\tvar colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );\n\n\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\tvar lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t} else if ( object instanceof THREE.Mesh ) {\n\n\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tupdateFromObject: function ( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\tif ( direct === undefined || geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate || geometry.elementsNeedUpdate;\n\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate || geometry.elementsNeedUpdate;\n\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate || geometry.elementsNeedUpdate;\n\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate || geometry.elementsNeedUpdate;\n\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate || geometry.elementsNeedUpdate;\n\n\t\t\tgeometry.elementsNeedUpdate = false;\n\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\tgeometry = direct;\n\n\t\t}\n\n\t\tvar attribute;\n\n\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.position;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.normal;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\tattribute = this.attributes.color;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\tattribute = this.attributes.uv;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tgeometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );\n\n\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t},\n\n\tfromDirectGeometry: function ( geometry ) {\n\n\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t}\n\n\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\tthis.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\tthis.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t}\n\n\t\tif ( geometry.indices.length > 0 ) {\n\n\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n\t\t}\n\n\t\t// groups\n\n\t\tthis.groups = geometry.groups;\n\n\t\t// morphs\n\n\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\tvar array = [];\n\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\tvar attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );\n\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\t// skinning\n\n\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\tvar skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t}\n\n\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\tvar skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new THREE.Box3();\n\n\t\t}\n\n\t\tvar positions = this.attributes.position.array;\n\n\t\tif ( positions !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromArray( positions );\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tvar box = new THREE.Box3();\n\t\tvar vector = new THREE.Vector3();\n\n\t\treturn function computeBoundingSphere() {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new THREE.Sphere();\n\n\t\t\t}\n\n\t\t\tvar positions = this.attributes.position;\n\n\t\t\tif ( positions ) {\n\n\t\t\t\tvar array = positions.array;\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\tbox.setFromArray( array );\n\t\t\t\tbox.center( center );\n\n\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\n\t\t\t\t\tvector.fromArray( array, i );\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\tcomputeFaceNormals: function () {\n\n\t\t// backwards compatibility\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tvar index = this.index;\n\t\tvar attributes = this.attributes;\n\t\tvar groups = this.groups;\n\n\t\tif ( attributes.position ) {\n\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar normals = attributes.normal.array;\n\n\t\t\tvar vA, vB, vC,\n\n\t\t\tpA = new THREE.Vector3(),\n\t\t\tpB = new THREE.Vector3(),\n\t\t\tpC = new THREE.Vector3(),\n\n\t\t\tcb = new THREE.Vector3(),\n\t\t\tab = new THREE.Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tvar indices = index.array;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tthis.addGroup( 0, indices.length );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\t\t\tvar group = groups[ j ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t}\n\n\t},\n\n\tmerge: function ( geometry, offset ) {\n\n\t\tif ( geometry instanceof THREE.BufferGeometry === false ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\tvar attribute1 = attributes[ key ];\n\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tnormalizeNormals: function () {\n\n\t\tvar normals = this.attributes.normal.array;\n\n\t\tvar x, y, z, n;\n\n\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\n\t\t\tx = normals[ i ];\n\t\t\ty = normals[ i + 1 ];\n\t\t\tz = normals[ i + 2 ];\n\n\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tnormals[ i ] *= n;\n\t\t\tnormals[ i + 1 ] *= n;\n\t\t\tnormals[ i + 2 ] *= n;\n\n\t\t}\n\n\t},\n\n\ttoNonIndexed: function () {\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar geometry2 = new THREE.BufferGeometry();\n\n\t\tvar indices = this.index.array;\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tvar index = 0, index2 = 0;\n\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry2.addAttribute( name, new THREE.BufferAttribute( array2, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tdata.data = { attributes: {} };\n\n\t\tvar index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: array\n\t\t\t};\n\n\t\t}\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\n\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: attribute.normalized\n\t\t\t};\n\n\t\t}\n\n\t\tvar groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tvar boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t// Handle primitives\n\n\t\tvar parameters = this.parameters;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tvalues.push( parameters[ key ] );\n\n\t\t\t}\n\n\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\tthis.constructor.apply( geometry, values );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\treturn new this.constructor().copy( this );\n\t\t*/\n\n\t\treturn new THREE.BufferGeometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tvar index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone() );\n\n\t\t}\n\n\t\tvar attributes = source.attributes;\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t}\n\n\t\tvar groups = source.groups;\n\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tvar group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\nTHREE.BufferGeometry.MaxIndex = 65535;\n\n// File:src/core/InstancedBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedBufferGeometry = function () {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'InstancedBufferGeometry';\n\tthis.maxInstancedCount = undefined;\n\n};\n\nTHREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\n\nTHREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\n\tthis.groups.push( {\n\n\t\tstart: start,\n\t\tcount: count,\n\t\tinstances: instances\n\n\t} );\n\n};\n\nTHREE.InstancedBufferGeometry.prototype.copy = function ( source ) {\n\n\tvar index = source.index;\n\n\tif ( index !== null ) {\n\n\t\tthis.setIndex( index.clone() );\n\n\t}\n\n\tvar attributes = source.attributes;\n\n\tfor ( var name in attributes ) {\n\n\t\tvar attribute = attributes[ name ];\n\t\tthis.addAttribute( name, attribute.clone() );\n\n\t}\n\n\tvar groups = source.groups;\n\n\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\tvar group = groups[ i ];\n\t\tthis.addGroup( group.start, group.count, group.instances );\n\n\t}\n\n\treturn this;\n\n};\n\n// File:src/core/Uniform.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Uniform = function ( value ) {\n\n\tif ( typeof value === 'string' ) {\n\n\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\tvalue = arguments[ 1 ];\n\n\t}\n\n\tthis.value = value;\n\n\tthis.dynamic = false;\n\n};\n\nTHREE.Uniform.prototype = {\n\n\tconstructor: THREE.Uniform,\n\n\tonUpdate: function ( callback ) {\n\n\t\tthis.dynamic = true;\n\t\tthis.onUpdateCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/animation/AnimationAction.js\n\n/**\n *\n * Action provided by AnimationMixer for scheduling clip playback on specific\n * objects.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n *\n */\n\nTHREE.AnimationAction = function() {\n\n\tthrow new Error( \"THREE.AnimationAction: \" +\n\t\t\t\"Use mixer.clipAction for construction.\" );\n\n};\n\nTHREE.AnimationAction._new =\n\t\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\tthis._mixer = mixer;\n\tthis._clip = clip;\n\tthis._localRoot = localRoot || null;\n\n\tvar tracks = clip.tracks,\n\t\tnTracks = tracks.length,\n\t\tinterpolants = new Array( nTracks );\n\n\tvar interpolantSettings = {\n\t\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\n\t\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\n\t};\n\n\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\tinterpolants[ i ] = interpolant;\n\t\tinterpolant.settings = interpolantSettings;\n\n\t}\n\n\tthis._interpolantSettings = interpolantSettings;\n\n\tthis._interpolants = interpolants;\t// bound by the mixer\n\n\t// inside: PropertyMixer (managed by the mixer)\n\tthis._propertyBindings = new Array( nTracks );\n\n\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n\tthis._timeScaleInterpolant = null;\n\tthis._weightInterpolant = null;\n\n\tthis.loop = THREE.LoopRepeat;\n\tthis._loopCount = -1;\n\n\t// global mixer time when the action is to be started\n\t// it's set back to 'null' upon start of the action\n\tthis._startTime = null;\n\n\t// scaled local time of the action\n\t// gets clamped or wrapped to 0..clip.duration according to loop\n\tthis.time = 0;\n\n\tthis.timeScale = 1;\n\tthis._effectiveTimeScale = 1;\n\n\tthis.weight = 1;\n\tthis._effectiveWeight = 1;\n\n\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n\tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n\tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\n\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n};\n\nTHREE.AnimationAction._new.prototype = {\n\n\tconstructor: THREE.AnimationAction._new,\n\n\t// State & Scheduling\n\n\tplay: function() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t},\n\n\tstop: function() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t},\n\n\treset: function() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0;\t\t\t// restart clip\n\t\tthis._loopCount = -1;\t// forget previous loops\n\t\tthis._startTime = null;\t// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t},\n\n\tisRunning: function() {\n\n\t\tvar start = this._startTime;\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t},\n\n\t// return true when play has been called\n\tisScheduled: function() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t},\n\n\tstartAt: function( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t},\n\n\tsetLoop: function( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t},\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight: function( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t},\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight: function() {\n\n\t\treturn this._effectiveWeight;\n\n\t},\n\n\tfadeIn: function( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t},\n\n\tfadeOut: function( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t},\n\n\tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\n\t\tvar mixer = this._mixer;\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif( warp ) {\n\n\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t},\n\n\tstopFading: function() {\n\n\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Time Scale Control\n\n\t// set the weight stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale: function( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale: function() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t},\n\n\tsetDuration: function( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\tsyncWith: function( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\thalt: function( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t},\n\n\twarp: function( startTimeScale, endTimeScale, duration ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t},\n\n\tstopWarping: function() {\n\n\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Object Accessors\n\n\tgetMixer: function() {\n\n\t\treturn this._mixer;\n\n\t},\n\n\tgetClip: function() {\n\n\t\treturn this._clip;\n\n\t},\n\n\tgetRoot: function() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t},\n\n\t// Interna\n\n\t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n\t\t// called by the mixer\n\n\t\tvar startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t}\n\n\t\t\t// start\n\n\t\t\tthis._startTime = null; // unschedule\n\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tvar weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tvar interpolants = this._interpolants;\n\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_updateWeight: function( time ) {\n\n\t\tvar weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t},\n\n\t_updateTimeScale: function( time ) {\n\n\t\tvar timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t},\n\n\t_updateTime: function( deltaTime ) {\n\n\t\tvar time = this.time + deltaTime;\n\n\t\tif ( deltaTime === 0 ) return time;\n\n\t\tvar duration = this._clip.duration,\n\n\t\t\tloop = this.loop,\n\t\t\tloopCount = this._loopCount;\n\n\t\tif ( loop === THREE.LoopOnce ) {\n\n\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t// just started\n\n\t\t\t\tthis.loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else break handle_stop;\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tvar pingPong = ( loop === THREE.LoopPingPong );\n\n\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\t\t\t\t// wrap around\n\n\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending < 0 ) {\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 0 ) {\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\tthis.time = time;\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.time = time;\n\t\treturn time;\n\n\t},\n\n\t_setEndings: function( atStart, atEnd, pingPong ) {\n\n\t\tvar settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart \t= THREE.ZeroSlopeEnding;\n\t\t\tsettings.endingEnd\t\t= THREE.ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = THREE.WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = THREE.WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_scheduleFading: function( duration, weightNow, weightThen ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n};\n\n\n// File:src/animation/AnimationClip.js\n\n/**\n *\n * Reusable set of Tracks that represent an animation.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.AnimationClip = function ( name, duration, tracks ) {\n\n\tthis.name = name;\n\tthis.tracks = tracks;\n\tthis.duration = ( duration !== undefined ) ? duration : -1;\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\t// this means it should figure out its duration by scanning the tracks\n\tif ( this.duration < 0 ) {\n\n\t\tthis.resetDuration();\n\n\t}\n\n\t// maybe only do these on demand, as doing them here could potentially slow down loading\n\t// but leaving these here during development as this ensures a lot of testing of these functions\n\tthis.trim();\n\tthis.optimize();\n\n};\n\nTHREE.AnimationClip.prototype = {\n\n\tconstructor: THREE.AnimationClip,\n\n\tresetDuration: function() {\n\n\t\tvar tracks = this.tracks,\n\t\t\tduration = 0;\n\n\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tvar track = this.tracks[ i ];\n\n\t\t\tduration = Math.max(\n\t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t},\n\n\ttrim: function() {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\toptimize: function() {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\n// Static methods:\n\nObject.assign( THREE.AnimationClip, {\n\n\tparse: function( json ) {\n\n\t\tvar tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( THREE.KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\treturn new THREE.AnimationClip( json.name, json.duration, tracks );\n\n\t},\n\n\n\ttoJSON: function( clip ) {\n\n\t\tvar tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tvar json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks\n\n\t\t};\n\n\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( THREE.KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t},\n\n\n\tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\tvar tracks = [];\n\n\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tvar times = [];\n\t\t\tvar values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tvar order = THREE.AnimationUtils.getKeyframeOrder( times );\n\t\t\ttimes = THREE.AnimationUtils.sortedArray( times, 1, order );\n\t\t\tvalues = THREE.AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\t\tnew THREE.NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\t\t}\n\n\t\treturn new THREE.AnimationClip( name, -1, tracks );\n\n\t},\n\n\tfindByName: function( objectOrClipArray, name ) {\n\n\t\tvar clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tvar o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\n\t\tvar animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar clips = [];\n\n\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\tclips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t},\n\n\t// parse the animation.hierarchy format\n\tparseAnimation: function( animation, bones, nodeName ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar addNonemptyTrack = function(\n\t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tTHREE.AnimationUtils.flattenJSON(\n\t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tvar tracks = [];\n\n\t\tvar clipName = animation.name || 'default';\n\t\t// automatic length determination in AnimationClip.\n\t\tvar duration = animation.length || -1;\n\t\tvar fps = animation.fps || 30;\n\n\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets in a way exactly compatible\n\t\t\t// with AnimationHandler.init( animation )\n\t\t\tif ( animationKeys[0].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tvar morphTargetNames = {};\n\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\n\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tfor ( var m = 0;\n\t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tvar animationKey = animationKeys[k];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new THREE.NumberKeyframeTrack(\n\t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t} else {\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tTHREE.QuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar clip = new THREE.AnimationClip( clipName, duration, tracks );\n\n\t\treturn clip;\n\n\t}\n\n} );\n\n// File:src/animation/AnimationMixer.js\n\n/**\n *\n * Player for AnimationClips.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.AnimationMixer = function( root ) {\n\n\tthis._root = root;\n\tthis._initMemoryManager();\n\tthis._accuIndex = 0;\n\n\tthis.time = 0;\n\n\tthis.timeScale = 1.0;\n\n};\n\nObject.assign( THREE.AnimationMixer.prototype, THREE.EventDispatcher.prototype, {\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction: function( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\tprototypeAction = null;\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tvar existingAction =\n\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tvar newAction = new THREE.\n\t\t\t\tAnimationMixer._Action( this, clipObject, optionalRoot );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t},\n\n\t// get an existing action\n\texistingAction: function( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction: function() {\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tthis._nActiveActions = 0;\n\t\tthis._nActiveBindings = 0;\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tactions[ i ].reset();\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].useCount = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// advance the time and update apply the animation\n\tupdate: function( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tvar action = actions[ i ];\n\n\t\t\tif ( action.enabled ) {\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tvar bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// return this mixer's root target object\n\tgetRoot: function() {\n\n\t\treturn this._root;\n\n\t},\n\n\t// free all resources specific to a particular clip\n\tuncacheClip: function( clip ) {\n\n\t\tvar actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t},\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot: function( root ) {\n\n\t\tvar rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remove a targeted clip from the cache\n\tuncacheAction: function( clip, optionalRoot ) {\n\n\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n} );\n\nTHREE.AnimationMixer._Action = THREE.AnimationAction._new;\n\n// Implementation details:\n\nObject.assign( THREE.AnimationMixer.prototype, {\n\n\t_bindAction: function( action, prototypeAction ) {\n\n\t\tvar root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar track = tracks[ i ],\n\t\t\t\ttrackName = track.name,\n\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new THREE.PropertyMixer(\n\t\t\t\t\t\tTHREE.PropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t},\n\n\t_activateAction: function( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t},\n\n\t_deactivateAction: function( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t},\n\n\t// Memory manager\n\n\t_initMemoryManager: function() {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \t\tknownActions: Array< _Action >\t- used as prototypes\n\t\t// \t\tactionByRoot: _Action\t\t\t- lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() { return scope._actions.length; },\n\t\t\t\tget inUse() { return scope._nActiveActions; }\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() { return scope._bindings.length; },\n\t\t\t\tget inUse() { return scope._nActiveBindings; }\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() { return scope._controlInterpolants.length; },\n\t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n\t\t\t}\n\n\t\t};\n\n\t},\n\n\t// Memory management for _Action objects\n\n\t_isActiveAction: function( action ) {\n\n\t\tvar index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t},\n\n\t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\n\t\tvar actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t},\n\n\t_removeInactiveAction: function( action ) {\n\n\t\tvar actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tvar clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t},\n\n\t_removeInactiveBindingsForAction: function( action ) {\n\n\t\tvar bindings = action._propertyBindings;\n\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tvar binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_lendAction: function( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t},\n\n\t_takeBackAction: function( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t},\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tbindings = this._bindings;\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t},\n\n\t_removeInactiveBinding: function( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tremove_empty_map: {\n\n\t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t},\n\n\t_lendBinding: function( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t},\n\n\t_takeBackBinding: function( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t},\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant: function() {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new THREE.LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t},\n\n\t_takeBackControlInterpolant: function( interpolant ) {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t},\n\n\t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\n} );\n\n// File:src/animation/AnimationObjectGroup.js\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n * \t-\tAdd objects you would otherwise pass as 'root' to the\n * \t\tconstructor or the .clipAction method of AnimationMixer.\n *\n * \t-\tInstead pass this object as 'root'.\n *\n * \t-\tYou can also add and remove objects later when the mixer\n * \t\tis running.\n *\n * Note:\n *\n *  \tObjects of this class appear as one object to the mixer,\n *  \tso cache control of the individual objects must be done\n *  \ton the group.\n *\n * Limitation:\n *\n * \t- \tThe animated properties must be compatible among the\n * \t\tall objects in the group.\n *\n *  -\tA single property can either be controlled through a\n *  \ttarget group or directly, but not both.\n *\n * @author tschw\n */\n\nTHREE.AnimationObjectGroup = function( var_args ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\t// cached objects followed by the active ones\n\tthis._objects = Array.prototype.slice.call( arguments );\n\n\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t// note: read by PropertyBinding.Composite\n\n\tvar indices = {};\n\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t}\n\n\tthis._paths = [];\t\t\t\t\t// inside: string\n\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n\tvar scope = this;\n\n\tthis.stats = {\n\n\t\tobjects: {\n\t\t\tget total() { return scope._objects.length; },\n\t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n\t\t},\n\n\t\tget bindingsPerObject() { return scope._bindings.length; }\n\n\t};\n\n};\n\nTHREE.AnimationObjectGroup.prototype = {\n\n\tconstructor: THREE.AnimationObjectGroup,\n\n\tadd: function( var_args ) {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push(\n\t\t\t\t\t\t\tnew THREE.PropertyBinding(\n\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tvar knownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new THREE.PropertyBinding(\n\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject) {\n\n\t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n\t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n\t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\tremove: function( var_args ) {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// remove & forget\n\tuncache: function( var_args ) {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_: function( path, parsedPath ) {\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ],\n\t\t\tbindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tvar paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( var i = nCachedObjects,\n\t\t\t\tn = objects.length; i !== n; ++ i ) {\n\n\t\t\tvar object = objects[ i ];\n\n\t\t\tbindingsForPath[ i ] =\n\t\t\t\t\tnew THREE.PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t},\n\n\tunsubscribe_: function( path ) {\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n};\n\n\n// File:src/animation/AnimationUtils.js\n\n/**\n * @author tschw\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.AnimationUtils = {\n\n\t// same as Array.prototype.slice, but also works on typed arrays\n\tarraySlice: function( array, from, to ) {\n\n\t\tif ( THREE.AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\treturn new array.constructor( array.subarray( from, to ) );\n\n\t\t}\n\n\t\treturn array.slice( from, to );\n\n\t},\n\n\t// converts an array to a specific type\n\tconvertArray: function( array, type, forceClone ) {\n\n\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\treturn new type( array ); // create typed array\n\n\t\t}\n\n\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t},\n\n\tisTypedArray: function( object ) {\n\n\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t},\n\n\t// returns an array by which times and values can be sorted\n\tgetKeyframeOrder: function( times ) {\n\n\t\tfunction compareTime( i, j ) {\n\n\t\t\treturn times[ i ] - times[ j ];\n\n\t\t}\n\n\t\tvar n = times.length;\n\t\tvar result = new Array( n );\n\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\tresult.sort( compareTime );\n\n\t\treturn result;\n\n\t},\n\n\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\tsortedArray: function( values, stride, order ) {\n\n\t\tvar nValues = values.length;\n\t\tvar result = new values.constructor( nValues );\n\n\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// function for parsing AOS keyframe formats\n\tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\n\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t}\n\n\t\tif ( key === undefined ) return; // no data\n\n\t\tvar value = key[ valuePropertyName ];\n\t\tif ( value === undefined ) return; // no data\n\n\t\tif ( Array.isArray( value ) ) {\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else if ( value.toArray !== undefined ) {\n\t\t\t// ...assume THREE.Math-ish\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else {\n\t\t\t// otherwise push as-is\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/animation/KeyframeTrack.js\n\n/**\n *\n * A timed sequence of keyframes for a specific property.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.KeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\n\tif( times === undefined || times.length === 0 ) {\n\n\t\tthrow new Error( \"no keyframes in track named \" + name );\n\n\t}\n\n\tthis.name = name;\n\n\tthis.times = THREE.AnimationUtils.convertArray( times, this.TimeBufferType );\n\tthis.values = THREE.AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\tthis.validate();\n\tthis.optimize();\n\n};\n\nTHREE.KeyframeTrack.prototype = {\n\n\tconstructor: THREE.KeyframeTrack,\n\n\tTimeBufferType: Float32Array,\n\tValueBufferType: Float32Array,\n\n\tDefaultInterpolation: THREE.InterpolateLinear,\n\n\tInterpolantFactoryMethodDiscrete: function( result ) {\n\n\t\treturn new THREE.DiscreteInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodLinear: function( result ) {\n\n\t\treturn new THREE.LinearInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: function( result ) {\n\n\t\treturn new THREE.CubicInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tsetInterpolation: function( interpolation ) {\n\n\t\tvar factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase THREE.InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( message );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t},\n\n\tgetInterpolation: function() {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn THREE.InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn THREE.InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn THREE.InterpolateSmooth;\n\n\t\t}\n\n\t},\n\n\tgetValueSize: function() {\n\n\t\treturn this.values.length / this.times.length;\n\n\t},\n\n\t// move all keyframes either forwards or backwards in time\n\tshift: function( timeOffset ) {\n\n\t\tif( timeOffset !== 0.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale: function( timeScale ) {\n\n\t\tif( timeScale !== 1.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim: function( startTime, endTime ) {\n\n\t\tvar times = this.times,\n\t\t\tnKeys = times.length,\n\t\t\tfrom = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\n\t\t\tvar stride = this.getValueSize();\n\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, from, to );\n\t\t\tthis.values = THREE.AnimationUtils.\n\t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate: function() {\n\n\t\tvar valid = true;\n\n\t\tvar valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( \"invalid value size in track\", this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif( nKeys === 0 ) {\n\n\t\t\tconsole.error( \"track is empty\", this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar prevTime = null;\n\n\t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tvar currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( THREE.AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t},\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize: function() {\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\t\t\tstride = this.getValueSize(),\n\n\t\t\twriteIndex = 1;\n\n\t\tfor( var i = 1, n = times.length - 1; i <= n; ++ i ) {\n\n\t\t\tvar keep = false;\n\n\t\t\tvar time = times[ i ];\n\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\tvar offset = i * stride,\n\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\tthis.values = THREE.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\n// Static methods:\n\nObject.assign( THREE.KeyframeTrack, {\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tparse: function( json ) {\n\n\t\tif( json.type === undefined ) {\n\n\t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\n\t\t}\n\n\t\tvar trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tTHREE.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we asssume a constructor compatible with the base\n\t\t\treturn new trackType(\n\t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function( track ) {\n\n\t\tvar trackType = track.constructor;\n\n\t\tvar json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': THREE.AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t'values': THREE.AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t},\n\n\t_getTrackTypeForValueTypeName: function( typeName ) {\n\n\t\tswitch( typeName.toLowerCase() ) {\n\n\t\t\tcase \"scalar\":\n\t\t\tcase \"double\":\n\t\t\tcase \"float\":\n\t\t\tcase \"number\":\n\t\t\tcase \"integer\":\n\n\t\t\t\treturn THREE.NumberKeyframeTrack;\n\n\t\t\tcase \"vector\":\n\t\t\tcase \"vector2\":\n\t\t\tcase \"vector3\":\n\t\t\tcase \"vector4\":\n\n\t\t\t\treturn THREE.VectorKeyframeTrack;\n\n\t\t\tcase \"color\":\n\n\t\t\t\treturn THREE.ColorKeyframeTrack;\n\n\t\t\tcase \"quaternion\":\n\n\t\t\t\treturn THREE.QuaternionKeyframeTrack;\n\n\t\t\tcase \"bool\":\n\t\t\tcase \"boolean\":\n\n\t\t\t\treturn THREE.BooleanKeyframeTrack;\n\n\t\t\tcase \"string\":\n\n\t\t\t\treturn THREE.StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\n\t}\n\n} );\n\n// File:src/animation/PropertyBinding.js\n\n/**\n *\n * A reference to a real property in the scene graph.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.PropertyBinding = function ( rootNode, path, parsedPath ) {\n\n\tthis.path = path;\n\tthis.parsedPath = parsedPath ||\n\t\t\tTHREE.PropertyBinding.parseTrackName( path );\n\n\tthis.node = THREE.PropertyBinding.findNode(\n\t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\n\tthis.rootNode = rootNode;\n\n};\n\nTHREE.PropertyBinding.prototype = {\n\n\tconstructor: THREE.PropertyBinding,\n\n\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t// prototype version of these methods with one that represents\n\t\t// the bound state. When the property is not found, the methods\n\t\t// become no-ops.\n\n\t},\n\n\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t},\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind: function() {\n\n\t\tvar targetObject = this.node,\n\t\t\tparsedPath = this.parsedPath,\n\n\t\t\tobjectName = parsedPath.objectName,\n\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = THREE.PropertyBinding.findNode(\n\t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n \t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n\t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tvar versioning = this.Versioning.None;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tvar bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( nodeProperty.length !== undefined ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t},\n\n\tunbind: function() {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n};\n\nObject.assign( THREE.PropertyBinding.prototype, { // prototype, continued\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable: function() {},\n\t_setValue_unavailable: function() {},\n\n\t// initial state of these methods that calls 'bind'\n\t_getValue_unbound: THREE.PropertyBinding.prototype.getValue,\n\t_setValue_unbound: THREE.PropertyBinding.prototype.setValue,\n\n\tBindingType: {\n\t\tDirect: 0,\n\t\tEntireArray: 1,\n\t\tArrayElement: 2,\n\t\tHasFromToArray: 3\n\t},\n\n\tVersioning: {\n\t\tNone: 0,\n\t\tNeedsUpdate: 1,\n\t\tMatrixWorldNeedsUpdate: 2\n\t},\n\n\tGetterByBindingType: [\n\n\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t},\n\n\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\tvar source = this.resolvedProperty;\n\n\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t}\n\n\t\t},\n\n\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t},\n\n\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t}\n\n\t],\n\n\tSetterByBindingTypeAndVersioning: [\n\n\t\t[\n\t\t\t// Direct\n\n\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// EntireArray\n\n\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// ArrayElement\n\n\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// HasToFromArray\n\n\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t]\n\n\t]\n\n} );\n\nTHREE.PropertyBinding.Composite =\n\t\tfunction( targetGroup, path, optionalParsedPath ) {\n\n\tvar parsedPath = optionalParsedPath ||\n\t\t\tTHREE.PropertyBinding.parseTrackName( path );\n\n\tthis._targetGroup = targetGroup;\n\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n};\n\nTHREE.PropertyBinding.Composite.prototype = {\n\n\tconstructor: THREE.PropertyBinding.Composite,\n\n\tgetValue: function( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t},\n\n\tsetValue: function( array, offset ) {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t},\n\n\tbind: function() {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t},\n\n\tunbind: function() {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.PropertyBinding.create = function( root, path, parsedPath ) {\n\n\tif ( ! ( root instanceof THREE.AnimationObjectGroup ) ) {\n\n\t\treturn new THREE.PropertyBinding( root, path, parsedPath );\n\n\t} else {\n\n\t\treturn new THREE.PropertyBinding.Composite( root, path, parsedPath );\n\n\t}\n\n};\n\nTHREE.PropertyBinding.parseTrackName = function( trackName ) {\n\n\t// matches strings in the form of:\n\t//    nodeName.property\n\t//    nodeName.property[accessor]\n\t//    nodeName.material.property[accessor]\n\t//    uuid.property[accessor]\n\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t//    parentName/nodeName.property\n\t//    parentName/parentName/nodeName.property[index]\n\t//\t  .bone[Armature.DEF_cog].position\n\t// created and tested via https://regex101.com/#javascript\n\n\tvar re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_.:\\- ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\n\tvar matches = re.exec( trackName );\n\n\tif ( ! matches ) {\n\n\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\n\t}\n\n\tif ( matches.index === re.lastIndex ) {\n\n\t\tre.lastIndex++;\n\n\t}\n\n\tvar results = {\n\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\tnodeName: matches[ 3 ], \t// allowed to be null, specified root node.\n\t\tobjectName: matches[ 5 ],\n\t\tobjectIndex: matches[ 7 ],\n\t\tpropertyName: matches[ 9 ],\n\t\tpropertyIndex: matches[ 11 ]\t// allowed to be null, specifies that the whole property is set.\n\t};\n\n\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\n\t}\n\n\treturn results;\n\n};\n\nTHREE.PropertyBinding.findNode = function( root, nodeName ) {\n\n\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\treturn root;\n\n\t}\n\n\t// search into skeleton bones.\n\tif ( root.skeleton ) {\n\n\t\tvar searchSkeleton = function( skeleton ) {\n\n\t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n\t\t\t\tvar bone = skeleton.bones[ i ];\n\n\t\t\t\tif ( bone.name === nodeName ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t\tvar bone = searchSkeleton( root.skeleton );\n\n\t\tif ( bone ) {\n\n\t\t\treturn bone;\n\n\t\t}\n\t}\n\n\t// search into node subtree.\n\tif ( root.children ) {\n\n\t\tvar searchNodeSubtree = function( children ) {\n\n\t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\treturn childNode;\n\n\t\t\t\t}\n\n\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\tif ( result ) return result;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\tif ( subTreeNode ) {\n\n\t\t\treturn subTreeNode;\n\n\t\t}\n\n\t}\n\n\treturn null;\n\n};\n\n// File:src/animation/PropertyMixer.js\n\n/**\n *\n * Buffered scene graph property that allows weighted accumulation.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.PropertyMixer = function ( binding, typeName, valueSize ) {\n\n\tthis.binding = binding;\n\tthis.valueSize = valueSize;\n\n\tvar bufferType = Float64Array,\n\t\tmixFunction;\n\n\tswitch ( typeName ) {\n\n\t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\n\t\tcase 'string':\n\t\tcase 'bool':\n\n\t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\n\t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\n\t}\n\n\tthis.buffer = new bufferType( valueSize * 4 );\n\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t//\n\t// interpolators can use .buffer as their .result\n\t// the data then goes to 'incoming'\n\t//\n\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t// the cumulative result and are compared to detect\n\t// changes\n\t//\n\t// 'orig' stores the original state of the property\n\n\tthis._mixBufferRegion = mixFunction;\n\n\tthis.cumulativeWeight = 0;\n\n\tthis.useCount = 0;\n\tthis.referenceCount = 0;\n\n};\n\nTHREE.PropertyMixer.prototype = {\n\n\tconstructor: THREE.PropertyMixer,\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate: function( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tvar mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t},\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply: function( accuIndex ) {\n\n\t\tvar stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState: function() {\n\n\t\tvar binding = this.binding;\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * 3;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\tthis.cumulativeWeight = 0;\n\n\t},\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState: function() {\n\n\t\tvar originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t},\n\n\n\t// mix functions\n\n\t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tTHREE.Quaternion.slerpFlat( buffer, dstOffset,\n\t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\n\t},\n\n\t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tvar s = 1 - t;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tvar j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/animation/tracks/BooleanKeyframeTrack.js\n\n/**\n *\n * A Track of Boolean keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.BooleanKeyframeTrack = function ( name, times, values ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values );\n\n};\n\nTHREE.BooleanKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.BooleanKeyframeTrack,\n\n\tValueTypeName: 'bool',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: THREE.InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\tInterpolantFactoryMethodSmooth: undefined\n\n\t// Note: Actually this track could have a optimized / compressed\n\t// representation of a single value and a custom interpolant that\n\t// computes \"firstValue ^ isOdd( index )\".\n\n} );\n\n// File:src/animation/tracks/ColorKeyframeTrack.js\n\n/**\n *\n * A Track of keyframe values that represent color.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.ColorKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.ColorKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.ColorKeyframeTrack,\n\n\tValueTypeName: 'color'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n\n\t// Note: Very basic implementation and nothing special yet.\n\t// However, this is the place for color space parameterization.\n\n} );\n\n// File:src/animation/tracks/NumberKeyframeTrack.js\n\n/**\n *\n * A Track of numeric keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.NumberKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.NumberKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.NumberKeyframeTrack,\n\n\tValueTypeName: 'number',\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n// File:src/animation/tracks/QuaternionKeyframeTrack.js\n\n/**\n *\n * A Track of quaternion keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.QuaternionKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.QuaternionKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.QuaternionKeyframeTrack,\n\n\tValueTypeName: 'quaternion',\n\n\t// ValueBufferType is inherited\n\n\tDefaultInterpolation: THREE.InterpolateLinear,\n\n\tInterpolantFactoryMethodLinear: function( result ) {\n\n\t\treturn new THREE.QuaternionLinearInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n} );\n\n// File:src/animation/tracks/StringKeyframeTrack.js\n\n/**\n *\n * A Track that interpolates Strings\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.StringKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.StringKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.StringKeyframeTrack,\n\n\tValueTypeName: 'string',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: THREE.InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\n\tInterpolantFactoryMethodSmooth: undefined\n\n} );\n\n// File:src/animation/tracks/VectorKeyframeTrack.js\n\n/**\n *\n * A Track of vectored keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.VectorKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.VectorKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.VectorKeyframeTrack,\n\n\tValueTypeName: 'vector'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n// File:src/audio/Audio.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nTHREE.Audio = function ( listener ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Audio';\n\n\tthis.context = listener.context;\n\tthis.source = this.context.createBufferSource();\n\tthis.source.onended = this.onEnded.bind( this );\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( listener.getInput() );\n\n\tthis.autoplay = false;\n\n\tthis.startTime = 0;\n\tthis.playbackRate = 1;\n\tthis.isPlaying = false;\n\tthis.hasPlaybackControl = true;\n\tthis.sourceType = 'empty';\n\n\tthis.filters = [];\n\n};\n\nTHREE.Audio.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Audio,\n\n\tgetOutput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tsetNodeSource: function ( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t},\n\n\tsetBuffer: function ( audioBuffer ) {\n\n\t\tthis.source.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t},\n\n\tplay: function () {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar source = this.context.createBufferSource();\n\n\t\tsource.buffer = this.source.buffer;\n\t\tsource.loop = this.source.loop;\n\t\tsource.onended = this.source.onended;\n\t\tsource.start( 0, this.startTime );\n\t\tsource.playbackRate.value = this.playbackRate;\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\treturn this.connect();\n\n\t},\n\n\tpause: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.stop();\n\t\tthis.startTime = this.context.currentTime;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t},\n\n\tstop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.stop();\n\t\tthis.startTime = 0;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t},\n\n\tconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdisconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilters: function () {\n\n\t\treturn this.filters;\n\n\t},\n\n\tsetFilters: function ( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value;\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t},\n\n\tsetFilter: function ( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t},\n\n\tsetPlaybackRate: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.value = this.playbackRate;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetPlaybackRate: function () {\n\n\t\treturn this.playbackRate;\n\n\t},\n\n\tonEnded: function () {\n\n\t\tthis.isPlaying = false;\n\n\t},\n\n\tgetLoop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.source.loop;\n\n\t},\n\n\tsetLoop: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.loop = value;\n\n\t},\n\n\tgetVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\n\tsetVolume: function ( value ) {\n\n\t\tthis.gain.gain.value = value;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/audio/AudioAnalyser.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AudioAnalyser = function ( audio, fftSize ) {\n\n\tthis.analyser = audio.context.createAnalyser();\n\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\taudio.getOutput().connect( this.analyser );\n\n};\n\nObject.assign( THREE.AudioAnalyser.prototype, {\n\n\tgetFrequencyData: function () {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t},\n\n\tgetAverageFrequency: function () {\n\n\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n} );\n\n// File:src/audio/AudioContext.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nObject.defineProperty( THREE, 'AudioContext', {\n\n\tget: ( function () {\n\n\t\tvar context;\n\n\t\treturn function get() {\n\n\t\t\tif ( context === undefined ) {\n\n\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn context;\n\n\t\t};\n\n\t} )()\n\n} );\n\n// File:src/audio/PositionalAudio.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.PositionalAudio = function ( listener ) {\n\n\tTHREE.Audio.call( this, listener );\n\n\tthis.panner = this.context.createPanner();\n\tthis.panner.connect( this.gain );\n\n};\n\nTHREE.PositionalAudio.prototype = Object.assign( Object.create( THREE.Audio.prototype ), {\n\n\tconstructor: THREE.PositionalAudio,\n\n\tgetOutput: function () {\n\n\t\treturn this.panner;\n\n\t},\n\n\tgetRefDistance: function () {\n\n\t\treturn this.panner.refDistance;\n\n\t},\n\n\tsetRefDistance: function ( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t},\n\n\tgetRolloffFactor: function () {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t},\n\n\tsetRolloffFactor: function ( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t},\n\n\tgetDistanceModel: function () {\n\n\t\treturn this.panner.distanceModel;\n\n\t},\n\n\tsetDistanceModel: function ( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t},\n\n\tgetMaxDistance: function () {\n\n\t\treturn this.panner.maxDistance;\n\n\t},\n\n\tsetMaxDistance: function ( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t},\n\n\tupdateMatrixWorld: ( function () {\n\n\t\tvar position = new THREE.Vector3();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t};\n\n\t} )()\n\n\n} );\n\n// File:src/audio/AudioListener.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AudioListener = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'AudioListener';\n\n\tthis.context = THREE.AudioContext;\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( this.context.destination );\n\n\tthis.filter = null;\n\n};\n\nTHREE.AudioListener.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.AudioListener,\n\n\tgetInput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tremoveFilter: function ( ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.filter;\n\n\t},\n\n\tsetFilter: function ( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t},\n\n\tgetMasterVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\tsetMasterVolume: function ( value ) {\n\n\t\tthis.gain.gain.value = value;\n\n\t},\n\n\tupdateMatrixWorld: ( function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar scale = new THREE.Vector3();\n\n\t\tvar orientation = new THREE.Vector3();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t\t};\n\n\t} )()\n\n} );\n\n// File:src/cameras/Camera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.Camera = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Camera';\n\n\tthis.matrixWorldInverse = new THREE.Matrix4();\n\tthis.projectionMatrix = new THREE.Matrix4();\n\n};\n\nTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Camera.prototype.constructor = THREE.Camera;\n\nTHREE.Camera.prototype.getWorldDirection = function () {\n\n\tvar quaternion = new THREE.Quaternion();\n\n\treturn function getWorldDirection( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tthis.getWorldQuaternion( quaternion );\n\n\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t};\n\n}();\n\nTHREE.Camera.prototype.lookAt = function () {\n\n\t// This routine does not support cameras with rotated and/or translated parent(s)\n\n\tvar m1 = new THREE.Matrix4();\n\n\treturn function lookAt( vector ) {\n\n\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t};\n\n}();\n\nTHREE.Camera.prototype.clone = function () {\n\n\treturn new this.constructor().copy( this );\n\n};\n\nTHREE.Camera.prototype.copy = function ( source ) {\n\n\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\tthis.projectionMatrix.copy( source.projectionMatrix );\n\n\treturn this;\n\n};\n\n// File:src/cameras/CubeCamera.js\n\n/**\n * Camera for rendering cube maps\n *\t- renders scene into axis-aligned cube\n *\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.CubeCamera = function ( near, far, cubeResolution ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'CubeCamera';\n\n\tvar fov = 90, aspect = 1;\n\n\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPX.up.set( 0, - 1, 0 );\n\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\n\tthis.add( cameraPX );\n\n\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNX.up.set( 0, - 1, 0 );\n\tcameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );\n\tthis.add( cameraNX );\n\n\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPY.up.set( 0, 0, 1 );\n\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\n\tthis.add( cameraPY );\n\n\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNY.up.set( 0, 0, - 1 );\n\tcameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );\n\tthis.add( cameraNY );\n\n\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPZ.up.set( 0, - 1, 0 );\n\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\n\tthis.add( cameraPZ );\n\n\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNZ.up.set( 0, - 1, 0 );\n\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );\n\tthis.add( cameraNZ );\n\n\tvar options = { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter };\n\n\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\n\tthis.updateCubeMap = function ( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tvar renderTarget = this.renderTarget;\n\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderTarget.activeCubeFace = 0;\n\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 1;\n\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 2;\n\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 3;\n\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 4;\n\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderTarget.activeCubeFace = 5;\n\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\trenderer.setRenderTarget( null );\n\n\t};\n\n};\n\nTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.CubeCamera.prototype.constructor = THREE.CubeCamera;\n\n// File:src/cameras/OrthographicCamera.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author arose / http://github.com/arose\n */\n\nTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\n\n\tTHREE.Camera.call( this );\n\n\tthis.type = 'OrthographicCamera';\n\n\tthis.zoom = 1;\n\tthis.view = null;\n\n\tthis.left = left;\n\tthis.right = right;\n\tthis.top = top;\n\tthis.bottom = bottom;\n\n\tthis.near = ( near !== undefined ) ? near : 0.1;\n\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\tthis.updateProjectionMatrix();\n\n};\n\nTHREE.OrthographicCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\n\n\tconstructor: THREE.OrthographicCamera,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Camera.prototype.copy.call( this, source );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t},\n\n\tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.view = {\n\t\t\tfullWidth: fullWidth,\n\t\t\tfullHeight: fullHeight,\n\t\t\toffsetX: x,\n\t\t\toffsetY: y,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function() {\n\n\t\tthis.view = null;\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tvar cx = ( this.right + this.left ) / 2;\n\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\tvar left = cx - dx;\n\t\tvar right = cx + dx;\n\t\tvar top = cy + dy;\n\t\tvar bottom = cy - dy;\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/cameras/PerspectiveCamera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author greggman / http://games.greggman.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author tschw\n */\n\nTHREE.PerspectiveCamera = function ( fov, aspect, near, far ) {\n\n\tTHREE.Camera.call( this );\n\n\tthis.type = 'PerspectiveCamera';\n\n\tthis.fov = fov !== undefined ? fov : 50;\n\tthis.zoom = 1;\n\n\tthis.near = near !== undefined ? near : 0.1;\n\tthis.far = far !== undefined ? far : 2000;\n\tthis.focus = 10;\n\n\tthis.aspect = aspect !== undefined ? aspect : 1;\n\tthis.view = null;\n\n\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\tthis.updateProjectionMatrix();\n\n};\n\nTHREE.PerspectiveCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\n\n\tconstructor: THREE.PerspectiveCamera,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Camera.prototype.copy.call( this, source );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength: function ( focalLength ) {\n\n\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = THREE.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength: function () {\n\n\t\tvar vExtentSlope = Math.tan( THREE.Math.DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t},\n\n\tgetEffectiveFOV: function () {\n\n\t\treturn THREE.Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( THREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t},\n\n\tgetFilmWidth: function () {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t},\n\n\tgetFilmHeight: function () {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t},\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   var w = 1920;\n\t *   var h = 1080;\n\t *   var fullWidth = w * 3;\n\t *   var fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tthis.view = {\n\t\t\tfullWidth: fullWidth,\n\t\t\tfullHeight: fullHeight,\n\t\t\toffsetX: x,\n\t\t\toffsetY: y,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function() {\n\n\t\tthis.view = null;\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar near = this.near,\n\t\t\ttop = near * Math.tan(\n\t\t\t\t\tTHREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\theight = 2 * top,\n\t\t\twidth = this.aspect * height,\n\t\t\tleft = - 0.5 * width,\n\t\t\tview = this.view;\n\n\t\tif ( view !== null ) {\n\n\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tvar skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makeFrustum(\n\t\t\t\tleft, left + width, top - height, top, near, this.far );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/cameras/StereoCamera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.StereoCamera = function () {\n\n\tthis.type = 'StereoCamera';\n\n\tthis.aspect = 1;\n\n\tthis.cameraL = new THREE.PerspectiveCamera();\n\tthis.cameraL.layers.enable( 1 );\n\tthis.cameraL.matrixAutoUpdate = false;\n\n\tthis.cameraR = new THREE.PerspectiveCamera();\n\tthis.cameraR.layers.enable( 2 );\n\tthis.cameraR.matrixAutoUpdate = false;\n\n};\n\nObject.assign( THREE.StereoCamera.prototype, {\n\n\tupdate: ( function () {\n\n\t\tvar focus, fov, aspect, near, far;\n\n\t\tvar eyeRight = new THREE.Matrix4();\n\t\tvar eyeLeft = new THREE.Matrix4();\n\n\t\treturn function update( camera ) {\n\n\t\t\tvar needsUpdate = focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tfocus = camera.focus;\n\t\t\t\tfov = camera.fov;\n\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\tnear = camera.near;\n\t\t\t\tfar = camera.far;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSep = 0.064 / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n\t\t};\n\n\t} )()\n\n} );\n\n// File:src/lights/Light.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Light = function ( color, intensity ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Light';\n\n\tthis.color = new THREE.Color( color );\n\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\tthis.receiveShadow = undefined;\n\n};\n\nTHREE.Light.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Light,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/lights/LightShadow.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LightShadow = function ( camera ) {\n\n\tthis.camera = camera;\n\n\tthis.bias = 0;\n\tthis.radius = 1;\n\n\tthis.mapSize = new THREE.Vector2( 512, 512 );\n\n\tthis.map = null;\n\tthis.matrix = new THREE.Matrix4();\n\n};\n\nObject.assign( THREE.LightShadow.prototype, {\n\n\tcopy: function ( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\n// File:src/lights/AmbientLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AmbientLight = function ( color, intensity ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'AmbientLight';\n\n\tthis.castShadow = undefined;\n\n};\n\nTHREE.AmbientLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.AmbientLight\n\n} );\n\n// File:src/lights/DirectionalLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DirectionalLight = function ( color, intensity ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'DirectionalLight';\n\n\tthis.position.copy( THREE.Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.target = new THREE.Object3D();\n\n\tthis.shadow = new THREE.DirectionalLightShadow();\n\n};\n\nTHREE.DirectionalLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.DirectionalLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/DirectionalLightShadow.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.DirectionalLightShadow = function ( light ) {\n\n\tTHREE.LightShadow.call( this, new THREE.OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n};\n\nTHREE.DirectionalLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\n\n\tconstructor: THREE.DirectionalLightShadow\n\n} );\n\n// File:src/lights/HemisphereLight.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {\n\n\tTHREE.Light.call( this, skyColor, intensity );\n\n\tthis.type = 'HemisphereLight';\n\n\tthis.castShadow = undefined;\n\n\tthis.position.copy( THREE.Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.groundColor = new THREE.Color( groundColor );\n\n};\n\nTHREE.HemisphereLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.HemisphereLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/PointLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nTHREE.PointLight = function ( color, intensity, distance, decay ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'PointLight';\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t},\n\t\tset: function ( power ) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n};\n\nTHREE.PointLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.PointLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/SpotLight.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SpotLight = function ( color, intensity, distance, angle, penumbra, decay ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'SpotLight';\n\n\tthis.position.copy( THREE.Object3D.DefaultUp );\n\tthis.updateMatrix();\n\n\tthis.target = new THREE.Object3D();\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\treturn this.intensity * Math.PI;\n\t\t},\n\t\tset: function ( power ) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\tthis.intensity = power / Math.PI;\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new THREE.SpotLightShadow();\n\n};\n\nTHREE.SpotLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.SpotLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/SpotLightShadow.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SpotLightShadow = function () {\n\n\tTHREE.LightShadow.call( this, new THREE.PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n};\n\nTHREE.SpotLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\n\n\tconstructor: THREE.SpotLightShadow,\n\n\tupdate: function ( light ) {\n\n\t\tvar fov = THREE.Math.RAD2DEG * 2 * light.angle;\n\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\tvar far = light.distance || 500;\n\n\t\tvar camera = this.camera;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/loaders/AudioLoader.js\n\n/**\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nTHREE.AudioLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.AudioLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar context = THREE.AudioContext;\n\n\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t} );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n} );\n\n// File:src/loaders/Cache.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\n// File:src/loaders/Loader.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Loader = function () {\n\n\tthis.onLoadStart = function () {};\n\tthis.onLoadProgress = function () {};\n\tthis.onLoadComplete = function () {};\n\n};\n\nTHREE.Loader.prototype = {\n\n\tconstructor: THREE.Loader,\n\n\tcrossOrigin: undefined,\n\n\textractUrlBase: function ( url ) {\n\n\t\tvar parts = url.split( '/' );\n\n\t\tif ( parts.length === 1 ) return './';\n\n\t\tparts.pop();\n\n\t\treturn parts.join( '/' ) + '/';\n\n\t},\n\n\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\tvar array = [];\n\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t}\n\n\t\treturn array;\n\n\t},\n\n\tcreateMaterial: ( function () {\n\n\t\tvar color, textureLoader, materialLoader;\n\n\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\tif ( color === undefined ) color = new THREE.Color();\n\t\t\tif ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();\n\t\t\tif ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();\n\n\t\t\t// convert from old material format\n\n\t\t\tvar textures = {};\n\n\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\tvar loader = THREE.Loader.Handlers.get( fullPath );\n\n\t\t\t\tvar texture;\n\n\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t}\n\n\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t}\n\n\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;\n\n\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t}\n\n\t\t\t\tvar uuid = THREE.Math.generateUUID();\n\n\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\treturn uuid;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar json = {\n\t\t\t\tuuid: THREE.Math.generateUUID(),\n\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t};\n\n\t\t\tfor ( var name in m ) {\n\n\t\t\t\tvar value = m[ name ];\n\n\t\t\t\tswitch ( name ) {\n\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\tjson.blending = THREE[ value ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\tjson.side = THREE.BackSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\tjson.side = THREE.DoubleSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\tcase 'opacity':\n\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\tcase 'transparent':\n\t\t\t\t\tcase 'visible':\n\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\tif ( value === true ) json.vertexColors = THREE.VertexColors;\n\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = THREE.FaceColors;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\treturn materialLoader.parse( json );\n\n\t\t};\n\n\t} )()\n\n};\n\nTHREE.Loader.Handlers = {\n\n\thandlers: [],\n\n\tadd: function ( regex, loader ) {\n\n\t\tthis.handlers.push( regex, loader );\n\n\t},\n\n\tget: function ( file ) {\n\n\t\tvar handlers = this.handlers;\n\n\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\tvar regex = handlers[ i ];\n\t\t\tvar loader  = handlers[ i + 1 ];\n\n\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\treturn loader;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n};\n\n// File:src/loaders/XHRLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.XHRLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.XHRLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\tvar scope = this;\n\n\t\tvar cached = THREE.Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tvar request = new XMLHttpRequest();\n\t\trequest.overrideMimeType( 'text/plain' );\n\t\trequest.open( 'GET', url, true );\n\n\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\tvar response = event.target.response;\n\n\t\t\tTHREE.Cache.add( url, response );\n\n\t\t\tif ( this.status === 200 ) {\n\n\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} else if ( this.status === 0 ) {\n\n\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\n\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} else {\n\n\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, false );\n\n\t\tif ( onProgress !== undefined ) {\n\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tonProgress( event );\n\n\t\t\t}, false );\n\n\t\t}\n\n\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\n\t\t}, false );\n\n\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\trequest.send( null );\n\n\t\tscope.manager.itemStart( url );\n\n\t\treturn request;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t},\n\n\tsetResponseType: function ( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t},\n\n\tsetWithCredentials: function ( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/FontLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.FontLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.FontLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t}\n\n\t\t\tvar font = scope.parse( json );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\treturn new THREE.Font( json );\n\n\t}\n\n} );\n\n// File:src/loaders/ImageLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ImageLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.ImageLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\t\timage.onload = function () {\n\n\t\t\tURL.revokeObjectURL( image.src );\n\n\t\t\tif ( onLoad ) onLoad( image );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t};\n\n\t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\n\t\t\timage.src = url;\n\n\t\t} else {\n\n\t\t\tvar loader = new THREE.XHRLoader();\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'blob' );\n\t\t\tloader.load( url, function ( blob ) {\n\n\t\t\t\timage.src = URL.createObjectURL( blob );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\treturn image;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/JSONLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.JSONLoader = function ( manager ) {\n\n\tif ( typeof manager === 'boolean' ) {\n\n\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\tmanager = undefined;\n\n\t}\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\tthis.withCredentials = false;\n\n};\n\nObject.assign( THREE.JSONLoader.prototype, {\n\n\tload: function( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json = JSON.parse( text );\n\t\t\tvar metadata = json.metadata;\n\n\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\tvar type = metadata.type;\n\n\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tparse: function ( json, texturePath ) {\n\n\t\tvar geometry = new THREE.Geometry(),\n\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n\t\tparseModel( scale );\n\n\t\tparseSkin();\n\t\tparseMorphing( scale );\n\t\tparseAnimations();\n\n\t\tgeometry.computeFaceNormals();\n\t\tgeometry.computeBoundingSphere();\n\n\t\tfunction parseModel( scale ) {\n\n\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t}\n\n\t\t\tvar i, j, fi,\n\n\t\t\toffset, zLength,\n\n\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\ttype,\n\t\t\tisQuad,\n\t\t\thasMaterial,\n\t\t\thasFaceVertexUv,\n\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\tuvLayer, uv, u, v,\n\n\t\t\tfaces = json.faces,\n\t\t\tvertices = json.vertices,\n\t\t\tnormals = json.normals,\n\t\t\tcolors = json.colors,\n\n\t\t\tnUvLayers = 0;\n\n\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t// disregard empty arrays\n\n\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = vertices.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\tvertex = new THREE.Vector3();\n\n\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = faces.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\ttype = faces[ offset ++ ];\n\n\n\t\t\t\tisQuad              = isBitSet( type, 0 );\n\t\t\t\thasMaterial         = isBitSet( type, 1 );\n\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\n\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\tfaceA = new THREE.Face3();\n\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\tfaceB = new THREE.Face3();\n\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\toffset += 4;\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface = new THREE.Face3();\n\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseSkin() {\n\n\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar x =                               json.skinWeights[ i ];\n\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar a =                               json.skinIndices[ i ];\n\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.bones = json.bones;\n\n\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseMorphing( scale ) {\n\n\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\tvar vertex = new THREE.Vector3();\n\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseAnimations() {\n\n\t\t\tvar outputAnimations = [];\n\n\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\tvar animations = [];\n\n\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\tanimations.push( json.animation );\n\n\t\t\t}\n\n\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\tvar clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t}\n\n\t\t\t// parse implicit morph animations\n\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\tvar morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t}\n\n\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t}\n\n\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\treturn { geometry: geometry };\n\n\t\t} else {\n\n\t\t\tvar materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/loaders/LoadingManager.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\n\n\tvar scope = this;\n\n\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\n\tthis.onStart = undefined;\n\tthis.onLoad = onLoad;\n\tthis.onProgress = onProgress;\n\tthis.onError = onError;\n\n\tthis.itemStart = function ( url ) {\n\n\t\titemsTotal ++;\n\n\t\tif ( isLoading === false ) {\n\n\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tisLoading = true;\n\n\t};\n\n\tthis.itemEnd = function ( url ) {\n\n\t\titemsLoaded ++;\n\n\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t}\n\n\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\tisLoading = false;\n\n\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\tscope.onLoad();\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.itemError = function ( url ) {\n\n\t\tif ( scope.onError !== undefined ) {\n\n\t\t\tscope.onError( url );\n\n\t\t}\n\n\t};\n\n};\n\nTHREE.DefaultLoadingManager = new THREE.LoadingManager();\n\n// File:src/loaders/BufferGeometryLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferGeometryLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.BufferGeometryLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\tvar index = json.data.index;\n\n\t\tvar TYPED_ARRAYS = {\n\t\t\t'Int8Array': Int8Array,\n\t\t\t'Uint8Array': Uint8Array,\n\t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n\t\t\t'Int16Array': Int16Array,\n\t\t\t'Uint16Array': Uint16Array,\n\t\t\t'Int32Array': Int32Array,\n\t\t\t'Uint32Array': Uint32Array,\n\t\t\t'Float32Array': Float32Array,\n\t\t\t'Float64Array': Float64Array\n\t\t};\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\tgeometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tvar attributes = json.data.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\tgeometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n\t\t}\n\n\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tvar center = new THREE.Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\n// File:src/loaders/MaterialLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.MaterialLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\tthis.textures = {};\n\n};\n\nObject.assign( THREE.MaterialLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTextures: function ( value ) {\n\n\t\tthis.textures = value;\n\n\t},\n\n\tgetTexture: function ( name ) {\n\n\t\tvar textures = this.textures;\n\n\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t}\n\n\t\treturn textures[ name ];\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar material = new THREE[ json.type ];\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\n\t\t// for PointsMaterial\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = this.getTexture( json.map );\n\n\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\tmaterial.alphaMap = this.getTexture( json.alphaMap );\n\t\t\tmaterial.transparent = true;\n\n\t\t}\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tvar normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new THREE.Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = this.getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = this.getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = this.getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );\n\n\t\tif ( json.envMap !== undefined ) {\n\n\t\t\tmaterial.envMap = this.getTexture( json.envMap );\n\t\t\tmaterial.combine = THREE.MultiplyOperation;\n\n\t\t}\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\t// MultiMaterial\n\n\t\tif ( json.materials !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn material;\n\n\t}\n\n} );\n\n// File:src/loaders/ObjectLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ObjectLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\tthis.texturePath = '';\n\n};\n\nObject.assign( THREE.ObjectLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.texturePath === '' ) {\n\n\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t}\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tscope.parse( JSON.parse( text ), onLoad );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tparse: function ( json, onLoad ) {\n\n\t\tvar geometries = this.parseGeometries( json.geometries );\n\n\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tvar textures  = this.parseTextures( json.textures, images );\n\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\tif ( json.animations ) {\n\n\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t}\n\n\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t},\n\n\tparseGeometries: function ( json ) {\n\n\t\tvar geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar geometryLoader = new THREE.JSONLoader();\n\t\t\tvar bufferGeometryLoader = new THREE.BufferGeometryLoader();\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar geometry;\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE [ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\tcase 'TetrahedronGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t},\n\n\tparseMaterials: function ( json, textures ) {\n\n\t\tvar materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar loader = new THREE.MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar material = loader.parse( json[ i ] );\n\t\t\t\tmaterials[ material.uuid ] = material;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t},\n\n\tparseAnimations: function ( json ) {\n\n\t\tvar animations = [];\n\n\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\tvar clip = THREE.AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t},\n\n\tparseImages: function ( json, onLoad ) {\n\n\t\tvar scope = this;\n\t\tvar images = {};\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tvar manager = new THREE.LoadingManager( onLoad );\n\n\t\t\tvar loader = new THREE.ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar image = json[ i ];\n\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t},\n\n\tparseTextures: function ( json, images ) {\n\n\t\tfunction parseConstant( value ) {\n\n\t\t\tif ( typeof( value ) === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn THREE[ value ];\n\n\t\t}\n\n\t\tvar textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = new THREE.Texture( images[ data.image ] );\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ] );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t},\n\n\tparseObject: function () {\n\n\t\tvar matrix = new THREE.Matrix4();\n\n\t\treturn function parseObject( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new THREE.Scene();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new THREE.AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new THREE.DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\tobject = new THREE.SkinnedMesh( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject = new THREE.Mesh( geometry, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new THREE.LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new THREE.Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new THREE.Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new THREE.Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tmatrix.fromArray( data.matrix );\n\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tfor ( var child in data.children ) {\n\n\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t};\n\n\t}()\n\n} );\n\n// File:src/loaders/TextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.TextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.TextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new THREE.Texture();\n\n\t\tvar loader = new THREE.ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( image ) {\n\n\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\tvar isJPEG = url.search( /\\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\ttexture.format = isJPEG ? THREE.RGBFormat : THREE.RGBAFormat;\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/CubeTextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CubeTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.CubeTextureLoader.prototype, {\n\n\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new THREE.CubeTexture();\n\n\t\tvar loader = new THREE.ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tvar loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/BinaryTextureLoader.js\n\n/**\n * @author Nikos M. / https://github.com/foo123/\n *\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n */\n\nTHREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n};\n\nObject.assign( THREE.BinaryTextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texture = new THREE.DataTexture();\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\n\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\n\n\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t}\n\n\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n// File:src/loaders/CompressedTextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n */\n\nTHREE.CompressedTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n};\n\nObject.assign( THREE.CompressedTextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar images = [];\n\n\t\tvar texture = new THREE.CompressedTexture();\n\t\ttexture.image = images;\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/materials/Material.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Material = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Material';\n\n\tthis.fog = true;\n\tthis.lights = true;\n\n\tthis.blending = THREE.NormalBlending;\n\tthis.side = THREE.FrontSide;\n\tthis.shading = THREE.SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\tthis.vertexColors = THREE.NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\tthis.opacity = 1;\n\tthis.transparent = false;\n\n\tthis.blendSrc = THREE.SrcAlphaFactor;\n\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\n\tthis.blendEquation = THREE.AddEquation;\n\tthis.blendSrcAlpha = null;\n\tthis.blendDstAlpha = null;\n\tthis.blendEquationAlpha = null;\n\n\tthis.depthFunc = THREE.LessEqualDepth;\n\tthis.depthTest = true;\n\tthis.depthWrite = true;\n\n\tthis.clippingPlanes = null;\n\tthis.clipShadows = false;\n\n\tthis.colorWrite = true;\n\n\tthis.precision = null; // override the renderer's default precision for this material\n\n\tthis.polygonOffset = false;\n\tthis.polygonOffsetFactor = 0;\n\tthis.polygonOffsetUnits = 0;\n\n\tthis.alphaTest = 0;\n\tthis.premultipliedAlpha = false;\n\n\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\tthis.visible = true;\n\n\tthis._needsUpdate = true;\n\n};\n\nTHREE.Material.prototype = {\n\n\tconstructor: THREE.Material,\n\n\tget needsUpdate() {\n\n\t\treturn this._needsUpdate;\n\n\t},\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.update();\n\t\tthis._needsUpdate = value;\n\n\t},\n\n\tsetValues: function ( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( var key in values ) {\n\n\t\t\tvar newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue instanceof THREE.Color ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar isRoot = meta === undefined;\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color instanceof THREE.Color ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();\n\t\tif ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\n\t\tif ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\tif ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\tif ( this.bumpMap instanceof THREE.Texture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\t\tif ( this.normalMap instanceof THREE.Texture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\t\tif ( this.displacementMap instanceof THREE.Texture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\t\tif ( this.roughnessMap instanceof THREE.Texture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap instanceof THREE.Texture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap instanceof THREE.Texture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap instanceof THREE.Texture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t}\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== THREE.NormalBlending ) data.blending = this.blending;\n\t\tif ( this.shading !== THREE.SmoothShading ) data.shading = this.shading;\n\t\tif ( this.side !== THREE.FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache ( cache ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.shading = source.shading;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.alphaTest = source.alphaTest;\n\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.overdraw = source.overdraw;\n\n\t\tthis.visible = source.visible;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\tdstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tvar n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\n\t\treturn this;\n\n\t},\n\n\tupdate: function () {\n\n\t\tthis.dispatchEvent( { type: 'update' } );\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n};\n\nObject.assign( THREE.Material.prototype, THREE.EventDispatcher.prototype );\n\nTHREE.MaterialIdCount = 0;\n\n// File:src/materials/LineBasicMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *  linecap: \"round\",\n *  linejoin: \"round\"\n * }\n */\n\nTHREE.LineBasicMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'LineBasicMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\tthis.linecap = 'round';\n\tthis.linejoin = 'round';\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\n\nTHREE.LineBasicMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.linewidth = source.linewidth;\n\tthis.linecap = source.linecap;\n\tthis.linejoin = source.linejoin;\n\n\treturn this;\n\n};\n\n// File:src/materials/LineDashedMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *\n *  scale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>\n * }\n */\n\nTHREE.LineDashedMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'LineDashedMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\n\tthis.scale = 1;\n\tthis.dashSize = 3;\n\tthis.gapSize = 1;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\n\nTHREE.LineDashedMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.linewidth = source.linewidth;\n\n\tthis.scale = source.scale;\n\tthis.dashSize = source.dashSize;\n\tthis.gapSize = source.gapSize;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshBasicMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  shading: THREE.SmoothShading,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>\n * }\n */\n\nTHREE.MeshBasicMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshBasicMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // emissive\n\n\tthis.map = null;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\n\nTHREE.MeshBasicMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshDepthMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / https://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nTHREE.MeshDepthMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshDepthMaterial';\n\n\tthis.depthPacking = THREE.BasicDepthPacking;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.map = null;\n\n\tthis.alphaMap = null;\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\n\nTHREE.MeshDepthMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.depthPacking = source.depthPacking;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\tthis.map = source.map;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshLambertMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.MeshLambertMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshLambertMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new THREE.Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\n\nTHREE.MeshLambertMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshNormalMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nTHREE.MeshNormalMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this, parameters );\n\n\tthis.type = 'MeshNormalMaterial';\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\tthis.morphTargets = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\n\nTHREE.MeshNormalMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshPhongMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.MeshPhongMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshPhongMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\tthis.specular = new THREE.Color( 0x111111 );\n\tthis.shininess = 30;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new THREE.Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\n\nTHREE.MeshPhongMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.specular.copy( source.specular );\n\tthis.shininess = source.shininess;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshStandardMaterial.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.MeshStandardMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.type = 'MeshStandardMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\tthis.roughness = 0.5;\n\tthis.metalness = 0.5;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new THREE.Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.roughnessMap = null;\n\n\tthis.metalnessMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.envMapIntensity = 1.0;\n\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshStandardMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;\n\nTHREE.MeshStandardMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.color.copy( source.color );\n\tthis.roughness = source.roughness;\n\tthis.metalness = source.metalness;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.roughnessMap = source.roughnessMap;\n\n\tthis.metalnessMap = source.metalnessMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.envMapIntensity = source.envMapIntensity;\n\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshPhysicalMaterial.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  reflectivity: <float>\n * }\n */\n\nTHREE.MeshPhysicalMaterial = function ( parameters ) {\n\n\tTHREE.MeshStandardMaterial.call( this );\n\n\tthis.defines = { 'PHYSICAL': '' };\n\n\tthis.type = 'MeshPhysicalMaterial';\n\n\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\tthis.clearCoat = 0.0;\n\tthis.clearCoatRoughness = 0.0;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshPhysicalMaterial.prototype = Object.create( THREE.MeshStandardMaterial.prototype );\nTHREE.MeshPhysicalMaterial.prototype.constructor = THREE.MeshPhysicalMaterial;\n\nTHREE.MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.MeshStandardMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = { 'PHYSICAL': '' };\n\n\tthis.reflectivity = source.reflectivity;\n\n\tthis.clearCoat = source.clearCoat;\n\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n\treturn this;\n\n};\n\n// File:src/materials/MultiMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.MultiMaterial = function ( materials ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.type = 'MultiMaterial';\n\n\tthis.materials = materials instanceof Array ? materials : [];\n\n\tthis.visible = true;\n\n};\n\nTHREE.MultiMaterial.prototype = {\n\n\tconstructor: THREE.MultiMaterial,\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.2,\n\t\t\t\ttype: 'material',\n\t\t\t\tgenerator: 'MaterialExporter'\n\t\t\t},\n\t\t\tuuid: this.uuid,\n\t\t\ttype: this.type,\n\t\t\tmaterials: []\n\t\t};\n\n\t\tvar materials = this.materials;\n\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tvar material = materials[ i ].toJSON( meta );\n\t\t\tdelete material.metadata;\n\n\t\t\toutput.materials.push( material );\n\n\t\t}\n\n\t\toutput.visible = this.visible;\n\n\t\treturn output;\n\n\t},\n\n\tclone: function () {\n\n\t\tvar material = new this.constructor();\n\n\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\n\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\n\t\t}\n\n\t\tmaterial.visible = this.visible;\n\n\t\treturn material;\n\n\t}\n\n};\n\n// File:src/materials/PointsMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  size: <float>,\n *  sizeAttenuation: <bool>\n * }\n */\n\nTHREE.PointsMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'PointsMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.map = null;\n\n\tthis.size = 1;\n\tthis.sizeAttenuation = true;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\n\nTHREE.PointsMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.size = source.size;\n\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\treturn this;\n\n};\n\n// File:src/materials/ShaderMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.ShaderMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'ShaderMaterial';\n\n\tthis.defines = {};\n\tthis.uniforms = {};\n\n\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\tthis.linewidth = 1;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false; // set to use scene fog\n\tthis.lights = false; // set to use scene lights\n\tthis.clipping = false; // set to use user-defined clipping planes\n\n\tthis.skinning = false; // set to use skinning attribute streams\n\tthis.morphTargets = false; // set to use morph targets\n\tthis.morphNormals = false; // set to use morph normals\n\n\tthis.extensions = {\n\t\tderivatives: false, // set to use derivatives\n\t\tfragDepth: false, // set to use fragment depth values\n\t\tdrawBuffers: false, // set to use draw buffers\n\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t};\n\n\t// When rendered geometry doesn't include these attributes but the material does,\n\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\tthis.defaultAttributeValues = {\n\t\t'color': [ 1, 1, 1 ],\n\t\t'uv': [ 0, 0 ],\n\t\t'uv2': [ 0, 0 ]\n\t};\n\n\tthis.index0AttributeName = undefined;\n\n\tif ( parameters !== undefined ) {\n\n\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n};\n\nTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\n\nTHREE.ShaderMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.fragmentShader = source.fragmentShader;\n\tthis.vertexShader = source.vertexShader;\n\n\tthis.uniforms = THREE.UniformsUtils.clone( source.uniforms );\n\n\tthis.defines = source.defines;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\tthis.lights = source.lights;\n\tthis.clipping = source.clipping;\n\n\tthis.skinning = source.skinning;\n\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\tthis.extensions = source.extensions;\n\n\treturn this;\n\n};\n\nTHREE.ShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\tvar data = THREE.Material.prototype.toJSON.call( this, meta );\n\n\tdata.uniforms = this.uniforms;\n\tdata.vertexShader = this.vertexShader;\n\tdata.fragmentShader = this.fragmentShader;\n\n\treturn data;\n\n};\n\n// File:src/materials/RawShaderMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.RawShaderMaterial = function ( parameters ) {\n\n\tTHREE.ShaderMaterial.call( this, parameters );\n\n\tthis.type = 'RawShaderMaterial';\n\n};\n\nTHREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\nTHREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;\n\n// File:src/materials/SpriteMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *\tuvOffset: new THREE.Vector2(),\n *\tuvScale: new THREE.Vector2()\n * }\n */\n\nTHREE.SpriteMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'SpriteMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\tthis.map = null;\n\n\tthis.rotation = 0;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\n\nTHREE.SpriteMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.map = source.map;\n\n\tthis.rotation = source.rotation;\n\n\treturn this;\n\n};\n\n// File:src/materials/ShadowMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ShadowMaterial = function () {\n\n\tTHREE.ShaderMaterial.call( this, {\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\t\tvertexShader: THREE.ShaderChunk[ 'shadow_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'shadow_frag' ]\n\t} );\n\n\tthis.lights = true;\n\tthis.transparent = true;\n\n\tObject.defineProperties( this, {\n\t\topacity: {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn this.uniforms.opacity.value;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tthis.uniforms.opacity.value = value;\n\t\t\t}\n\t\t}\n\t} );\n\n};\n\nTHREE.ShadowMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\nTHREE.ShadowMaterial.prototype.constructor = THREE.ShadowMaterial;\n\n// File:src/textures/Texture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\tObject.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.sourceFile = '';\n\n\tthis.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\n\tthis.mipmaps = [];\n\n\tthis.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\n\n\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\n\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\n\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\n\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\n\n\tthis.offset = new THREE.Vector2( 0, 0 );\n\tthis.repeat = new THREE.Vector2( 1, 1 );\n\n\tthis.generateMipmaps = true;\n\tthis.premultiplyAlpha = false;\n\tthis.flipY = true;\n\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\n\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t//\n\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\tthis.encoding = encoding !== undefined ? encoding :  THREE.LinearEncoding;\n\n\tthis.version = 0;\n\tthis.onUpdate = null;\n\n};\n\nTHREE.Texture.DEFAULT_IMAGE = undefined;\nTHREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\n\nTHREE.Texture.prototype = {\n\n\tconstructor: THREE.Texture,\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.image = source.image;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.encoding = source.encoding;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tfunction getDataURL( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( image.toDataURL !== undefined ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = image.width;\n\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY\n\t\t};\n\n\t\tif ( this.image !== undefined ) {\n\n\t\t\t// TODO: Move to THREE.Image\n\n\t\t\tvar image = this.image;\n\n\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\timage.uuid = THREE.Math.generateUUID(); // UGH\n\n\t\t\t}\n\n\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\toutput.image = image.uuid;\n\n\t\t}\n\n\t\tmeta.textures[ this.uuid ] = output;\n\n\t\treturn output;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t},\n\n\ttransformUv: function ( uv ) {\n\n\t\tif ( this.mapping !== THREE.UVMapping )  return;\n\n\t\tuv.multiply( this.repeat );\n\t\tuv.add( this.offset );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase THREE.RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase THREE.RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t}\n\n};\n\nObject.assign( THREE.Texture.prototype, THREE.EventDispatcher.prototype );\n\nTHREE.TextureIdCount = 0;\n\n// File:src/textures/DepthTexture.js\n\n/**\n * @author Matt DesLauriers / @mattdesl\n */\n\nTHREE.DepthTexture = function ( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\n\n  THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, THREE.DepthFormat, type, anisotropy );\n\n  this.image = { width: width, height: height };\n\n  this.type = type !== undefined ? type : THREE.UnsignedShortType;\n\n  this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n  this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n\n  this.flipY = false;\n  this.generateMipmaps  = false;\n\n};\n\nTHREE.DepthTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.DepthTexture.prototype.constructor = THREE.DepthTexture;\n\n// File:src/textures/CanvasTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTHREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.needsUpdate = true;\n\n};\n\nTHREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;\n\n// File:src/textures/CubeTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\timages = images !== undefined ? images : [];\n\tmapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\n\n\tTHREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.flipY = false;\n\n};\n\nTHREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\n\nObject.defineProperty( THREE.CubeTexture.prototype, 'images', {\n\n\tget: function () {\n\n\t\treturn this.image;\n\n\t},\n\n\tset: function ( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n} );\n\n// File:src/textures/CompressedTexture.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { width: width, height: height };\n\tthis.mipmaps = mipmaps;\n\n\t// no flipping for cube textures\n\t// (also flipping doesn't work for compressed textures )\n\n\tthis.flipY = false;\n\n\t// can't generate mipmaps for compressed textures\n\t// mips must be embedded in DDS files\n\n\tthis.generateMipmaps = false;\n\n};\n\nTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;\n\n// File:src/textures/DataTexture.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { data: data, width: width, height: height };\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n\n\tthis.flipY = false;\n\tthis.generateMipmaps  = false;\n\n};\n\nTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.DataTexture.prototype.constructor = THREE.DataTexture;\n\n// File:src/textures/VideoTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTHREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.generateMipmaps = false;\n\n\tvar scope = this;\n\n\tfunction update() {\n\n\t\trequestAnimationFrame( update );\n\n\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tscope.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tupdate();\n\n};\n\nTHREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.VideoTexture.prototype.constructor = THREE.VideoTexture;\n\n// File:src/objects/Group.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Group = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Group';\n\n};\n\nTHREE.Group.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Group\n\n} );\n\n// File:src/objects/Points.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Points = function ( geometry, material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Points';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\tthis.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );\n\n};\n\nTHREE.Points.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Points,\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\tvar ray = new THREE.Ray();\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar object = this;\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\tvar position = new THREE.Vector3();\n\n\t\t\tfunction testPoint( point, index ) {\n\n\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tobject: object\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/Line.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Line = function ( geometry, material, mode ) {\n\n\tif ( mode === 1 ) {\n\n\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\treturn new THREE.LineSegments( geometry, material );\n\n\t}\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Line';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\tthis.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n};\n\nTHREE.Line.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Line,\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\tvar ray = new THREE.Ray();\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar precision = raycaster.linePrecision;\n\t\t\tvar precisionSq = precision * precision;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\tvar vStart = new THREE.Vector3();\n\t\t\tvar vEnd = new THREE.Vector3();\n\t\t\tvar interSegment = new THREE.Vector3();\n\t\t\tvar interRay = new THREE.Vector3();\n\t\t\tvar step = this instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/LineSegments.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LineSegments = function ( geometry, material ) {\n\n\tTHREE.Line.call( this, geometry, material );\n\n\tthis.type = 'LineSegments';\n\n};\n\nTHREE.LineSegments.prototype = Object.assign( Object.create( THREE.Line.prototype ), {\n\n\tconstructor: THREE.LineSegments\n\n} );\n\n// File:src/objects/Mesh.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author jonobr1 / http://jonobr1.com/\n */\n\nTHREE.Mesh = function ( geometry, material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Mesh';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\tthis.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\tthis.drawMode = THREE.TrianglesDrawMode;\n\n\tthis.updateMorphTargets();\n\n};\n\nTHREE.Mesh.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Mesh,\n\n\tsetDrawMode: function ( value ) {\n\n\t\tthis.drawMode = value;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.drawMode = source.drawMode;\n\n\t\treturn this;\n\n\t},\n\n\tupdateMorphTargets: function () {\n\n\t\tif ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {\n\n\t\t\tthis.morphTargetBase = - 1;\n\t\t\tthis.morphTargetInfluences = [];\n\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\n\n\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tgetMorphTargetIndexByName: function ( name ) {\n\n\t\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\n\n\t\t\treturn this.morphTargetDictionary[ name ];\n\n\t\t}\n\n\t\tconsole.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );\n\n\t\treturn 0;\n\n\t},\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\tvar ray = new THREE.Ray();\n\t\tvar sphere = new THREE.Sphere();\n\n\t\tvar vA = new THREE.Vector3();\n\t\tvar vB = new THREE.Vector3();\n\t\tvar vC = new THREE.Vector3();\n\n\t\tvar tempA = new THREE.Vector3();\n\t\tvar tempB = new THREE.Vector3();\n\t\tvar tempC = new THREE.Vector3();\n\n\t\tvar uvA = new THREE.Vector2();\n\t\tvar uvB = new THREE.Vector2();\n\t\tvar uvC = new THREE.Vector2();\n\n\t\tvar barycoord = new THREE.Vector3();\n\n\t\tvar intersectionPoint = new THREE.Vector3();\n\t\tvar intersectionPointWorld = new THREE.Vector3();\n\n\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\t\tTHREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\t\treturn uv1.clone();\n\n\t\t}\n\n\t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\n\t\t\tvar intersect;\n\t\t\tvar material = object.material;\n\n\t\t\tif ( material.side === THREE.BackSide ) {\n\n\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t\t} else {\n\n\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );\n\n\t\t\t}\n\n\t\t\tif ( intersect === null ) return null;\n\n\t\t\tintersectionPointWorld.copy( point );\n\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\t\treturn {\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\tobject: object\n\t\t\t};\n\n\t\t}\n\n\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\t\tif ( intersection ) {\n\n\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\n\t\t\t\t}\n\n\t\t\t\tintersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );\n\t\t\t\tintersection.faceIndex = a;\n\n\t\t\t}\n\n\t\t\treturn intersection;\n\n\t\t}\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) return;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t\t}\n\n\t\t\tvar uvs, intersection;\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tvar a, b, c;\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\tuvs = attributes.uv.array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\ta = indices[ i ];\n\t\t\t\t\t\tb = indices[ i + 1 ];\n\t\t\t\t\t\tc = indices[ i + 2 ];\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\n\t\t\t\t\t\ta = i / 3;\n\t\t\t\t\t\tb = a + 1;\n\t\t\t\t\t\tc = a + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\tfvC = vC;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/Bone.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.Bone = function ( skin ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Bone';\n\n\tthis.skin = skin;\n\n};\n\nTHREE.Bone.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Bone,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.skin = source.skin;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/objects/Skeleton.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author michael guerrero / http://realitymeltdown.com\n * @author ikerr / http://verold.com\n */\n\nTHREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {\n\n\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\n\tthis.identityMatrix = new THREE.Matrix4();\n\n\t// copy the bone array\n\n\tbones = bones || [];\n\n\tthis.bones = bones.slice( 0 );\n\n\t// create a bone texture or an array of floats\n\n\tif ( this.useVertexTexture ) {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );\n\t\tsize = Math.max( size, 4 );\n\n\t\tthis.boneTextureWidth = size;\n\t\tthis.boneTextureHeight = size;\n\n\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\n\n\t} else {\n\n\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\n\t}\n\n\t// use the supplied bone inverses or calculate the inverses\n\n\tif ( boneInverses === undefined ) {\n\n\t\tthis.calculateInverses();\n\n\t} else {\n\n\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\tthis.boneInverses.push( new THREE.Matrix4() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n\nObject.assign( THREE.Skeleton.prototype, {\n\n\tcalculateInverses: function () {\n\n\t\tthis.boneInverses = [];\n\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\tvar inverse = new THREE.Matrix4();\n\n\t\t\tif ( this.bones[ b ] ) {\n\n\t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t},\n\n\tpose: function () {\n\n\t\tvar bone;\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\tbone = this.bones[ b ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\tbone = this.bones[ b ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdate: ( function () {\n\n\t\tvar offsetMatrix = new THREE.Matrix4();\n\n\t\treturn function update() {\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\n\t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n\t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\n\t\t\t}\n\n\t\t\tif ( this.useVertexTexture ) {\n\n\t\t\t\tthis.boneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t};\n\n\t} )(),\n\n\tclone: function () {\n\n\t\treturn new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\n\t}\n\n} );\n\n// File:src/objects/SkinnedMesh.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.type = 'SkinnedMesh';\n\n\tthis.bindMode = \"attached\";\n\tthis.bindMatrix = new THREE.Matrix4();\n\tthis.bindMatrixInverse = new THREE.Matrix4();\n\n\t// init bones\n\n\t// TODO: remove bone creation as there is no reason (other than\n\t// convenience) for THREE.SkinnedMesh to do this.\n\n\tvar bones = [];\n\n\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\tvar bone, gbone;\n\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\tbone = new THREE.Bone( this );\n\t\t\tbones.push( bone );\n\n\t\t\tbone.name = gbone.name;\n\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t}\n\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n\t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\n\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\n\t\t\t} else {\n\n\t\t\t\tthis.add( bones[ b ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tthis.normalizeSkinWeights();\n\n\tthis.updateMatrixWorld( true );\n\tthis.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\n};\n\n\nTHREE.SkinnedMesh.prototype = Object.assign( Object.create( THREE.Mesh.prototype ), {\n\n\tconstructor: THREE.SkinnedMesh,\n\n\tbind: function( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t},\n\n\tpose: function () {\n\n\t\tthis.skeleton.pose();\n\n\t},\n\n\tnormalizeSkinWeights: function () {\n\n\t\tif ( this.geometry instanceof THREE.Geometry ) {\n\n\t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( this.geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tvar vec = new THREE.Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\n\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\tvec.w = skinWeight.getW( i );\n\n\t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvec.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdateMatrixWorld: function( force ) {\n\n\t\tTHREE.Mesh.prototype.updateMatrixWorld.call( this, true );\n\n\t\tif ( this.bindMode === \"attached\" ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t} else if ( this.bindMode === \"detached\" ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t},\n\n\tclone: function() {\n\n\t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/LOD.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LOD = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'LOD';\n\n\tObject.defineProperties( this, {\n\t\tlevels: {\n\t\t\tenumerable: true,\n\t\t\tvalue: []\n\t\t}\n\t} );\n\n};\n\n\nTHREE.LOD.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.LOD,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source, false );\n\n\t\tvar levels = source.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\taddLevel: function ( object, distance ) {\n\n\t\tif ( distance === undefined ) distance = 0;\n\n\t\tdistance = Math.abs( distance );\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\tthis.add( object );\n\n\t},\n\n\tgetObjectForDistance: function ( distance ) {\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn levels[ i - 1 ].object;\n\n\t},\n\n\traycast: ( function () {\n\n\t\tvar matrixPosition = new THREE.Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t};\n\n\t}() ),\n\n\tupdate: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\n\t\treturn function update( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.levels = [];\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/objects/Sprite.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Sprite = function ( material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Sprite';\n\n\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\n\n};\n\nTHREE.Sprite.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Sprite,\n\n\traycast: ( function () {\n\n\t\tvar matrixPosition = new THREE.Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n\t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\n\t\t\tif ( distanceSq > guessSizeSq ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: Math.sqrt( distanceSq ),\n\t\t\t\tpoint: this.position,\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/LensFlare.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.lensFlares = [];\n\n\tthis.positionScreen = new THREE.Vector3();\n\tthis.customUpdateCallback = undefined;\n\n\tif ( texture !== undefined ) {\n\n\t\tthis.add( texture, size, distance, blending, color );\n\n\t}\n\n};\n\nTHREE.LensFlare.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.LensFlare,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.positionScreen.copy( source.positionScreen );\n\t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n\t\tif ( size === undefined ) size = - 1;\n\t\tif ( distance === undefined ) distance = 0;\n\t\tif ( opacity === undefined ) opacity = 1;\n\t\tif ( color === undefined ) color = new THREE.Color( 0xffffff );\n\t\tif ( blending === undefined ) blending = THREE.NormalBlending;\n\n\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n\t\tthis.lensFlares.push( {\n\t\t\ttexture: texture,\t// THREE.Texture\n\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t\t\tscale: 1, \t\t// scale\n\t\t\trotation: 0, \t\t// rotation\n\t\t\topacity: opacity,\t// opacity\n\t\t\tcolor: color,\t\t// color\n\t\t\tblending: blending\t// blending\n\t\t} );\n\n\t},\n\n\t/*\n\t * Update lens flares update positions on all flares based on the screen position\n\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t */\n\n\tupdateLensFlares: function () {\n\n\t\tvar f, fl = this.lensFlares.length;\n\t\tvar flare;\n\t\tvar vecX = - this.positionScreen.x * 2;\n\t\tvar vecY = - this.positionScreen.y * 2;\n\n\t\tfor ( f = 0; f < fl; f ++ ) {\n\n\t\t\tflare = this.lensFlares[ f ];\n\n\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/scenes/Scene.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Scene = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Scene';\n\n\tthis.background = null;\n\tthis.fog = null;\n\tthis.overrideMaterial = null;\n\n\tthis.autoUpdate = true; // checked by the renderer\n\n};\n\nTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Scene.prototype.constructor = THREE.Scene;\n\nTHREE.Scene.prototype.copy = function ( source, recursive ) {\n\n\tTHREE.Object3D.prototype.copy.call( this, source, recursive );\n\n\tif ( source.background !== null ) this.background = source.background.clone();\n\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\tthis.autoUpdate = source.autoUpdate;\n\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\treturn this;\n\n};\n\n// File:src/scenes/Fog.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Fog = function ( color, near, far ) {\n\n\tthis.name = '';\n\n\tthis.color = new THREE.Color( color );\n\n\tthis.near = ( near !== undefined ) ? near : 1;\n\tthis.far = ( far !== undefined ) ? far : 1000;\n\n};\n\nTHREE.Fog.prototype.clone = function () {\n\n\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\n\n};\n\n// File:src/scenes/FogExp2.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.FogExp2 = function ( color, density ) {\n\n\tthis.name = '';\n\n\tthis.color = new THREE.Color( color );\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n};\n\nTHREE.FogExp2.prototype.clone = function () {\n\n\treturn new THREE.FogExp2( this.color.getHex(), this.density );\n\n};\n\n// File:src/renderers/shaders/ShaderChunk.js\n\nTHREE.ShaderChunk = {};\n\n// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphamap_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphamap_pars_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphatest_fragment' ] = \"#ifdef ALPHATEST\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\n\nTHREE.ShaderChunk[ 'aomap_fragment' ] = \"#ifdef USE_AOMAP\\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'aomap_pars_fragment' ] = \"#ifdef USE_AOMAP\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\n\nTHREE.ShaderChunk[ 'begin_vertex' ] = \"\\nvec3 transformed = vec3( position );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'beginnormal_vertex' ] = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/bsdfs.glsl\n\nTHREE.ShaderChunk[ 'bsdfs' ] = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\t\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\t\t}\\n\t\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat alpha = pow2( roughness );\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\tfloat D = D_GGX( alpha, dotNH );\\n\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\tvec4 r = roughness * c0 + c1;\\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_BlinnPhong_Implicit( );\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'bumpmap_pars_fragment' ] = \"#ifdef USE_BUMPMAP\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\tvec2 dHdxy_fwd() {\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\t\treturn vec2( dBx, dBy );\\n\t}\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\t\tvec4 plane = clippingPlanes[ i ];\\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_pars_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\t\tvarying vec3 vViewPosition;\\n\t#endif\\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_pars_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\n\nTHREE.ShaderChunk[ 'color_fragment' ] = \"#ifdef USE_COLOR\\n\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'color_pars_fragment' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'color_pars_vertex' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\n\nTHREE.ShaderChunk[ 'color_vertex' ] = \"#ifdef USE_COLOR\\n\tvColor.xyz = color.xyz;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/common.glsl\n\nTHREE.ShaderChunk[ 'common' ] = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\tvec3 color;\\n\tvec3 direction;\\n\tbool visible;\\n};\\nstruct ReflectedLight {\\n\tvec3 directDiffuse;\\n\tvec3 directSpecular;\\n\tvec3 indirectDiffuse;\\n\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\tvec3 position;\\n\tvec3 normal;\\n\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl\n\nTHREE.ShaderChunk[ 'cube_uv_reflection_fragment' ] = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\tvec3 absDirection = abs(direction);\\n\tint face = -1;\\n\tif( absDirection.x > absDirection.z ) {\\n\t\tif(absDirection.x > absDirection.y )\\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\telse {\\n\t\tif(absDirection.z > absDirection.y )\\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\tfloat dxRoughness = dFdx(roughness);\\n\tfloat dyRoughness = dFdy(roughness);\\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\tfloat mipLevel = 0.5 * log2(d);\\n\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\tbool bRes = mipLevel == 0.0;\\n\tscale =  bRes && (scale < a) ? a : scale;\\n\tvec3 r;\\n\tvec2 offset;\\n\tint face = getFaceFromDirection(direction);\\n\tfloat rcpPowScale = 1.0 / powScale;\\n\tif( face == 0) {\\n\t\tr = vec3(direction.x, -direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 1) {\\n\t\tr = vec3(direction.y, direction.x, direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 2) {\\n\t\tr = vec3(direction.z, direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 3) {\\n\t\tr = vec3(direction.x, direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse if( face == 4) {\\n\t\tr = vec3(direction.y, direction.x, -direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse {\\n\t\tr = vec3(direction.z, -direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\tr = normalize(r);\\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\tvec2 base = offset + vec2( texelOffset );\\n\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\tfloat r1 = floor(roughnessVal);\\n\tfloat r2 = r1 + 1.0;\\n\tfloat t = fract(roughnessVal);\\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\tfloat s = mipInfo.y;\\n\tfloat level0 = mipInfo.x;\\n\tfloat level1 = level0 + 1.0;\\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\tvec4 result = mix(color10, color20, t);\\n\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'defaultnormal_vertex' ] = \"#ifdef FLIP_SIDED\\n\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'displacementmap_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'displacementmap_pars_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\n\nTHREE.ShaderChunk[ 'emissivemap_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'emissivemap_pars_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'encodings_pars_fragment' ] = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/encodings_fragment.glsl\n\nTHREE.ShaderChunk[ 'encodings_fragment' ] = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'envmap_fragment' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#else\\n\t\tvec3 reflectVec = vReflect;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\tenvColor = envMapTexelToLinear( envColor );\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'envmap_pars_fragment' ] = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\tuniform float reflectivity;\\n\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\t\tvarying vec3 vWorldPosition;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\t\tuniform float refractionRatio;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'envmap_pars_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvarying vec3 vWorldPosition;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t\tuniform float refractionRatio;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'envmap_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvWorldPosition = worldPosition.xyz;\\n\t#else\\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\n\nTHREE.ShaderChunk[ 'fog_fragment' ] = \"#ifdef USE_FOG\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\t#else\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\t#endif\\n\t#ifdef FOG_EXP2\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\t#else\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\t#endif\\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'fog_pars_fragment' ] = \"#ifdef USE_FOG\\n\tuniform vec3 fogColor;\\n\t#ifdef FOG_EXP2\\n\t\tuniform float fogDensity;\\n\t#else\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'lightmap_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lightmap_pars_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\n\nTHREE.ShaderChunk[ 'lights_lambert_vertex' ] = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\t\t#endif\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_pars.glsl\n\nTHREE.ShaderChunk[ 'lights_pars' ] = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\tvec3 irradiance = ambientLightColor;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\tstruct DirectionalLight {\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tdirectLight.color = directionalLight.color;\\n\t\tdirectLight.direction = directionalLight.direction;\\n\t\tdirectLight.visible = true;\\n\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\tstruct PointLight {\\n\t\tvec3 position;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tvec3 lVector = pointLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\t\t\tdirectLight.color = pointLight.color;\\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tstruct SpotLight {\\n\t\tvec3 position;\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tfloat coneCos;\\n\t\tfloat penumbraCos;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\t\tvec3 lVector = spotLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\t\t\tdirectLight.color = spotLight.color;\\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tstruct HemisphereLight {\\n\t\tvec3 direction;\\n\t\tvec3 skyColor;\\n\t\tvec3 groundColor;\\n\t};\\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tirradiance *= PI;\\n\t\t#endif\\n\t\treturn irradiance;\\n\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\t\t#include <normal_flip>\\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\t\t#else\\n\t\t\tvec4 envMapColor = vec4( 0.0 );\\n\t\t#endif\\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\\n\t}\\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\t}\\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\t\t#endif\\n\t\t#include <normal_flip>\\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\t\tvec2 sampleUV;\\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#endif\\n\t\treturn envMapColor.rgb * envMapIntensity;\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_fragment' ] = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_pars_fragment' ] = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\tvec3\tdiffuseColor;\\n\tvec3\tspecularColor;\\n\tfloat\tspecularShininess;\\n\tfloat\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\t(0)\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_physical_fragment' ] = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_physical_pars_fragment' ] = \"struct PhysicalMaterial {\\n\tvec3\tdiffuseColor;\\n\tfloat\tspecularRoughness;\\n\tvec3\tspecularColor;\\n\t#ifndef STANDARD\\n\t\tfloat clearCoat;\\n\t\tfloat clearCoatRoughness;\\n\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\t#ifndef STANDARD\\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\t#else\\n\t\tfloat clearCoatDHR = 0.0;\\n\t#endif\\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\t#ifndef STANDARD\\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\t#ifndef STANDARD\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\tfloat dotNL = dotNV;\\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\t#else\\n\t\tfloat clearCoatDHR = 0.0;\\n\t#endif\\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\t#ifndef STANDARD\\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\t#endif\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_template.glsl\n\nTHREE.ShaderChunk[ 'lights_template' ] = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\t#ifdef USE_LIGHTMAP\\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tlightMapIrradiance *= PI;\\n\t\t#endif\\n\t\tirradiance += lightMapIrradiance;\\n\t#endif\\n\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t}\\n\t#endif\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\t#endif\\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\t#ifndef STANDARD\\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\t#else\\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\t#endif\\n\t\t\\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_fragment' ] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_pars_fragment' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tuniform float logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_pars_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n\tuniform float logDepthBufFC;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\t#else\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 texelColor = texture2D( map, vUv );\\n\ttexelColor = mapTexelToLinear( texelColor );\\n\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform sampler2D map;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_particle_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_particle_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'metalnessmap_fragment' ] = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'metalnessmap_pars_fragment' ] = \"#ifdef USE_METALNESSMAP\\n\tuniform sampler2D metalnessMap;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphnormal_vertex' ] = \"#ifdef USE_MORPHNORMALS\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphtarget_pars_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\t#ifndef USE_MORPHNORMALS\\n\tuniform float morphTargetInfluences[ 8 ];\\n\t#else\\n\tuniform float morphTargetInfluences[ 4 ];\\n\t#endif\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphtarget_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\t#ifndef USE_MORPHNORMALS\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/normal_flip.glsl\n\nTHREE.ShaderChunk[ 'normal_flip' ] = \"#ifdef DOUBLE_SIDED\\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl\n\nTHREE.ShaderChunk[ 'normal_fragment' ] = \"#ifdef FLAT_SHADED\\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'normalmap_pars_fragment' ] = \"#ifdef USE_NORMALMAP\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/packing.glsl\n\nTHREE.ShaderChunk[ 'packing' ] = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl\n\nTHREE.ShaderChunk[ 'premultiplied_alpha_fragment' ] = \"#ifdef PREMULTIPLIED_ALPHA\\n\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\n\nTHREE.ShaderChunk[ 'project_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'roughnessmap_fragment' ] = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'roughnessmap_pars_fragment' ] = \"#ifdef USE_ROUGHNESSMAP\\n\tuniform sampler2D roughnessMap;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_pars_fragment' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\t}\\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\t\tvec2 f = fract( uv * size + 0.5 );\\n\t\tfloat a = mix( lb, lt, f.y );\\n\t\tfloat b = mix( rb, rt, f.y );\\n\t\tfloat c = mix( a, b, f.x );\\n\t\treturn c;\\n\t}\\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tshadowCoord.xyz /= shadowCoord.w;\\n\t\tshadowCoord.z += shadowBias;\\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\tbool inFrustum = all( inFrustumVec );\\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\t\tbool frustumTest = all( frustumTestVec );\\n\t\tif ( frustumTest ) {\\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\t\t#endif\\n\t\t}\\n\t\treturn 1.0;\\n\t}\\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\t\tvec3 absV = abs( v );\\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\tabsV *= scaleToCube;\\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\t\tvec2 planar = v.xy;\\n\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\tfloat almostOne = 1.0 - almostATexel;\\n\t\tif ( absV.z >= almostOne ) {\\n\t\t\tif ( v.z > 0.0 )\\n\t\t\t\tplanar.x = 4.0 - v.x;\\n\t\t} else if ( absV.x >= almostOne ) {\\n\t\t\tfloat signX = sign( v.x );\\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\t\t} else if ( absV.y >= almostOne ) {\\n\t\t\tfloat signY = sign( v.y );\\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\tplanar.y = v.z * signY - 2.0;\\n\t\t}\\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\t}\\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\t\tvec3 lightToPosition = shadowCoord.xyz;\\n\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\t\t#endif\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_pars_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'shadowmask_pars_fragment' ] = \"float getShadowMask() {\\n\tfloat shadow = 1.0;\\n\t#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#endif\\n\treturn shadow;\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinbase_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinning_pars_vertex' ] = \"#ifdef USE_SKINNING\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\t#ifdef BONE_TEXTURE\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\t\t\ty = dy * ( y + 0.5 );\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\t\t\treturn bone;\\n\t\t}\\n\t#else\\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\t\t}\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinning_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinnormal_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'specularmap_fragment' ] = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n#else\\n\tspecularStrength = 1.0;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'specularmap_pars_fragment' ] = \"#ifdef USE_SPECULARMAP\\n\tuniform sampler2D specularMap;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl\n\nTHREE.ShaderChunk[ 'tonemapping_fragment' ] = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'tonemapping_pars_fragment' ] = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'uv2_pars_fragment' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvarying vec2 vUv2;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv2_pars_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv2_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvUv2 = uv2;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'uv_pars_fragment' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv_pars_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\n\nTHREE.ShaderChunk[ 'worldpos_vertex' ] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\t#ifdef USE_SKINNING\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\t#else\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/UniformsUtils.js\n\n/**\n * Uniform Utilities\n */\n\nTHREE.UniformsUtils = {\n\n\tmerge: function ( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t},\n\n\tclone: function ( uniforms_src ) {\n\n\t\tvar uniforms_dst = {};\n\n\t\tfor ( var u in uniforms_src ) {\n\n\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\tif ( parameter_src instanceof THREE.Color ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\n\t\t\t\t\t parameter_src instanceof THREE.Matrix3 ||\n\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\n\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn uniforms_dst;\n\n\t}\n\n};\n\n// File:src/renderers/shaders/UniformsLib.js\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nTHREE.UniformsLib = {\n\n\tcommon: {\n\n\t\t\"diffuse\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\"opacity\": { value: 1.0 },\n\n\t\t\"map\": { value: null },\n\t\t\"offsetRepeat\": { value: new THREE.Vector4( 0, 0, 1, 1 ) },\n\n\t\t\"specularMap\": { value: null },\n\t\t\"alphaMap\": { value: null },\n\n\t\t\"envMap\": { value: null },\n\t\t\"flipEnvMap\": { value: - 1 },\n\t\t\"reflectivity\": { value: 1.0 },\n\t\t\"refractionRatio\": { value: 0.98 }\n\n\t},\n\n\taomap: {\n\n\t\t\"aoMap\": { value: null },\n\t\t\"aoMapIntensity\": { value: 1 }\n\n\t},\n\n\tlightmap: {\n\n\t\t\"lightMap\": { value: null },\n\t\t\"lightMapIntensity\": { value: 1 }\n\n\t},\n\n\temissivemap: {\n\n\t\t\"emissiveMap\": { value: null }\n\n\t},\n\n\tbumpmap: {\n\n\t\t\"bumpMap\": { value: null },\n\t\t\"bumpScale\": { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\t\"normalMap\": { value: null },\n\t\t\"normalScale\": { value: new THREE.Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\t\"displacementMap\": { value: null },\n\t\t\"displacementScale\": { value: 1 },\n\t\t\"displacementBias\": { value: 0 }\n\n\t},\n\n\troughnessmap: {\n\n\t\t\"roughnessMap\": { value: null }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\t\"metalnessMap\": { value: null }\n\n\t},\n\n\tfog: {\n\n\t\t\"fogDensity\": { value: 0.00025 },\n\t\t\"fogNear\": { value: 1 },\n\t\t\"fogFar\": { value: 2000 },\n\t\t\"fogColor\": { value: new THREE.Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\t\"ambientLightColor\": { value: [] },\n\n\t\t\"directionalLights\": { value: [], properties: {\n\t\t\t\"direction\": {},\n\t\t\t\"color\": {},\n\n\t\t\t\"shadow\": {},\n\t\t\t\"shadowBias\": {},\n\t\t\t\"shadowRadius\": {},\n\t\t\t\"shadowMapSize\": {}\n\t\t} },\n\n\t\t\"directionalShadowMap\": { value: [] },\n\t\t\"directionalShadowMatrix\": { value: [] },\n\n\t\t\"spotLights\": { value: [], properties: {\n\t\t\t\"color\": {},\n\t\t\t\"position\": {},\n\t\t\t\"direction\": {},\n\t\t\t\"distance\": {},\n\t\t\t\"coneCos\": {},\n\t\t\t\"penumbraCos\": {},\n\t\t\t\"decay\": {},\n\n\t\t\t\"shadow\": {},\n\t\t\t\"shadowBias\": {},\n\t\t\t\"shadowRadius\": {},\n\t\t\t\"shadowMapSize\": {}\n\t\t} },\n\n\t\t\"spotShadowMap\": { value: [] },\n\t\t\"spotShadowMatrix\": { value: [] },\n\n\t\t\"pointLights\": { value: [], properties: {\n\t\t\t\"color\": {},\n\t\t\t\"position\": {},\n\t\t\t\"decay\": {},\n\t\t\t\"distance\": {},\n\n\t\t\t\"shadow\": {},\n\t\t\t\"shadowBias\": {},\n\t\t\t\"shadowRadius\": {},\n\t\t\t\"shadowMapSize\": {}\n\t\t} },\n\n\t\t\"pointShadowMap\": { value: [] },\n\t\t\"pointShadowMatrix\": { value: [] },\n\n\t\t\"hemisphereLights\": { value: [], properties: {\n\t\t\t\"direction\": {},\n\t\t\t\"skyColor\": {},\n\t\t\t\"groundColor\": {}\n\t\t} }\n\n\t},\n\n\tpoints: {\n\n\t\t\"diffuse\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\"opacity\": { value: 1.0 },\n\t\t\"size\": { value: 1.0 },\n\t\t\"scale\": { value: 1.0 },\n\t\t\"map\": { value: null },\n\t\t\"offsetRepeat\": { value: new THREE.Vector4( 0, 0, 1, 1 ) }\n\n\t}\n\n};\n\n// File:src/renderers/shaders/ShaderLib/cube_frag.glsl\n\nTHREE.ShaderChunk[ 'cube_frag' ] = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\tgl_FragColor.a *= opacity;\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/cube_vert.glsl\n\nTHREE.ShaderChunk[ 'cube_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/depth_frag.glsl\n\nTHREE.ShaderChunk[ 'depth_frag' ] = \"#if DEPTH_PACKING == 3200\\n\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( 1.0 );\\n\t#if DEPTH_PACKING == 3200\\n\t\tdiffuseColor.a = opacity;\\n\t#endif\\n\t#include <map_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <logdepthbuf_fragment>\\n\t#if DEPTH_PACKING == 3200\\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\t#elif DEPTH_PACKING == 3201\\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\t#endif\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/depth_vert.glsl\n\nTHREE.ShaderChunk[ 'depth_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl\n\nTHREE.ShaderChunk[ 'distanceRGBA_frag' ] = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl\n\nTHREE.ShaderChunk[ 'distanceRGBA_vert' ] = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvWorldPosition = worldPosition;\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/equirect_frag.glsl\n\nTHREE.ShaderChunk[ 'equirect_frag' ] = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tvec3 direction = normalize( vWorldPosition );\\n\tvec2 sampleUV;\\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/equirect_vert.glsl\n\nTHREE.ShaderChunk[ 'equirect_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/linedashed_frag.glsl\n\nTHREE.ShaderChunk[ 'linedashed_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\t\tdiscard;\\n\t}\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <color_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/linedashed_vert.glsl\n\nTHREE.ShaderChunk[ 'linedashed_vert' ] = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\tvLineDistance = scale * lineDistance;\\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\tgl_Position = projectionMatrix * mvPosition;\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshbasic_frag.glsl\n\nTHREE.ShaderChunk[ 'meshbasic_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\tReflectedLight reflectedLight;\\n\treflectedLight.directDiffuse = vec3( 0.0 );\\n\treflectedLight.directSpecular = vec3( 0.0 );\\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\t#include <normal_flip>\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshbasic_vert.glsl\n\nTHREE.ShaderChunk[ 'meshbasic_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <skinbase_vertex>\\n\t#ifdef USE_ENVMAP\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#endif\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <envmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshlambert_frag.glsl\n\nTHREE.ShaderChunk[ 'meshlambert_frag' ] = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <emissivemap_fragment>\\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\t#include <lightmap_fragment>\\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\t#ifdef DOUBLE_SIDED\\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\t#else\\n\t\treflectedLight.directDiffuse = vLightFront;\\n\t#endif\\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\t#include <normal_flip>\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshlambert_vert.glsl\n\nTHREE.ShaderChunk[ 'meshlambert_vert' ] = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <lights_lambert_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphong_frag.glsl\n\nTHREE.ShaderChunk[ 'meshphong_frag' ] = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <normal_flip>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_phong_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphong_vert.glsl\n\nTHREE.ShaderChunk[ 'meshphong_vert' ] = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphysical_frag.glsl\n\nTHREE.ShaderChunk[ 'meshphysical_frag' ] = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\tuniform float clearCoat;\\n\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <roughnessmap_fragment>\\n\t#include <metalnessmap_fragment>\\n\t#include <normal_flip>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_physical_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphysical_vert.glsl\n\nTHREE.ShaderChunk[ 'meshphysical_vert' ] = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/normal_frag.glsl\n\nTHREE.ShaderChunk[ 'normal_frag' ] = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/normal_vert.glsl\n\nTHREE.ShaderChunk[ 'normal_vert' ] = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvNormal = normalize( normalMatrix * normal );\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/points_frag.glsl\n\nTHREE.ShaderChunk[ 'points_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_particle_fragment>\\n\t#include <color_fragment>\\n\t#include <alphatest_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/points_vert.glsl\n\nTHREE.ShaderChunk[ 'points_vert' ] = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#ifdef USE_SIZEATTENUATION\\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\t#else\\n\t\tgl_PointSize = size;\\n\t#endif\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/shadow_frag.glsl\n\nTHREE.ShaderChunk[ 'shadow_frag' ] = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/shadow_vert.glsl\n\nTHREE.ShaderChunk[ 'shadow_vert' ] = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib.js\n\n/**\n * Webgl Shader Library for three.js\n *\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n */\n\n\nTHREE.ShaderLib = {\n\n\t'basic': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ]\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshbasic_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshbasic_frag' ]\n\n\t},\n\n\t'lambert': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t{\n\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshlambert_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshlambert_frag' ]\n\n\t},\n\n\t'phong': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\n\t\t\tTHREE.UniformsLib[ 'normalmap' ],\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t{\n\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\"specular\" : { value: new THREE.Color( 0x111111 ) },\n\t\t\t\t\"shininess\": { value: 30 }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshphong_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshphong_frag' ]\n\n\t},\n\n\t'standard': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\n\t\t\tTHREE.UniformsLib[ 'normalmap' ],\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\n\t\t\tTHREE.UniformsLib[ 'roughnessmap' ],\n\t\t\tTHREE.UniformsLib[ 'metalnessmap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t{\n\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\"roughness\": { value: 0.5 },\n\t\t\t\t\"metalness\": { value: 0 },\n\t\t\t\t\"envMapIntensity\" : { value: 1 }, // temporary\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\n\n\t},\n\n\t'points': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'points' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ]\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'points_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'points_frag' ]\n\n\t},\n\n\t'dashed': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\n\t\t\t{\n\t\t\t\t\"scale\"    : { value: 1 },\n\t\t\t\t\"dashSize\" : { value: 1 },\n\t\t\t\t\"totalSize\": { value: 2 }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'linedashed_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'linedashed_frag' ]\n\n\t},\n\n\t'depth': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ]\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'depth_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'depth_frag' ]\n\n\t},\n\n\t'normal': {\n\n\t\tuniforms: {\n\n\t\t\t\"opacity\" : { value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'normal_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'normal_frag' ]\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\t'cube': {\n\n\t\tuniforms: {\n\t\t\t\"tCube\": { value: null },\n\t\t\t\"tFlip\": { value: - 1 },\n\t\t\t\"opacity\": { value: 1.0 }\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'cube_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'cube_frag' ]\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\t'equirect': {\n\n\t\tuniforms: {\n\t\t\t\"tEquirect\": { value: null },\n\t\t\t\"tFlip\": { value: - 1 }\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'equirect_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'equirect_frag' ]\n\n\t},\n\n\t'distanceRGBA': {\n\n\t\tuniforms: {\n\n\t\t\t\"lightPos\": { value: new THREE.Vector3() }\n\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'distanceRGBA_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'distanceRGBA_frag' ]\n\n\t}\n\n};\n\nTHREE.ShaderLib[ 'physical' ] = {\n\n\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\tTHREE.ShaderLib[ 'standard' ].uniforms,\n\n\t\t{\n\t\t\t\"clearCoat\": { value: 0 },\n\t\t\t\"clearCoatRoughness\": { value: 0 }\n\t\t}\n\n\t] ),\n\n\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\n\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\n\n};\n\n// File:src/renderers/WebGLRenderer.js\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n * @author tschw\n */\n\nTHREE.WebGLRenderer = function ( parameters ) {\n\n\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n\tvar lights = [];\n\n\tvar opaqueObjects = [];\n\tvar opaqueObjectsLastIndex = - 1;\n\tvar transparentObjects = [];\n\tvar transparentObjectsLastIndex = - 1;\n\n\tvar morphInfluences = new Float32Array( 8 );\n\n\tvar sprites = [];\n\tvar lensFlares = [];\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\tthis.context = null;\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\tthis.gammaInput = false;\n\tthis.gammaOutput = false;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = THREE.LinearToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\tthis.toneMappingWhitePoint = 1.0;\n\n\t// morphs\n\n\tthis.maxMorphTargets = 8;\n\tthis.maxMorphNormals = 4;\n\n\t// internal properties\n\n\tvar _this = this,\n\n\t// internal state cache\n\n\t_currentProgram = null,\n\t_currentRenderTarget = null,\n\t_currentFramebuffer = null,\n\t_currentMaterialId = - 1,\n\t_currentGeometryProgram = '',\n\t_currentCamera = null,\n\n\t_currentScissor = new THREE.Vector4(),\n\t_currentScissorTest = null,\n\n\t_currentViewport = new THREE.Vector4(),\n\n\t//\n\n\t_usedTextureUnits = 0,\n\n\t//\n\n\t_clearColor = new THREE.Color( 0x000000 ),\n\t_clearAlpha = 0,\n\n\t_width = _canvas.width,\n\t_height = _canvas.height,\n\n\t_pixelRatio = 1,\n\n\t_scissor = new THREE.Vector4( 0, 0, _width, _height ),\n\t_scissorTest = false,\n\n\t_viewport = new THREE.Vector4( 0, 0, _width, _height ),\n\n\t// frustum\n\n\t_frustum = new THREE.Frustum(),\n\n\t// clipping\n\n\t_clipping = new THREE.WebGLClipping(),\n\t_clippingEnabled = false,\n\t_localClippingEnabled = false,\n\n\t_sphere = new THREE.Sphere(),\n\n\t// camera matrices cache\n\n\t_projScreenMatrix = new THREE.Matrix4(),\n\n\t_vector3 = new THREE.Vector3(),\n\n\t// light arrays cache\n\n\t_lights = {\n\n\t\thash: '',\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tdirectional: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotShadowMap: [],\n\t\tspotShadowMatrix: [],\n\t\tpoint: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: [],\n\n\t\tshadows: []\n\n\t},\n\n\t// info\n\n\t_infoRender = {\n\n\t\tcalls: 0,\n\t\tvertices: 0,\n\t\tfaces: 0,\n\t\tpoints: 0\n\n\t};\n\n\tthis.info = {\n\n\t\trender: _infoRender,\n\t\tmemory: {\n\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\n\t\t},\n\t\tprograms: null\n\n\t};\n\n\n\t// initialize\n\n\tvar _gl;\n\n\ttry {\n\n\t\tvar attributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t\t};\n\n\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n\t\t\t} else {\n\n\t\t\t\tthrow 'Error creating WebGL context.';\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n\t}\n\n\tvar extensions = new THREE.WebGLExtensions( _gl );\n\n\textensions.get( 'WEBGL_depth_texture' );\n\textensions.get( 'OES_texture_float' );\n\textensions.get( 'OES_texture_float_linear' );\n\textensions.get( 'OES_texture_half_float' );\n\textensions.get( 'OES_texture_half_float_linear' );\n\textensions.get( 'OES_standard_derivatives' );\n\textensions.get( 'ANGLE_instanced_arrays' );\n\n\tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\tTHREE.BufferGeometry.MaxIndex = 4294967296;\n\n\t}\n\n\tvar capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );\n\n\tvar state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );\n\tvar properties = new THREE.WebGLProperties();\n\tvar textures = new THREE.WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n\tvar objects = new THREE.WebGLObjects( _gl, properties, this.info );\n\tvar programCache = new THREE.WebGLPrograms( this, capabilities );\n\tvar lightCache = new THREE.WebGLLights();\n\n\tthis.info.programs = programCache.programs;\n\n\tvar bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );\n\tvar indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n\t//\n\n\tvar backgroundCamera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar backgroundCamera2 = new THREE.PerspectiveCamera();\n\tvar backgroundPlaneMesh = new THREE.Mesh(\n\t\tnew THREE.PlaneBufferGeometry( 2, 2 ),\n\t\tnew THREE.MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t);\n\tvar backgroundBoxShader = THREE.ShaderLib[ 'cube' ];\n\tvar backgroundBoxMesh = new THREE.Mesh(\n\t\tnew THREE.BoxBufferGeometry( 5, 5, 5 ),\n\t\tnew THREE.ShaderMaterial( {\n\t\t\tuniforms: backgroundBoxShader.uniforms,\n\t\t\tvertexShader: backgroundBoxShader.vertexShader,\n\t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n\t\t\tside: THREE.BackSide,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tfog: false\n\t\t} )\n\t);\n\n\t//\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\tfunction glClearColor( r, g, b, a ) {\n\n\t\tif ( _premultipliedAlpha === true ) {\n\n\t\t\tr *= a; g *= a; b *= a;\n\n\t\t}\n\n\t\tstate.clearColor( r, g, b, a );\n\n\t}\n\n\tfunction setDefaultGLState() {\n\n\t\tstate.init();\n\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t}\n\n\tfunction resetGLState() {\n\n\t\t_currentProgram = null;\n\t\t_currentCamera = null;\n\n\t\t_currentGeometryProgram = '';\n\t\t_currentMaterialId = - 1;\n\n\t\tstate.reset();\n\n\t}\n\n\tsetDefaultGLState();\n\n\tthis.context = _gl;\n\tthis.capabilities = capabilities;\n\tthis.extensions = extensions;\n\tthis.properties = properties;\n\tthis.state = state;\n\n\t// shadow map\n\n\tvar shadowMap = new THREE.WebGLShadowMap( this, _lights, objects, capabilities );\n\n\tthis.shadowMap = shadowMap;\n\n\n\t// Plugins\n\n\tvar spritePlugin = new THREE.SpritePlugin( this, sprites );\n\tvar lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\n\t};\n\n\tthis.getMaxAnisotropy = function () {\n\n\t\treturn capabilities.getMaxAnisotropy();\n\n\t};\n\n\tthis.getPrecision = function () {\n\n\t\treturn capabilities.precision;\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _viewport.z, _viewport.w, false );\n\n\t};\n\n\tthis.getSize = function () {\n\n\t\treturn {\n\t\t\twidth: _width,\n\t\t\theight: _height\n\t\t};\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = width * _pixelRatio;\n\t\t_canvas.height = height * _pixelRatio;\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function () {\n\n\t\treturn _clearColor;\n\n\t};\n\n\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t_clearColor.set( color );\n\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn _clearAlpha;\n\n\t};\n\n\tthis.setClearAlpha = function ( alpha ) {\n\n\t\t_clearAlpha = alpha;\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tvar bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\tthis.setRenderTarget( renderTarget );\n\t\tthis.clear( color, depth, stencil );\n\n\t};\n\n\t// Reset\n\n\tthis.resetGLState = resetGLState;\n\n\tthis.dispose = function() {\n\n\t\ttransparentObjects = [];\n\t\ttransparentObjectsLastIndex = -1;\n\t\topaqueObjects = [];\n\t\topaqueObjectsLastIndex = -1;\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tresetGLState();\n\t\tsetDefaultGLState();\n\n\t\tproperties.clear();\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tvar material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReference( material );\n\n\t\tproperties.delete( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReference( material ) {\n\n\t\tvar programInfo = properties.get( material ).program;\n\n\t\tmaterial.program = undefined;\n\n\t\tif ( programInfo !== undefined ) {\n\n\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tthis.renderBufferImmediate = function ( object, program, material ) {\n\n\t\tstate.initAttributes();\n\n\t\tvar buffers = properties.get( object );\n\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\tvar attributes = program.getAttributes();\n\n\t\tif ( object.hasPositions ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.position );\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasNormals ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n\t\t\tif ( material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.type !== 'MeshPhysicalMaterial' && material.shading === THREE.FlatShading ) {\n\n\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n\t\t\t\t\tvar array = object.normalArray;\n\n\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\tarray[ i + 2 ] = nz;\n\n\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\tarray[ i + 5 ] = nz;\n\n\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\tarray[ i + 8 ] = nz;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.normal );\n\n\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasUvs && material.map ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.uv );\n\n\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.color );\n\n\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\tobject.count = 0;\n\n\t};\n\n\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\tsetMaterial( material );\n\n\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\tvar updateBuffers = false;\n\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\n\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\n\t\tif ( morphTargetInfluences !== undefined ) {\n\n\t\t\tvar activeInfluences = [];\n\n\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\n\t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t\t\t\tactiveInfluences.push( [ influence, i ] );\n\n\t\t\t}\n\n\t\t\tactiveInfluences.sort( absNumericalSort );\n\n\t\t\tif ( activeInfluences.length > 8 ) {\n\n\t\t\t\tactiveInfluences.length = 8;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\n\t\t\t\tvar influence = activeInfluences[ i ];\n\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\n\t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\n\t\t\t\t\tvar index = influence[ 1 ];\n\n\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tprogram.getUniforms().setValue(\n\t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t//\n\n\t\tvar index = geometry.index;\n\t\tvar position = geometry.attributes.position;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = objects.getWireframeAttribute( geometry );\n\n\t\t}\n\n\t\tvar renderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( index );\n\n\t\t} else {\n\n\t\t\trenderer = bufferRenderer;\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar dataStart = 0;\n\t\tvar dataCount = Infinity;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdataCount = index.count;\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\tdataCount = position.count;\n\n\t\t}\n\n\t\tvar rangeStart = geometry.drawRange.start;\n\t\tvar rangeCount = geometry.drawRange.count;\n\n\t\tvar groupStart = group !== null ? group.start : 0;\n\t\tvar groupCount = group !== null ? group.count : Infinity;\n\n\t\tvar drawStart = Math.max( dataStart, rangeStart, groupStart );\n\t\tvar drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t//\n\n\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\tcase THREE.TrianglesDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TriangleStripDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TriangleFanDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object instanceof THREE.LineSegments ) {\n\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t}\n\n\t\t} else if ( object instanceof THREE.Points ) {\n\n\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t}\n\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\n\n\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n\t\tvar extension;\n\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( startIndex === undefined ) startIndex = 0;\n\n\t\tstate.initAttributes();\n\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( var name in programAttributes ) {\n\n\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tvar type = _gl.FLOAT;\n\t\t\t\t\tvar array = geometryAttribute.array;\n\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\n\t\t\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\t\t\ttype = _gl.FLOAT;\n\n\t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\t\t\tconsole.warn(\"Unsupported data buffer format: Float64Array\");\n\n\t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\n\t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\t\t\ttype = _gl.SHORT;\n\n\t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\n\t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\t\t\ttype = _gl.INT;\n\n\t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\t\t\ttype = _gl.BYTE;\n\n\t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\n\t\t\t\t\tif ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data instanceof THREE.InstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t}\n\n\t// Sorting\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\n\t}\n\n\tfunction painterSortStable ( a, b ) {\n\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n\t\t} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {\n\n\t\t\treturn a.material.program.id - b.material.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable ( a, b ) {\n\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n\t\t} if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar fog = scene.fog;\n\n\t\t// reset caching for this frame\n\n\t\t_currentGeometryProgram = '';\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\tlights.length = 0;\n\n\t\topaqueObjectsLastIndex = - 1;\n\t\ttransparentObjectsLastIndex = - 1;\n\n\t\tsprites.length = 0;\n\t\tlensFlares.length = 0;\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tprojectObject( scene, camera );\n\n\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\topaqueObjects.sort( painterSortStable );\n\t\t\ttransparentObjects.sort( reversePainterSortStable );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\tsetupShadows( lights );\n\n\t\tshadowMap.render( scene, camera );\n\n\t\tsetupLights( lights, camera );\n\n\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t//\n\n\t\t_infoRender.calls = 0;\n\t\t_infoRender.vertices = 0;\n\t\t_infoRender.faces = 0;\n\t\t_infoRender.points = 0;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\trenderTarget = null;\n\n\t\t}\n\n\t\tthis.setRenderTarget( renderTarget );\n\n\t\t//\n\n\t\tvar background = scene.background;\n\n\t\tif ( background === null ) {\n\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t\t} else if ( background instanceof THREE.Color ) {\n\n\t\t\tglClearColor( background.r, background.g, background.b, 1 );\n\n\t\t}\n\n\t\tif ( this.autoClear || forceClear ) {\n\n\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background instanceof THREE.CubeTexture ) {\n\n\t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n\t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\n\t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n\t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\n\t\t\tobjects.update( backgroundBoxMesh );\n\n\t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\n\t\t} else if ( background instanceof THREE.Texture ) {\n\n\t\t\tbackgroundPlaneMesh.material.map = background;\n\n\t\t\tobjects.update( backgroundPlaneMesh );\n\n\t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( scene.overrideMaterial ) {\n\n\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n\t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\n\t\t} else {\n\n\t\t\t// opaque pass (front-to-back order)\n\n\t\t\tstate.setBlending( THREE.NoBlending );\n\t\t\trenderObjects( opaqueObjects, camera, fog );\n\n\t\t\t// transparent pass (back-to-front order)\n\n\t\t\trenderObjects( transparentObjects, camera, fog );\n\n\t\t}\n\n\t\t// custom render plugins (post pass)\n\n\t\tspritePlugin.render( scene, camera );\n\t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\tif ( renderTarget ) {\n\n\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n\t\t}\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.setDepthTest( true );\n\t\tstate.setDepthWrite( true );\n\t\tstate.setColorWrite( true );\n\n\t\t// _gl.finish();\n\n\t};\n\n\tfunction pushRenderItem( object, geometry, material, z, group ) {\n\n\t\tvar array, index;\n\n\t\t// allocate the next position in the appropriate array\n\n\t\tif ( material.transparent ) {\n\n\t\t\tarray = transparentObjects;\n\t\t\tindex = ++ transparentObjectsLastIndex;\n\n\t\t} else {\n\n\t\t\tarray = opaqueObjects;\n\t\t\tindex = ++ opaqueObjectsLastIndex;\n\n\t\t}\n\n\t\t// recycle existing render item or grow the array\n\n\t\tvar renderItem = array[ index ];\n\n\t\tif ( renderItem !== undefined ) {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.z = _vector3.z;\n\t\t\trenderItem.group = group;\n\n\t\t} else {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tz: _vector3.z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\t// assert( index === array.length );\n\t\t\tarray.push( renderItem );\n\n\t\t}\n\n\t}\n\n\t// TODO Duplicated code (Frustum)\n\n\tfunction isObjectViewable( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null )\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere ).\n\t\t\tapplyMatrix4( object.matrixWorld );\n\n\t\treturn isSphereViewable( _sphere );\n\n\t}\n\n\tfunction isSpriteViewable( sprite ) {\n\n\t\t_sphere.center.set( 0, 0, 0 );\n\t\t_sphere.radius = 0.7071067811865476;\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn isSphereViewable( _sphere );\n\n\t}\n\n\tfunction isSphereViewable( sphere ) {\n\n\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\tif ( numPlanes === 0 ) return true;\n\n\t\tvar planes = _this.clippingPlanes,\n\n\t\t\tcenter = sphere.center,\n\t\t\tnegRad = - sphere.radius,\n\t\t\ti = 0;\n\n\t\tdo {\n\n\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t} while ( ++ i !== numPlanes );\n\n\t\treturn true;\n\n\t}\n\n\tfunction projectObject( object, camera ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object.layers.test( camera.layers ) ) {\n\n\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\tlights.push( object );\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\n\t\t\t\t\tsprites.push( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.LensFlare ) {\n\n\t\t\t\tlensFlares.push( object );\n\n\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject ) {\n\n\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\n\n\t\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material.visible === true ) {\n\n\t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\n\t\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\t\tvar materials = material.materials;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera );\n\n\t\t}\n\n\t}\n\n\tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\n\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\tvar object = renderItem.object;\n\t\t\tvar geometry = renderItem.geometry;\n\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\tvar group = renderItem.group;\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object instanceof THREE.ImmediateRenderObject ) {\n\n\t\t\t\tsetMaterial( material );\n\n\t\t\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\t\t\t_currentGeometryProgram = '';\n\n\t\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n\t\t\t\t} );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initMaterial( material, fog, object ) {\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tvar parameters = programCache.getParameters(\n\t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\n\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\tvar program = materialProperties.program;\n\t\tvar programChange = true;\n\n\t\tif ( program === undefined ) {\n\n\t\t\t// new material\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t} else if ( program.code !== code ) {\n\n\t\t\t// changed glsl or parameters\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t// same glsl and uniform list\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// only rebuild uniform list\n\t\t\tprogramChange = false;\n\n\t\t}\n\n\t\tif ( programChange ) {\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tvar shader = THREE.ShaderLib[ parameters.shaderID ];\n\n\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\n\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\n\t\t\tmaterialProperties.program = program;\n\t\t\tmaterial.program = program;\n\n\t\t}\n\n\t\tvar attributes = program.getAttributes();\n\n\t\tif ( material.morphTargets ) {\n\n\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.morphNormals ) {\n\n\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\n\t\tif ( ! ( material instanceof THREE.ShaderMaterial ) &&\n\t\t\t\t! ( material instanceof THREE.RawShaderMaterial ) ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t}\n\n\t\tif ( material.lights ) {\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.lightsHash = _lights.hash;\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n\t\t\tuniforms.directionalLights.value = _lights.directional;\n\t\t\tuniforms.spotLights.value = _lights.spot;\n\t\t\tuniforms.pointLights.value = _lights.point;\n\t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n\t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n\t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\n\t\t}\n\n\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\tuniformsList =\n\t\t\t\t\tTHREE.WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.uniformsList = uniformsList;\n\t\tmaterialProperties.dynamicUniforms =\n\t\t\t\tTHREE.WebGLUniforms.splitDynamic( uniformsList, uniforms );\n\n\t}\n\n\tfunction setMaterial( material ) {\n\n\t\tif ( material.side !== THREE.DoubleSide )\n\t\t\tstate.enable( _gl.CULL_FACE );\n\t\telse\n\t\t\tstate.disable( _gl.CULL_FACE );\n\n\t\tstate.setFlipSided( material.side === THREE.BackSide );\n\n\t\tif ( material.transparent === true ) {\n\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t} else {\n\n\t\t\tstate.setBlending( THREE.NoBlending );\n\n\t\t}\n\n\t\tstate.setDepthFunc( material.depthFunc );\n\t\tstate.setDepthTest( material.depthTest );\n\t\tstate.setDepthWrite( material.depthWrite );\n\t\tstate.setColorWrite( material.colorWrite );\n\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t}\n\n\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t_usedTextureUnits = 0;\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tif ( _clippingEnabled ) {\n\n\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t}\n\n\t\t\tif ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\tmaterial.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( materialProperties.lightsHash !== undefined &&\n\t\t\tmaterialProperties.lightsHash !== _lights.hash ) {\n\n\t\t\tmaterial.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( material.needsUpdate ) {\n\n\t\t\tinitMaterial( material, fog, object );\n\t\t\tmaterial.needsUpdate = false;\n\n\t\t}\n\n\t\tvar refreshProgram = false;\n\t\tvar refreshMaterial = false;\n\t\tvar refreshLights = false;\n\n\t\tvar program = materialProperties.program,\n\t\t\tp_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\n\t\tif ( program.id !== _currentProgram ) {\n\n\t\t\t_gl.useProgram( program.program );\n\t\t\t_currentProgram = program.id;\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n\t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\n\t\t\tif ( camera !== _currentCamera ) {\n\n\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material instanceof THREE.ShaderMaterial ||\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t material.envMap ) {\n\n\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t material instanceof THREE.ShaderMaterial ||\n\t\t\t\t material.skinning ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n\t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\n\t\t}\n\n\t\t// skinning uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t// not sure why, but otherwise weird things happen\n\n\t\tif ( material.skinning ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tvar skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tif ( material.lights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t material instanceof THREE.MeshDepthMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t}\n\n\t\t\t// refresh single material specific uniforms\n\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.PointsMaterial ) {\n\n\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\n\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshStandardMaterial ) {\n\n\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\n\n\t\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n\t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n\t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t\t}\n\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t}\n\n\t\t\tTHREE.WebGLUniforms.upload(\n\t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n\t\t}\n\n\n\t\t// common matrices\n\n\t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n\t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\n\t\t// dynamic uniforms\n\n\t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\n\t\tif ( dynUniforms !== null ) {\n\n\t\t\tTHREE.WebGLUniforms.evalDynamic(\n\t\t\t\t\tdynUniforms, m_uniforms, object, camera );\n\n\t\t\tTHREE.WebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\t// Uniforms (refresh uniforms objects)\n\n\tfunction refreshUniformsCommon ( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tuniforms.diffuse.value = material.color;\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tuniforms.map.value = material.map;\n\t\tuniforms.specularMap.value = material.specularMap;\n\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. normal map\n\t\t// 4. bump map\n\t\t// 5. alpha map\n\t\t// 6. emissive map\n\n\t\tvar uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tvar offset = uvScaleMap.offset;\n\t\t\tvar repeat = uvScaleMap.repeat;\n\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t}\n\n\t\tuniforms.envMap.value = material.envMap;\n\n\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap instanceof THREE.CubeTexture ) ) ? 1 : - 1;\n\n\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t}\n\n\tfunction refreshUniformsLine ( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash ( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints ( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\n\t\tuniforms.map.value = material.map;\n\n\t\tif ( material.map !== null ) {\n\n\t\t\tvar offset = material.map.offset;\n\t\t\tvar repeat = material.map.repeat;\n\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsFog ( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value = fog.color;\n\n\t\tif ( fog instanceof THREE.Fog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLambert ( uniforms, material ) {\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong ( uniforms, material ) {\n\n\t\tuniforms.specular.value = material.specular;\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard ( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical ( uniforms, material ) {\n\n\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n\t\trefreshUniformsStandard( uniforms, material );\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate ( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\t// Lighting\n\n\tfunction setupShadows ( lights ) {\n\n\t\tvar lightShadowsLength = 0;\n\n\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tvar light = lights[ i ];\n\n\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\n\t\t\t}\n\n\t\t}\n\n\t\t_lights.shadows.length = lightShadowsLength;\n\n\t}\n\n\tfunction setupLights ( lights, camera ) {\n\n\t\tvar l, ll, light,\n\t\tr = 0, g = 0, b = 0,\n\t\tcolor,\n\t\tintensity,\n\t\tdistance,\n\t\tshadowMap,\n\n\t\tviewMatrix = camera.matrixWorldInverse,\n\n\t\tdirectionalLength = 0,\n\t\tpointLength = 0,\n\t\tspotLength = 0,\n\t\themiLength = 0;\n\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\tlight = lights[ l ];\n\n\t\t\tcolor = light.color;\n\t\t\tintensity = light.intensity;\n\t\t\tdistance = light.distance;\n\n\t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\n\t\t\t\tr += color.r * intensity;\n\t\t\t\tg += color.g * intensity;\n\t\t\t\tb += color.b * intensity;\n\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\n\t\t\t} else if ( light instanceof THREE.SpotLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\n\t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\n\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new THREE.Matrix4();\n\n\t\t\t\t}\n\n\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t// equal to inverse of the light's position\n\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n\t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\n\t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\n\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\n\t\t\t}\n\n\t\t}\n\n\t\t_lights.ambient[ 0 ] = r;\n\t\t_lights.ambient[ 1 ] = g;\n\t\t_lights.ambient[ 2 ] = b;\n\n\t\t_lights.directional.length = directionalLength;\n\t\t_lights.spot.length = spotLength;\n\t\t_lights.point.length = pointLength;\n\t\t_lights.hemi.length = hemiLength;\n\n\t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\n\t}\n\n\t// GL state setting\n\n\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n\t\tstate.setCullFace( cullFace );\n\t\tstate.setFlipSided( frontFaceDirection === THREE.FrontFaceDirectionCW );\n\n\t};\n\n\t// Textures\n\n\tfunction allocTextureUnit() {\n\n\t\tvar textureUnit = _usedTextureUnits;\n\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t}\n\n\t\t_usedTextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tthis.allocTextureUnit = allocTextureUnit;\n\n\t// this.setTexture2D = setTexture2D;\n\tthis.setTexture2D = ( function() {\n\n\t\tvar warned = false;\n\n\t\t// backwards compatibility: peel texture.texture\n\t\treturn function setTexture2D( texture, slot ) {\n\n\t\t\tif ( texture instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t};\n\n\t}() );\n\n\tthis.setTexture = ( function() {\n\n\t\tvar warned = false;\n\n\t\treturn function setTexture( texture, slot ) {\n\n\t\t\tif ( ! warned ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\twarned = true;\n\n\t\t\t}\n\n\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t};\n\n\t}() );\n\n\tthis.setTextureCube = ( function() {\n\n\t\tvar warned = false;\n\n\t\treturn function setTextureCube( texture, slot ) {\n\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\tif ( texture instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( texture instanceof THREE.CubeTexture ||\n\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\ttextures.setTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t};\n\n\t}() );\n\n\tthis.getCurrentRenderTarget = function() {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\tvar framebuffer;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\n\t\t} else {\n\n\t\t\tframebuffer = null;\n\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\n\t\t}\n\n\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t}\n\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tstate.viewport( _currentViewport );\n\n\t\tif ( isCube ) {\n\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n\t\t}\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( framebuffer ) {\n\n\t\t\tvar restore = false;\n\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\trestore = true;\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tvar texture = renderTarget.texture;\n\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.type !== THREE.UnsignedByteType &&\n\t\t\t\t     paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) &&\n\t\t\t\t     ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) ) &&\n\t\t\t\t     ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t// Map three.js constants to WebGL constants\n\n\tfunction paramThreeToGL ( p ) {\n\n\t\tvar extension;\n\n\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\n\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\n\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\n\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\n\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\n\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t\tif ( p === THREE.IntType ) return _gl.INT;\n\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\n\n\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;\n\n\t\t}\n\n\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\n\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\n\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\n\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\n\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\t\tif ( p === THREE.DepthFormat ) return _gl.DEPTH_COMPONENT;\n\n\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\n\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\n\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\n\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\n\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\n\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\n\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t}\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\tif ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\tif ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\tif ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t}\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.MinEquation ) return extension.MIN_EXT;\n\t\t\tif ( p === THREE.MaxEquation ) return extension.MAX_EXT;\n\n\t\t}\n\n\t\treturn 0;\n\n\t}\n\n};\n\n// File:src/renderers/WebGLRenderTarget.js\n\n/**\n * @author szimek / https://github.com/szimek/\n * @author alteredq / http://alteredqualia.com/\n * @author Marius Kintel / https://github.com/kintel\n */\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nTHREE.WebGLRenderTarget = function ( width, height, options ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.width = width;\n\tthis.height = height;\n\n\tthis.scissor = new THREE.Vector4( 0, 0, width, height );\n\tthis.scissorTest = false;\n\n\tthis.viewport = new THREE.Vector4( 0, 0, width, height );\n\n\toptions = options || {};\n\n\tif ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;\n\n\tthis.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\tthis.depthTexture = null;\n\n};\n\nObject.assign( THREE.WebGLRenderTarget.prototype, THREE.EventDispatcher.prototype, {\n\n\tsetSize: function ( width, height ) {\n\n\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n// File:src/renderers/WebGLRenderTargetCube.js\n\n/**\n * @author alteredq / http://alteredqualia.com\n */\n\nTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\n\n\tTHREE.WebGLRenderTarget.call( this, width, height, options );\n\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\tthis.activeMipMapLevel = 0;\n\n};\n\nTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\nTHREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;\n\n// File:src/renderers/webgl/WebGLBufferRenderer.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\t_gl.drawArrays( mode, start, count );\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\n\n\t}\n\n\tfunction renderInstances( geometry ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar position = geometry.attributes.position;\n\n\t\tvar count = 0;\n\n\t\tif ( position instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\tcount = position.data.count;\n\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t} else {\n\n\t\t\tcount = position.count;\n\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t}\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n\t}\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n};\n\n// File:src/renderers/webgl/WebGLClipping.js\n\nTHREE.WebGLClipping = function() {\n\n\tvar scope = this,\n\n\t\tglobalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false,\n\n\t\tplane = new THREE.Plane(),\n\t\tviewNormalMatrix = new THREE.Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\n\tthis.init = function( planes, enableLocalClipping, camera ) {\n\n\t\tvar enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function() {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function() {\n\n\t\trenderingShadows = false;\n\t\tresetGlobalState();\n\n\t};\n\n\tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\n\t\tif ( ! localClippingEnabled ||\n\t\t\t\tplanes === null || planes.length === 0 ||\n\t\t\t\trenderingShadows && ! clipShadows ) {\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tcache.clippingState = dstArray;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\tdstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, i4 = dstOffset;\n\t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).\n\t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\t\treturn dstArray;\n\n\t}\n\n};\n\n\n// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tvar type, size;\n\n\tfunction setIndex( index ) {\n\n\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\t\ttype = _gl.UNSIGNED_INT;\n\t\t\tsize = 4;\n\n\t\t} else {\n\n\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\t\tsize = 2;\n\n\t\t}\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\t_gl.drawElements( mode, count, type, start * size );\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\n\n\t}\n\n\tfunction renderInstances( geometry, start, count ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t}\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n};\n\n// File:src/renderers/webgl/WebGLExtensions.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLExtensions = function ( gl ) {\n\n\tvar extensions = {};\n\n\tthis.get = function ( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tvar extension;\n\n\t\tswitch ( name ) {\n\n\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\textension = gl.getExtension( name );\n\n\t\t}\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLCapabilities.js\n\nTHREE.WebGLCapabilities = function ( gl, extensions, parameters ) {\n\n\tvar maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tthis.getMaxAnisotropy = getMaxAnisotropy;\n\tthis.getMaxPrecision = getMaxPrecision;\n\n\tthis.precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tthis.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\n\n\tthis.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\tthis.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\tthis.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\tthis.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\tthis.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tthis.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\tthis.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\tthis.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\tthis.vertexTextures = this.maxVertexTextures > 0;\n\tthis.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\tthis.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\n\n\tvar _maxPrecision = getMaxPrecision( this.precision );\n\n\tif ( _maxPrecision !== this.precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );\n\t\tthis.precision = _maxPrecision;\n\n\t}\n\n\tif ( this.logarithmicDepthBuffer ) {\n\n\t\tthis.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );\n\n\t}\n\n};\n\n// File:src/renderers/webgl/WebGLGeometries.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLGeometries = function ( gl, properties, info ) {\n\n\tvar geometries = {};\n\n\tfunction get( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\n\t\t\treturn geometries[ geometry.id ];\n\n\t\t}\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tvar buffergeometry;\n\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tbuffergeometry = geometry;\n\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\tgeometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );\n\n\t\t\t}\n\n\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t}\n\n\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tvar geometry = event.target;\n\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\tdeleteAttribute( buffergeometry.index );\n\n\t\t}\n\n\t\tdeleteAttributes( buffergeometry.attributes );\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\t// TODO\n\n\t\tvar property = properties.get( geometry );\n\n\t\tif ( property.wireframe ) {\n\n\t\t\tdeleteAttribute( property.wireframe );\n\n\t\t}\n\n\t\tproperties.delete( geometry );\n\n\t\tvar bufferproperty = properties.get( buffergeometry );\n\n\t\tif ( bufferproperty.wireframe ) {\n\n\t\t\tdeleteAttribute( bufferproperty.wireframe );\n\n\t\t}\n\n\t\tproperties.delete( buffergeometry );\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction getAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n\t\t}\n\n\t\treturn properties.get( attribute ).__webglBuffer;\n\n\t}\n\n\tfunction deleteAttribute( attribute ) {\n\n\t\tvar buffer = getAttributeBuffer( attribute );\n\n\t\tif ( buffer !== undefined ) {\n\n\t\t\tgl.deleteBuffer( buffer );\n\t\t\tremoveAttributeBuffer( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction deleteAttributes( attributes ) {\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tdeleteAttribute( attributes[ name ] );\n\n\t\t}\n\n\t}\n\n\tfunction removeAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\tproperties.delete( attribute.data );\n\n\t\t} else {\n\n\t\t\tproperties.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tthis.get = get;\n\n};\n\n// File:src/renderers/webgl/WebGLLights.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLLights = function () {\n\n\tvar lights = {};\n\n\tthis.get = function ( light ) {\n\n\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\treturn lights[ light.id ];\n\n\t\t}\n\n\t\tvar uniforms;\n\n\t\tswitch ( light.type ) {\n\n\t\t\tcase 'DirectionalLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\tcolor: new THREE.Color(),\n\n\t\t\t\t\tshadow: false,\n\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tposition: new THREE.Vector3(),\n\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\tcolor: new THREE.Color(),\n\t\t\t\t\tdistance: 0,\n\t\t\t\t\tconeCos: 0,\n\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\tshadow: false,\n\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tposition: new THREE.Vector3(),\n\t\t\t\t\tcolor: new THREE.Color(),\n\t\t\t\t\tdistance: 0,\n\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\tshadow: false,\n\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\tskyColor: new THREE.Color(),\n\t\t\t\t\tgroundColor: new THREE.Color()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tlights[ light.id ] = uniforms;\n\n\t\treturn uniforms;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLObjects.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLObjects = function ( gl, properties, info ) {\n\n\tvar geometries = new THREE.WebGLGeometries( gl, properties, info );\n\n\t//\n\n\tfunction update( object ) {\n\n\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\n\t\tvar geometry = geometries.get( object );\n\n\t\tif ( object.geometry instanceof THREE.Geometry ) {\n\n\t\t\tgeometry.updateFromObject( object );\n\n\t\t}\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\n\t\tif ( index !== null ) {\n\n\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t}\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction updateAttribute( attribute, bufferType ) {\n\n\t\tvar data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;\n\n\t\tvar attributeProperties = properties.get( data );\n\n\t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\n\t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\n\t\t} else if ( attributeProperties.version !== data.version ) {\n\n\t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\n\t\t}\n\n\t}\n\n\tfunction createBuffer( attributeProperties, data, bufferType ) {\n\n\t\tattributeProperties.__webglBuffer = gl.createBuffer();\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\tgl.bufferData( bufferType, data.array, usage );\n\n\t\tattributeProperties.version = data.version;\n\n\t}\n\n\tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n\t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\n\t\t} else if ( data.updateRange.count === 0 ) {\n\n\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t} else {\n\n\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\n\t\t\tdata.updateRange.count = 0; // reset range\n\n\t\t}\n\n\t\tattributeProperties.version = data.version;\n\n\t}\n\n\tfunction getAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n\t\t}\n\n\t\treturn properties.get( attribute ).__webglBuffer;\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tvar property = properties.get( geometry );\n\n\t\tif ( property.wireframe !== undefined ) {\n\n\t\t\treturn property.wireframe;\n\n\t\t}\n\n\t\tvar indices = [];\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\t\tvar position = attributes.position;\n\n\t\t// console.time( 'wireframe' );\n\n\t\tif ( index !== null ) {\n\n\t\t\tvar edges = {};\n\t\t\tvar array = index.array;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\tif ( checkEdge( edges, a, b ) ) indices.push( a, b );\n\t\t\t\tif ( checkEdge( edges, b, c ) ) indices.push( b, c );\n\t\t\t\tif ( checkEdge( edges, c, a ) ) indices.push( c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar array = attributes.position.array;\n\n\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tvar a = i + 0;\n\t\t\t\tvar b = i + 1;\n\t\t\t\tvar c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// console.timeEnd( 'wireframe' );\n\n\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n\t\tvar attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );\n\n\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\tproperty.wireframe = attribute;\n\n\t\treturn attribute;\n\n\t}\n\n\tfunction checkEdge( edges, a, b ) {\n\n\t\tif ( a > b ) {\n\n\t\t\tvar tmp = a;\n\t\t\ta = b;\n\t\t\tb = tmp;\n\n\t\t}\n\n\t\tvar list = edges[ a ];\n\n\t\tif ( list === undefined ) {\n\n\t\t\tedges[ a ] = [ b ];\n\t\t\treturn true;\n\n\t\t} else if ( list.indexOf( b ) === -1 ) {\n\n\t\t\tlist.push( b );\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tthis.getAttributeBuffer = getAttributeBuffer;\n\tthis.getWireframeAttribute = getWireframeAttribute;\n\n\tthis.update = update;\n\n};\n\n// File:src/renderers/webgl/WebGLProgram.js\n\nTHREE.WebGLProgram = ( function () {\n\n\tvar programIdCount = 0;\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase THREE.LinearEncoding:\n\t\t\t\treturn [ 'Linear','( value )' ];\n\t\t\tcase THREE.sRGBEncoding:\n\t\t\t\treturn [ 'sRGB','( value )' ];\n\t\t\tcase THREE.RGBEEncoding:\n\t\t\t\treturn [ 'RGBE','( value )' ];\n\t\t\tcase THREE.RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n\t\t\tcase THREE.RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n\t\t\tcase THREE.RGBDEncoding:\n\t\t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n\t\t\tcase THREE.GammaEncoding:\n\t\t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase THREE.LinearToneMapping:\n\t\t\t\ttoneMappingName = \"Linear\";\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.ReinhardToneMapping:\n\t\t\t\ttoneMappingName = \"Reinhard\";\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = \"Uncharted2\";\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.CineonToneMapping:\n\t\t\t\ttoneMappingName = \"OptimizedCineon\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\n\t}\n\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\t\textensions = extensions || {};\n\n\t\tvar chunks = [\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) continue;\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program, identifiers ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n\t}\n\n\tfunction parseIncludes( string ) {\n\n\t\tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\n\t\tfunction replace( match, include ) {\n\n\t\t\tvar replace = THREE.ShaderChunk[ include ];\n\n\t\t\tif ( replace === undefined ) {\n\n\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t\t}\n\n\t\t\treturn parseIncludes( replace );\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction unrollLoops( string ) {\n\n\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\t\tfunction replace( match, start, end, snippet ) {\n\n\t\t\tvar unroll = '';\n\n\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n\t\t\t}\n\n\t\t\treturn unroll;\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\treturn function WebGLProgram( renderer, code, material, parameters ) {\n\n\t\tvar gl = renderer.context;\n\n\t\tvar extensions = material.extensions;\n\t\tvar defines = material.defines;\n\n\t\tvar vertexShader = material.__webglShader.vertexShader;\n\t\tvar fragmentShader = material.__webglShader.fragmentShader;\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t}\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase THREE.CubeReflectionMapping:\n\t\t\t\tcase THREE.CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.CubeUVReflectionMapping:\n\t\t\t\tcase THREE.CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.EquirectangularReflectionMapping:\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase THREE.CubeRefractionMapping:\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.combine ) {\n\n\t\t\t\tcase THREE.MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\t// console.log( 'building new program ' );\n\n\t\t//\n\n\t\tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\t//\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( material instanceof THREE.RawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? THREE.ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? THREE.ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = parseIncludes( vertexShader, parameters );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\n\t\tfragmentShader = parseIncludes( fragmentShader, parameters );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n\t\tif ( material instanceof THREE.ShaderMaterial === false ) {\n\n\t\t\tvertexShader = unrollLoops( vertexShader );\n\t\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t\tvar glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( material.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\tvar programLog = gl.getProgramInfoLog( program );\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n\t\tvar runnable = true;\n\t\tvar haveDiagnostics = true;\n\n\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\t\t\t\tmaterial: material,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function() {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms =\n\t\t\t\t\t\tnew THREE.WebGLUniforms( gl, program, renderer );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function() {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function() {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t// DEPRECATED\n\n\t\tObject.defineProperties( this, {\n\n\t\t\tuniforms: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\t\treturn this.getUniforms();\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tattributes: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\t\treturn this.getAttributes();\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\n\n\t\t//\n\n\t\tthis.id = programIdCount ++;\n\t\tthis.code = code;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t};\n\n} )();\n\n// File:src/renderers/webgl/WebGLPrograms.js\n\nTHREE.WebGLPrograms = function ( renderer, capabilities ) {\n\n\tvar programs = [];\n\n\tvar shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points'\n\t};\n\n\tvar parameterNames = [\n\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\"roughnessMap\", \"metalnessMap\",\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n\t];\n\n\n\tfunction allocateBones ( object ) {\n\n\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tvar maxBones = nVertexMatrices;\n\n\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\n\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\tvar encoding;\n\n\t\tif ( ! map ) {\n\n\t\t\tencoding = THREE.LinearEncoding;\n\n\t\t} else if ( map instanceof THREE.Texture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t}\n\n\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\tif ( encoding === THREE.LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\tencoding = THREE.GammaEncoding;\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n\tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\n\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tvar maxBones = allocateBones( object );\n\t\tvar precision = renderer.getPrecision();\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\n\t\tvar parameters = {\n\n\t\t\tshaderID: shaderID,\n\n\t\t\tprecision: precision,\n\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\tmap: !! material.map,\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\tenvMap: !! material.envMap,\n\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === THREE.CubeUVReflectionMapping ) || ( material.envMap.mapping === THREE.CubeUVRefractionMapping ) ),\n\t\t\tlightMap: !! material.lightMap,\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexColors: material.vertexColors,\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp: fog instanceof THREE.FogExp2,\n\n\t\t\tflatShading: material.shading === THREE.FlatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\tskinning: material.skinning,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\n\t\t\tmorphTargets: material.morphTargets,\n\t\t\tmorphNormals: material.morphNormals,\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumClippingPlanes: nClipPlanes,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\talphaTest: material.alphaTest,\n\t\t\tdoubleSided: material.side === THREE.DoubleSide,\n\t\t\tflipSided: material.side === THREE.BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t};\n\n\t\treturn parameters;\n\n\t};\n\n\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\tvar array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( material.fragmentShader );\n\t\t\tarray.push( material.vertexShader );\n\n\t\t}\n\n\t\tif ( material.defines !== undefined ) {\n\n\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t}\n\n\t\treturn array.join();\n\n\t};\n\n\tthis.acquireProgram = function ( material, parameters, code ) {\n\n\t\tvar program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tvar programInfo = programs[ p ];\n\n\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\tprogram = programInfo;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new THREE.WebGLProgram( renderer, code, material, parameters );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t};\n\n\tthis.releaseProgram = function( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tvar i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t};\n\n\t// Exposed for resource monitoring & error feedback via renderer.info:\n\tthis.programs = programs;\n\n};\n\n// File:src/renderers/webgl/WebGLProperties.js\n\n/**\n* @author fordacious / fordacious.github.io\n*/\n\nTHREE.WebGLProperties = function () {\n\n\tvar properties = {};\n\n\tthis.get = function ( object ) {\n\n\t\tvar uuid = object.uuid;\n\t\tvar map = properties[ uuid ];\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties[ uuid ] = map;\n\n\t\t}\n\n\t\treturn map;\n\n\t};\n\n\tthis.delete = function ( object ) {\n\n\t\tdelete properties[ object.uuid ];\n\n\t};\n\n\tthis.clear = function () {\n\n\t\tproperties = {};\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLShader.js\n\nTHREE.WebGLShader = ( function () {\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\treturn function WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t\t}\n\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t\t}\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\treturn shader;\n\n\t};\n\n} )();\n\n// File:src/renderers/webgl/WebGLShadowMap.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WebGLShadowMap = function ( _renderer, _lights, _objects, capabilities ) {\n\n\tvar _gl = _renderer.context,\n\t_state = _renderer.state,\n\t_frustum = new THREE.Frustum(),\n\t_projScreenMatrix = new THREE.Matrix4(),\n\n\t_lightShadows = _lights.shadows,\n\n\t_shadowMapSize = new THREE.Vector2(),\n\t_maxShadowMapSize = new THREE.Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),\n\n\t_lookTarget = new THREE.Vector3(),\n\t_lightPositionWorld = new THREE.Vector3(),\n\n\t_renderList = [],\n\n\t_MorphingFlag = 1,\n\t_SkinningFlag = 2,\n\n\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t_materialCache = {};\n\n\tvar cubeDirections = [\n\t\tnew THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),\n\t\tnew THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )\n\t];\n\n\tvar cubeUps = [\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),\tnew THREE.Vector3( 0, 0, - 1 )\n\t];\n\n\tvar cube2DViewPorts = [\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()\n\t];\n\n\t// init\n\n\tvar depthMaterialTemplate = new THREE.MeshDepthMaterial();\n\tdepthMaterialTemplate.depthPacking = THREE.RGBADepthPacking;\n\tdepthMaterialTemplate.clipping = true;\n\n\tvar distanceShader = THREE.ShaderLib[ \"distanceRGBA\" ];\n\tvar distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );\n\n\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\tvar depthMaterial = depthMaterialTemplate.clone();\n\t\tdepthMaterial.morphTargets = useMorphing;\n\t\tdepthMaterial.skinning = useSkinning;\n\n\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\tvar distanceMaterial = new THREE.ShaderMaterial( {\n\t\t\tdefines: {\n\t\t\t\t'USE_SHADOWMAP': ''\n\t\t\t},\n\t\t\tuniforms: distanceUniforms,\n\t\t\tvertexShader: distanceShader.vertexShader,\n\t\t\tfragmentShader: distanceShader.fragmentShader,\n\t\t\tmorphTargets: useMorphing,\n\t\t\tskinning: useSkinning,\n\t\t\tclipping: true\n\t\t} );\n\n\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t}\n\n\t//\n\n\tvar scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = THREE.PCFShadowMap;\n\n\tthis.renderReverseSided = true;\n\tthis.renderSingleSided = true;\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( _lightShadows.length === 0 ) return;\n\n\t\t// Set GL state for depth map.\n\t\t_state.clearColor( 1, 1, 1, 1 );\n\t\t_state.disable( _gl.BLEND );\n\t\t_state.setDepthTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// render depth map\n\n\t\tvar faceCount, isPointLight;\n\n\t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\n\t\t\tvar light = _lightShadows[ i ];\n\t\t\tvar shadow = light.shadow;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar shadowCamera = shadow.camera;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n\t\t\tif ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tfaceCount = 6;\n\t\t\t\tisPointLight = true;\n\n\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t// following orientation:\n\t\t\t\t//\n\t\t\t\t//  xzXZ\n\t\t\t\t//   y Y\n\t\t\t\t//\n\t\t\t\t// X - Positive x direction\n\t\t\t\t// x - Negative x direction\n\t\t\t\t// Y - Positive y direction\n\t\t\t\t// y - Negative y direction\n\t\t\t\t// Z - Positive z direction\n\t\t\t\t// z - Negative z direction\n\n\t\t\t\t// positive X\n\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// negative X\n\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// positive Z\n\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// negative Z\n\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// positive Y\n\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t// negative Y\n\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t_shadowMapSize.y *= 2.0;\n\n\t\t\t} else {\n\n\t\t\t\tfaceCount = 1;\n\t\t\t\tisPointLight = false;\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\tvar pars = { minFilter: THREE.NearestFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat };\n\n\t\t\t\tshadow.map = new THREE.WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tif ( shadow instanceof THREE.SpotLightShadow ) {\n\n\t\t\t\tshadow.update( light );\n\n\t\t\t}\n\n\t\t\tvar shadowMap = shadow.map;\n\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t_renderer.clear();\n\n\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t// run a single pass if not\n\n\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t_state.viewport( vpDimensions );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n\t\t\t\t}\n\n\t\t\t\tshadowCamera.updateMatrixWorld();\n\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\n\t\t\t\t// compute shadow matrix\n\n\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t);\n\n\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\t_renderList.length = 0;\n\n\t\t\t\tprojectObject( scene, camera, shadowCamera );\n\n\t\t\t\t// render shadow map\n\t\t\t\t// render regular objects\n\n\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar object = _renderList[ j ];\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\tvar materials = material.materials;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Restore GL state.\n\t\tvar clearColor = _renderer.getClearColor(),\n\t\tclearAlpha = _renderer.getClearAlpha();\n\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\n\t\tscope.needsUpdate = false;\n\n\t};\n\n\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tvar result = null;\n\n\t\tvar materialVariants = _depthMaterials;\n\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\tif ( isPointLight ) {\n\n\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t}\n\n\t\tif ( ! customMaterial ) {\n\n\t\t\tvar useMorphing = false;\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\n\n\t\t\tvar variantIndex = 0;\n\n\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t} else {\n\n\t\t\tresult = customMaterial;\n\n\t\t}\n\n\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t material.clipShadows === true &&\n\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t// appropriate state\n\n\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t}\n\n\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult = cachedMaterial;\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tvar side = material.side;\n\n\t\tif ( scope.renderSingleSided && side == THREE.DoubleSide ) {\n\n\t\t\tside = THREE.FrontSide;\n\n\t\t}\n\n\t\tif ( scope.renderReverseSided ) {\n\n\t\t\tif ( side === THREE.FrontSide ) side = THREE.BackSide;\n\t\t\telse if ( side === THREE.BackSide ) side = THREE.FrontSide;\n\n\t\t}\n\n\t\tresult.side = side;\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\n\t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction projectObject( object, camera, shadowCamera ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object.layers.test( camera.layers ) && ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) ) {\n\n\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( material.visible === true ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t\t_renderList.push( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/renderers/webgl/WebGLState.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {\n\n\tvar _this = this;\n\n\tthis.buffers = {\n\t\tcolor: new THREE.WebGLColorBuffer( gl, this ),\n\t\tdepth: new THREE.WebGLDepthBuffer( gl, this ),\n\t\tstencil: new THREE.WebGLStencilBuffer( gl, this )\n\t};\n\n\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\tvar capabilities = {};\n\n\tvar compressedTextureFormats = null;\n\n\tvar currentBlending = null;\n\tvar currentBlendEquation = null;\n\tvar currentBlendSrc = null;\n\tvar currentBlendDst = null;\n\tvar currentBlendEquationAlpha = null;\n\tvar currentBlendSrcAlpha = null;\n\tvar currentBlendDstAlpha = null;\n\tvar currentPremultipledAlpha = false;\n\n\tvar currentFlipSided = null;\n\tvar currentCullFace = null;\n\n\tvar currentLineWidth = null;\n\n\tvar currentPolygonOffsetFactor = null;\n\tvar currentPolygonOffsetUnits = null;\n\n\tvar currentScissorTest = null;\n\n\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\n\tvar currentTextureSlot = null;\n\tvar currentBoundTextures = {};\n\n\tvar currentScissor = new THREE.Vector4();\n\tvar currentViewport = new THREE.Vector4();\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tvar texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tvar emptyTextures = {};\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t//\n\n\tthis.init = function () {\n\n\t\tthis.clearColor( 0, 0, 0, 1 );\n\t\tthis.clearDepth( 1 );\n\t\tthis.clearStencil( 0 );\n\n\t\tthis.enable( gl.DEPTH_TEST );\n\t\tthis.setDepthFunc( THREE.LessEqualDepth );\n\n\t\tthis.setFlipSided( false );\n\t\tthis.setCullFace( THREE.CullFaceBack );\n\t\tthis.enable( gl.CULL_FACE );\n\n\t\tthis.enable( gl.BLEND );\n\t\tthis.setBlending( THREE.NormalBlending );\n\n\t};\n\n\tthis.initAttributes = function () {\n\n\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t};\n\n\tthis.enableAttribute = function ( attribute ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\tattributeDivisors[ attribute ] = 0;\n\n\t\t}\n\n\t};\n\n\tthis.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t};\n\n\tthis.disableUnusedAttributes = function () {\n\n\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.enable = function ( id ) {\n\n\t\tif ( capabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tcapabilities[ id ] = true;\n\n\t\t}\n\n\t};\n\n\tthis.disable = function ( id ) {\n\n\t\tif ( capabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tcapabilities[ id ] = false;\n\n\t\t}\n\n\t};\n\n\tthis.getCompressedTextureFormats = function () {\n\n\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\tcompressedTextureFormats = [];\n\n\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn compressedTextureFormats;\n\n\t};\n\n\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending !== THREE.NoBlending ) {\n\n\t\t\tthis.enable( gl.BLEND );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.BLEND );\n\t\t\tcurrentBlending = blending; // no blending, that is\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\tif ( blending === THREE.AdditiveBlending ) {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n\t\t\t\t}\n\n\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n\t\t\t\t}\n\n\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t}\n\n\t\tif ( blending === THREE.CustomBlending ) {\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t}\n\n\t};\n\n\t// TODO Deprecate\n\n\tthis.setColorWrite = function ( colorWrite ) {\n\n\t\tthis.buffers.color.setMask( colorWrite );\n\n\t};\n\n\tthis.setDepthTest = function ( depthTest ) {\n\n\t\tthis.buffers.depth.setTest( depthTest );\n\n\t};\n\n\tthis.setDepthWrite = function ( depthWrite ) {\n\n\t\tthis.buffers.depth.setMask( depthWrite );\n\n\t};\n\n\tthis.setDepthFunc = function ( depthFunc ) {\n\n\t\tthis.buffers.depth.setFunc( depthFunc );\n\n\t};\n\n\tthis.setStencilTest = function ( stencilTest ) {\n\n\t\tthis.buffers.stencil.setTest( stencilTest );\n\n\t};\n\n\tthis.setStencilWrite = function ( stencilWrite ) {\n\n\t\tthis.buffers.stencil.setMask( stencilWrite );\n\n\t};\n\n\tthis.setStencilFunc = function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\tthis.buffers.stencil.setFunc( stencilFunc, stencilRef, stencilMask );\n\n\t};\n\n\tthis.setStencilOp = function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\tthis.buffers.stencil.setOp( stencilFail, stencilZFail, stencilZPass );\n\n\t};\n\n\t//\n\n\tthis.setFlipSided = function ( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t};\n\n\tthis.setCullFace = function ( cullFace ) {\n\n\t\tif ( cullFace !== THREE.CullFaceNone ) {\n\n\t\t\tthis.enable( gl.CULL_FACE );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === THREE.CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.CULL_FACE );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t};\n\n\tthis.setLineWidth = function ( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tgl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t};\n\n\tthis.setPolygonOffset = function ( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t};\n\n\tthis.getScissorTest = function () {\n\n\t\treturn currentScissorTest;\n\n\t};\n\n\tthis.setScissorTest = function ( scissorTest ) {\n\n\t\tcurrentScissorTest = scissorTest;\n\n\t\tif ( scissorTest ) {\n\n\t\t\tthis.enable( gl.SCISSOR_TEST );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.SCISSOR_TEST );\n\n\t\t}\n\n\t};\n\n\t// texture\n\n\tthis.activeTexture = function ( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t};\n\n\tthis.bindTexture = function ( webglType, webglTexture ) {\n\n\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t_this.activeTexture();\n\n\t\t}\n\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t};\n\n\tthis.compressedTexImage2D = function () {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( error );\n\n\t\t}\n\n\t};\n\n\tthis.texImage2D = function () {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( error );\n\n\t\t}\n\n\t};\n\n\t// TODO Deprecate\n\n\tthis.clearColor = function ( r, g, b, a ) {\n\n\t\tthis.buffers.color.setClear( r, g, b, a );\n\n\t};\n\n\tthis.clearDepth = function ( depth ) {\n\n\t\tthis.buffers.depth.setClear( depth );\n\n\t};\n\n\tthis.clearStencil = function ( stencil ) {\n\n\t\tthis.buffers.stencil.setClear( stencil );\n\n\t};\n\n\t//\n\n\tthis.scissor = function ( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t};\n\n\tthis.viewport = function ( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tthis.reset = function () {\n\n\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcapabilities = {};\n\n\t\tcompressedTextureFormats = null;\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentBlending = null;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tthis.buffers.color.reset();\n\t\tthis.buffers.depth.reset();\n\t\tthis.buffers.stencil.reset();\n\n\t};\n\n};\n\nTHREE.WebGLColorBuffer = function ( gl, state ) {\n\n\tvar locked = false;\n\n\tvar color = new THREE.Vector4();\n\tvar currentColorMask = null;\n\tvar currentColorClear = new THREE.Vector4();\n\n\tthis.setMask = function ( colorMask ) {\n\n\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\tcurrentColorMask = colorMask;\n\n\t\t}\n\n\t};\n\n\tthis.setLocked = function ( lock ) {\n\n\t\tlocked = lock;\n\n\t};\n\n\tthis.setClear = function ( r, g, b, a ) {\n\n\t\tcolor.set( r, g, b, a );\n\n\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\tgl.clearColor( r, g, b, a );\n\t\t\tcurrentColorClear.copy( color );\n\n\t\t}\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tlocked = false;\n\n\t\tcurrentColorMask = null;\n\t\tcurrentColorClear = new THREE.Vector4();\n\n\t};\n\n};\n\nTHREE.WebGLDepthBuffer = function( gl, state ) {\n\n\tvar locked = false;\n\n\tvar currentDepthMask = null;\n\tvar currentDepthFunc = null;\n\tvar currentDepthClear = null;\n\n\tthis.setTest = function ( depthTest ) {\n\n\t\tif ( depthTest ) {\n\n\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t} else {\n\n\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t}\n\n\t};\n\n\tthis.setMask = function( depthMask ){\n\n\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\tgl.depthMask( depthMask );\n\t\t\tcurrentDepthMask = depthMask;\n\n\t\t}\n\n\t};\n\n\tthis.setFunc = function ( depthFunc ) {\n\n\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\tif ( depthFunc ) {\n\n\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\tcase THREE.NeverDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.AlwaysDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.LessDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.LessEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.EqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.GreaterEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.GreaterDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.NotEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t}\n\n\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t}\n\n\t};\n\n\tthis.setLocked = function ( lock ) {\n\n\t\tlocked = lock;\n\n\t};\n\n\tthis.setClear = function ( depth ) {\n\n\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\tgl.clearDepth( depth );\n\t\t\tcurrentDepthClear = depth;\n\n\t\t}\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tlocked = false;\n\n\t\tcurrentDepthMask = null;\n\t\tcurrentDepthFunc = null;\n\t\tcurrentDepthClear = null;\n\n\t};\n\n};\n\nTHREE.WebGLStencilBuffer = function ( gl, state ) {\n\n\tvar locked = false;\n\n\tvar currentStencilMask = null;\n\tvar currentStencilFunc = null;\n\tvar currentStencilRef = null;\n\tvar currentStencilFuncMask = null;\n\tvar currentStencilFail  = null;\n\tvar currentStencilZFail = null;\n\tvar currentStencilZPass = null;\n\tvar currentStencilClear = null;\n\n\tthis.setTest = function ( stencilTest ) {\n\n\t\tif ( stencilTest ) {\n\n\t\t\tstate.enable( gl.STENCIL_TEST );\n\n\t\t} else {\n\n\t\t\tstate.disable( gl.STENCIL_TEST );\n\n\t\t}\n\n\t};\n\n\tthis.setMask = function ( stencilMask ) {\n\n\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\tgl.stencilMask( stencilMask );\n\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t}\n\n\t};\n\n\tthis.setFunc = function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\n\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\tcurrentStencilRef  = stencilRef;\n\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t}\n\n\t};\n\n\tthis.setOp\t = function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t     currentStencilZFail !== stencilZFail ||\n\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\n\t\t\tcurrentStencilFail  = stencilFail;\n\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t}\n\n\t};\n\n\tthis.setLocked = function ( lock ) {\n\n\t\tlocked = lock;\n\n\t};\n\n\tthis.setClear = function ( stencil ) {\n\n\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\tgl.clearStencil( stencil );\n\t\t\tcurrentStencilClear = stencil;\n\n\t\t}\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tlocked = false;\n\n\t\tcurrentStencilMask = null;\n\t\tcurrentStencilFunc = null;\n\t\tcurrentStencilRef = null;\n\t\tcurrentStencilFuncMask = null;\n\t\tcurrentStencilFail = null;\n\t\tcurrentStencilZFail = null;\n\t\tcurrentStencilZPass = null;\n\t\tcurrentStencilClear = null;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLTextures.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLTextures = function ( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\n\tvar _infoMemory = info.memory;\n\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\n\t//\n\n\tfunction clampToMaxSize ( image, maxSize ) {\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t// premultiplied alpha.\n\n\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo( image ) {\n\n\t\treturn THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction makePowerOfTwo( image ) {\n\n\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = THREE.Math.nearestPowerOfTwo( image.width );\n\t\t\tcanvas.height = THREE.Math.nearestPowerOfTwo( image.height );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;\n\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;\n\n\t\treturn false;\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback ( f ) {\n\n\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\n\n\t\t\treturn _gl.NEAREST;\n\n\t\t}\n\n\t\treturn _gl.LINEAR;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tvar texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\t_infoMemory.textures --;\n\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tvar renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t_infoMemory.textures --;\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t// cube texture\n\n\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t} else {\n\n\t\t\t// 2D texture\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\t// remove all webgl properties\n\t\tproperties.delete( texture );\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\tif ( ! renderTarget ) return;\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t}\n\n\t\tproperties.delete( renderTarget.texture );\n\t\tproperties.delete( renderTarget );\n\n\t}\n\n\t//\n\n\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tvar image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTextureCube ( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image.length === 6 ) {\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\t_infoMemory.textures ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\n\t\t\t\tvar isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\n\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setTextureCubeDynamic ( texture, slot ) {\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t}\n\n\tfunction setTextureParameters ( textureType, texture, isPowerOfTwoImage ) {\n\n\t\tvar extension;\n\n\t\tif ( isPowerOfTwoImage ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension ) {\n\n\t\t\tif ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\tif ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t_infoMemory.textures ++;\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n\t\t\timage = makePowerOfTwo( image );\n\n\t\t}\n\n\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\tglFormat = paramThreeToGL( texture.format ),\n\t\tglType = paramThreeToGL( texture.type );\n\n\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\tif ( texture instanceof THREE.DepthTexture ) {\n\n\t\t\t// populate depth texture with dummy data\n\n\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\tif ( texture.type === THREE.FloatType ) {\n\n\t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t} else if ( _isWebGL2 ) {\n\n\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t}\n\n\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t} else if ( texture instanceof THREE.DataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t}\n\n\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\n\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\n\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture ( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n\t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage ( renderbuffer, renderTarget ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture ( framebuffer, renderTarget ) {\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( !( renderTarget.depthTexture instanceof THREE.DepthTexture ) ) {\n\n\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t_infoMemory.textures ++;\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t} else {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tvar texture = renderTarget.texture;\n\n\t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n\t\t\t\ttexture.minFilter !== THREE.NearestFilter &&\n\t\t\t\ttexture.minFilter !== THREE.LinearFilter ) {\n\n\t\t\tvar target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t_gl.generateMipmap( target );\n\t\t\tstate.bindTexture( target, null );\n\n\t\t}\n\n\t}\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n};\n\n// File:src/renderers/webgl/WebGLUniforms.js\n\n/**\n *\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [renderer] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'renderer' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (renderer factorizations):\n *\n * .upload( gl, seq, values, renderer )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n * .splitDynamic( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with dynamic entry and removes them from 'seq'\n *\n *\n * Methods of the top-level container (renderer factorizations):\n *\n * .setValue( gl, name, value )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .set( gl, obj, prop )\n *\n * \t\tsets uniform from object and property with same name than uniform\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n *\n * @author tschw\n *\n */\n\nTHREE.WebGLUniforms = ( function() { // scope\n\n\tvar emptyTexture = new THREE.Texture();\n\tvar emptyCubeTexture = new THREE.CubeTexture();\n\n\t// --- Base for inner nodes (including the root) ---\n\n\tvar UniformContainer = function() {\n\n\t\t\tthis.seq = [];\n\t\t\tthis.map = {};\n\n\t\t},\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\t\tarrayCacheF32 = [],\n\t\tarrayCacheI32 = [],\n\n\t\tuncacheTemporaryArrays = function() {\n\n\t\t\tarrayCacheF32.length = 0;\n\t\t\tarrayCacheI32.length = 0;\n\n\t\t},\n\n\t// Flattening for arrays of vectors and matrices\n\n\t\tflatten = function( array, nBlocks, blockSize ) {\n\n\t\t\tvar firstElem = array[ 0 ];\n\n\t\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t\t\t// unoptimized: ! isNaN( firstElem )\n\t\t\t// see http://jacksondunstan.com/articles/983\n\n\t\t\tvar n = nBlocks * blockSize,\n\t\t\t\tr = arrayCacheF32[ n ];\n\n\t\t\tif ( r === undefined ) {\n\n\t\t\t\tr = new Float32Array( n );\n\t\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t\t}\n\n\t\t\tif ( nBlocks !== 0 ) {\n\n\t\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\t\toffset += blockSize;\n\t\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn r;\n\n\t\t},\n\n\t// Texture unit allocation\n\n\t\tallocTexUnits = function( renderer, n ) {\n\n\t\t\tvar r = arrayCacheI32[ n ];\n\n\t\t\tif ( r === undefined ) {\n\n\t\t\t\tr = new Int32Array( n );\n\t\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\tr[ i ] = renderer.allocTextureUnit();\n\n\t\t\treturn r;\n\n\t\t},\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t\t// Single scalar\n\n\t\tsetValue1f = function( gl, v ) { gl.uniform1f( this.addr, v ); },\n\t\tsetValue1i = function( gl, v ) { gl.uniform1i( this.addr, v ); },\n\n\t\t// Single float vector (from flat array or THREE.VectorN)\n\n\t\tsetValue2fv = function( gl, v ) {\n\n\t\t\tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n\t\t\telse gl.uniform2f( this.addr, v.x, v.y );\n\n\t\t},\n\n\t\tsetValue3fv = function( gl, v ) {\n\n\t\t\tif ( v.x !== undefined )\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\t\t\telse if ( v.r !== undefined )\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\t\t\telse\n\t\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t},\n\n\t\tsetValue4fv = function( gl, v ) {\n\n\t\t\tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n\t\t\telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t},\n\n\t\t// Single matrix (from flat array or MatrixN)\n\n\t\tsetValue2fm = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n\t\t},\n\n\t\tsetValue3fm = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\n\t\t},\n\n\t\tsetValue4fm = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\n\t\t},\n\n\t\t// Single texture (2D / Cube)\n\n\t\tsetValueT1 = function( gl, v, renderer ) {\n\n\t\t\tvar unit = renderer.allocTextureUnit();\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\trenderer.setTexture2D( v || emptyTexture, unit );\n\n\t\t},\n\n\t\tsetValueT6 = function( gl, v, renderer ) {\n\n\t\t\tvar unit = renderer.allocTextureUnit();\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n\t\t},\n\n\t\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\t\tsetValue2iv = function( gl, v ) { gl.uniform2iv( this.addr, v ); },\n\t\tsetValue3iv = function( gl, v ) { gl.uniform3iv( this.addr, v ); },\n\t\tsetValue4iv = function( gl, v ) { gl.uniform4iv( this.addr, v ); },\n\n\t\t// Helper to pick the right setter for the singular case\n\n\t\tgetSingularSetter = function( type ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n\t\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n\t\t\t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n\t\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n\t\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Array of scalars\n\n\t\tsetValue1fv = function( gl, v ) { gl.uniform1fv( this.addr, v ); },\n\t\tsetValue1iv = function( gl, v ) { gl.uniform1iv( this.addr, v ); },\n\n\t\t// Array of vectors (flat or from THREE classes)\n\n\t\tsetValueV2a = function( gl, v ) {\n\n\t\t\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n\t\t},\n\n\t\tsetValueV3a = function( gl, v ) {\n\n\t\t\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n\t\t},\n\n\t\tsetValueV4a = function( gl, v ) {\n\n\t\t\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n\t\t},\n\n\t\t// Array of matrices (flat or from THREE clases)\n\n\t\tsetValueM2a = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n\t\t},\n\n\t\tsetValueM3a = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n\t\t},\n\n\t\tsetValueM4a = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n\t\t},\n\n\t\t// Array of textures (2D / Cube)\n\n\t\tsetValueT1a = function( gl, v, renderer ) {\n\n\t\t\tvar n = v.length,\n\t\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\t\tgl.uniform1iv( this.addr, units );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetValueT6a = function( gl, v, renderer ) {\n\n\t\t\tvar n = v.length,\n\t\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\t\tgl.uniform1iv( this.addr, units );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t\t}\n\n\t\t},\n\n\n\t\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\t\tgetPureArraySetter = function( type ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n\t\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n\t\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n\t\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t\t}\n\n\t\t},\n\n\t// --- Uniform Classes ---\n\n\t\tSingleUniform = function SingleUniform( id, activeInfo, addr ) {\n\n\t\t\tthis.id = id;\n\t\t\tthis.addr = addr;\n\t\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t\t// this.path = activeInfo.name; // DEBUG\n\n\t\t},\n\n\t\tPureArrayUniform = function( id, activeInfo, addr ) {\n\n\t\t\tthis.id = id;\n\t\t\tthis.addr = addr;\n\t\t\tthis.size = activeInfo.size;\n\t\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t\t// this.path = activeInfo.name; // DEBUG\n\n\t\t},\n\n\t\tStructuredUniform = function( id ) {\n\n\t\t\tthis.id = id;\n\n\t\t\tUniformContainer.call( this ); // mix-in\n\n\t\t};\n\n\tStructuredUniform.prototype.setValue = function( gl, value ) {\n\n\t\t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t\t// are not allowed in structured uniforms.\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ] );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g,\n\t\t// extracts\n\t\t// \t- the identifier (member name or array index)\n\t\t//  - followed by an optional right bracket (found when array index)\n\t\t//  - followed by an optional left bracket or dot (type of subscript)\n\t\t//\n\t\t// Note: These portions can be read in a non-overlapping fashion and\n\t\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t\t// in the uniform names.\n\n\t\taddUniform = function( container, uniformObject ) {\n\n\t\t\tcontainer.seq.push( uniformObject );\n\t\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t\t},\n\n\t\tparseUniform = function( activeInfo, addr, container ) {\n\n\t\t\tvar path = activeInfo.name,\n\t\t\t\tpathLength = path.length;\n\n\t\t\t// reset RegExp object, because of the early exit of a previous run\n\t\t\tRePathPart.lastIndex = 0;\n\n\t\t\tfor (; ;) {\n\n\t\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\t\tid = match[ 1 ],\n\t\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\t\t\tif ( subscript === undefined ||\n\t\t\t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n\t\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t} else {\n\t\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\t\tvar map = container.map,\n\t\t\t\t\t\tnext = map[ id ];\n\n\t\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontainer = next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t// Root Container\n\n\t\tWebGLUniforms = function WebGLUniforms( gl, program, renderer ) {\n\n\t\t\tUniformContainer.call( this );\n\n\t\t\tthis.renderer = renderer;\n\n\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\t\tpath = info.name,\n\t\t\t\t\taddr = gl.getUniformLocation( program, path );\n\n\t\t\t\tparseUniform( info, addr, this );\n\n\t\t\t}\n\n\t\t};\n\n\n\tWebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.set = function( gl, object, name ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\n\t\t\t\tu.setValue( gl, v.value, renderer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\tWebGLUniforms.splitDynamic = function( seq, values ) {\n\n\t\tvar r = null,\n\t\t\tn = seq.length,\n\t\t\tw = 0;\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v && v.dynamic === true ) {\n\n\t\t\t\tif ( r === null ) r = [];\n\t\t\t\tr.push( u );\n\n\t\t\t} else {\n\n\t\t\t\t// in-place compact 'seq', removing the matches\n\t\t\t\tif ( w < i ) seq[ w ] = u;\n\t\t\t\t++ w;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( w < n ) seq.length = w;\n\n\t\treturn r;\n\n\t};\n\n\tWebGLUniforms.evalDynamic = function( seq, values, object, camera ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar v = values[ seq[ i ].id ],\n\t\t\t\tf = v.onUpdateCallback;\n\n\t\t\tif ( f !== undefined ) f.call( v, object, camera );\n\n\t\t}\n\n\t};\n\n\treturn WebGLUniforms;\n\n} )();\n\n// File:src/renderers/webgl/plugins/LensFlarePlugin.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.LensFlarePlugin = function ( renderer, flares ) {\n\n\tvar gl = renderer.context;\n\tvar state = renderer.state;\n\n\tvar vertexBuffer, elementBuffer;\n\tvar shader, program, attributes, uniforms;\n\n\tvar tempTexture, occlusionTexture;\n\n\tfunction init() {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 1, - 1,  0, 0,\n\t\t\t 1, - 1,  1, 0,\n\t\t\t 1,  1,  1, 1,\n\t\t\t- 1,  1,  0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\t// buffers\n\n\t\tvertexBuffer     = gl.createBuffer();\n\t\telementBuffer    = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t// textures\n\n\t\ttempTexture      = gl.createTexture();\n\t\tocclusionTexture = gl.createTexture();\n\n\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\tshader = {\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\"uniform vec3 screenPosition;\",\n\t\t\t\t\"uniform vec2 scale;\",\n\t\t\t\t\"uniform float rotation;\",\n\n\t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n\t\t\t\t\"attribute vec2 position;\",\n\t\t\t\t\"attribute vec2 uv;\",\n\n\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\"vUV = uv;\",\n\n\t\t\t\t\t\"vec2 pos = position;\",\n\n\t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( \"\\n\" ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\"uniform sampler2D map;\",\n\t\t\t\t\"uniform float opacity;\",\n\t\t\t\t\"uniform vec3 color;\",\n\n\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t// pink square\n\n\t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n\t\t\t\t\t// restore\n\n\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n\t\t\t\t\t// flare\n\n\t\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n\t\t\t\t\t\"}\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( \"\\n\" )\n\n\t\t};\n\n\t\tprogram = createProgram( shader );\n\n\t\tattributes = {\n\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t\t};\n\n\t\tuniforms = {\n\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t\t};\n\n\t}\n\n\t/*\n\t * Render lens flares\n\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t *         reads these back and calculates occlusion.\n\t */\n\n\tthis.render = function ( scene, camera, viewport ) {\n\n\t\tif ( flares.length === 0 ) return;\n\n\t\tvar tempPosition = new THREE.Vector3();\n\n\t\tvar invAspect = viewport.w / viewport.z,\n\t\t\thalfViewportWidth = viewport.z * 0.5,\n\t\t\thalfViewportHeight = viewport.w * 0.5;\n\n\t\tvar size = 16 / viewport.w,\n\t\t\tscale = new THREE.Vector2( size * invAspect, size );\n\n\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\n\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\n\n\t\tvar validArea = new THREE.Box2();\n\n\t\tvalidArea.min.set( 0, 0 );\n\t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tgl.useProgram( program );\n\n\t\tstate.initAttributes();\n\t\tstate.enableAttribute( attributes.vertex );\n\t\tstate.enableAttribute( attributes.uv );\n\t\tstate.disableUnusedAttributes();\n\n\t\t// loop through all lens flares to update their occlusion and positions\n\t\t// setup gl and common used attribs/uniforms\n\n\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t\tgl.uniform1i( uniforms.map, 1 );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tstate.disable( gl.CULL_FACE );\n\t\tstate.setDepthWrite( false );\n\n\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n\t\t\tsize = 16 / viewport.w;\n\t\t\tscale.set( size * invAspect, size );\n\n\t\t\t// calc object screen position\n\n\t\t\tvar flare = flares[ i ];\n\n\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\n\t\t\t// setup arrays for gl programs\n\n\t\t\tscreenPosition.copy( tempPosition );\n\n\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n\t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n\t\t\t// screen cull\n\n\t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t// render pink quad\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n\t\t\t\tstate.disable( gl.BLEND );\n\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t// restore graphics\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t// update object positions\n\n\t\t\t\tflare.positionScreen.copy( screenPosition );\n\n\t\t\t\tif ( flare.customUpdateCallback ) {\n\n\t\t\t\t\tflare.customUpdateCallback( flare );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tflare.updateLensFlares();\n\n\t\t\t\t}\n\n\t\t\t\t// render flares\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t\t\t\tstate.enable( gl.BLEND );\n\n\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n\t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n\t\t\t\t\t\tscale.x = size * invAspect;\n\t\t\t\t\t\tscale.y = size;\n\n\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\n\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tstate.enable( gl.CULL_FACE );\n\t\tstate.enable( gl.DEPTH_TEST );\n\t\tstate.setDepthWrite( true );\n\n\t\trenderer.resetGLState();\n\n\t};\n\n\tfunction createProgram ( shader ) {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n\t\tgl.compileShader( fragmentShader );\n\t\tgl.compileShader( vertexShader );\n\n\t\tgl.attachShader( program, fragmentShader );\n\t\tgl.attachShader( program, vertexShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n};\n\n// File:src/renderers/webgl/plugins/SpritePlugin.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SpritePlugin = function ( renderer, sprites ) {\n\n\tvar gl = renderer.context;\n\tvar state = renderer.state;\n\n\tvar vertexBuffer, elementBuffer;\n\tvar program, attributes, uniforms;\n\n\tvar texture;\n\n\t// decompose matrixWorld\n\n\tvar spritePosition = new THREE.Vector3();\n\tvar spriteRotation = new THREE.Quaternion();\n\tvar spriteScale = new THREE.Vector3();\n\n\tfunction init() {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 0.5, - 0.5,  0, 0,\n\t\t\t  0.5, - 0.5,  1, 0,\n\t\t\t  0.5,   0.5,  1, 1,\n\t\t\t- 0.5,   0.5,  0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\tvertexBuffer  = gl.createBuffer();\n\t\telementBuffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\tprogram = createProgram();\n\n\t\tattributes = {\n\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t\t};\n\n\t\tuniforms = {\n\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t\t};\n\n\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tcanvas.width = 8;\n\t\tcanvas.height = 8;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.fillStyle = 'white';\n\t\tcontext.fillRect( 0, 0, 8, 8 );\n\n\t\ttexture = new THREE.Texture( canvas );\n\t\ttexture.needsUpdate = true;\n\n\t}\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( sprites.length === 0 ) return;\n\n\t\t// setup gl\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tgl.useProgram( program );\n\n\t\tstate.initAttributes();\n\t\tstate.enableAttribute( attributes.position );\n\t\tstate.enableAttribute( attributes.uv );\n\t\tstate.disableUnusedAttributes();\n\n\t\tstate.disable( gl.CULL_FACE );\n\t\tstate.enable( gl.BLEND );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\tgl.uniform1i( uniforms.map, 0 );\n\n\t\tvar oldFogType = 0;\n\t\tvar sceneFogType = 0;\n\t\tvar fog = scene.fog;\n\n\t\tif ( fog ) {\n\n\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n\t\t\tif ( fog instanceof THREE.Fog ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\toldFogType = 1;\n\t\t\t\tsceneFogType = 1;\n\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\toldFogType = 2;\n\t\t\t\tsceneFogType = 2;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\toldFogType = 0;\n\t\t\tsceneFogType = 0;\n\n\t\t}\n\n\n\t\t// update positions and sort\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\n\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n\t\t}\n\n\t\tsprites.sort( painterSortStable );\n\n\t\t// render all sprites\n\n\t\tvar scale = [];\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\t\t\tvar material = sprite.material;\n\n\t\t\tif ( material.visible === false ) continue;\n\n\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\tscale[ 1 ] = spriteScale.y;\n\n\t\t\tvar fogType = 0;\n\n\t\t\tif ( scene.fog && material.fog ) {\n\n\t\t\t\tfogType = sceneFogType;\n\n\t\t\t}\n\n\t\t\tif ( oldFogType !== fogType ) {\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\toldFogType = fogType;\n\n\t\t\t}\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n\t\t\t} else {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n\t\t\t}\n\n\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t\t\tstate.setDepthTest( material.depthTest );\n\t\t\tstate.setDepthWrite( material.depthWrite );\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\trenderer.setTexture2D( material.map, 0 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setTexture2D( texture, 0 );\n\n\t\t\t}\n\n\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tstate.enable( gl.CULL_FACE );\n\n\t\trenderer.resetGLState();\n\n\t};\n\n\tfunction createProgram () {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\tgl.shaderSource( vertexShader, [\n\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform float rotation;',\n\t\t\t'uniform vec2 scale;',\n\t\t\t'uniform vec2 uvOffset;',\n\t\t\t'uniform vec2 uvScale;',\n\n\t\t\t'attribute vec2 position;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main() {',\n\n\t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n\t\t\t\t'vec2 alignedPosition = position * scale;',\n\n\t\t\t\t'vec2 rotatedPosition;',\n\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n\t\t\t\t'vec4 finalPosition;',\n\n\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n\t\t\t\t'gl_Position = finalPosition;',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.shaderSource( fragmentShader, [\n\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t'uniform vec3 color;',\n\t\t\t'uniform sampler2D map;',\n\t\t\t'uniform float opacity;',\n\n\t\t\t'uniform int fogType;',\n\t\t\t'uniform vec3 fogColor;',\n\t\t\t'uniform float fogDensity;',\n\t\t\t'uniform float fogNear;',\n\t\t\t'uniform float fogFar;',\n\t\t\t'uniform float alphaTest;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main() {',\n\n\t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n\t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n\t\t\t\t'if ( fogType > 0 ) {',\n\n\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t\t\t\t\t'float fogFactor = 0.0;',\n\n\t\t\t\t\t'if ( fogType == 1 ) {',\n\n\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n\t\t\t\t\t'} else {',\n\n\t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n\t\t\t\t\t'}',\n\n\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n\t\t\t\t'}',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.compileShader( vertexShader );\n\t\tgl.compileShader( fragmentShader );\n\n\t\tgl.attachShader( program, vertexShader );\n\t\tgl.attachShader( program, fragmentShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n\tfunction painterSortStable ( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn b.id - a.id;\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/Three.Legacy.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nObject.assign( THREE, {\n\tFace4: function ( a, b, c, d, normal, color, materialIndex ) {\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new THREE.Face3( a, b, c, normal, color, materialIndex );\n\t},\n\tLineStrip: 0,\n\tLinePieces: 1,\n\tMeshFaceMaterial: THREE.MultiMaterial,\n\tPointCloud: function ( geometry, material ) {\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new THREE.Points( geometry, material );\n\t},\n\tParticle: THREE.Sprite,\n\tParticleSystem: function ( geometry, material ) {\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new THREE.Points( geometry, material );\n\t},\n\tPointCloudMaterial: function ( parameters ) {\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new THREE.PointsMaterial( parameters );\n\t},\n\tParticleBasicMaterial: function ( parameters ) {\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new THREE.PointsMaterial( parameters );\n\t},\n\tParticleSystemMaterial: function ( parameters ) {\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new THREE.PointsMaterial( parameters );\n\t},\n\tVertex: function ( x, y, z ) {\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new THREE.Vector3( x, y, z );\n\t}\n} );\n\n//\n\nObject.assign( THREE.Box2.prototype, {\n\tempty: function () {\n\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\t},\n\tisIntersectionBox: function ( box ) {\n\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\t}\n} );\n\nObject.assign( THREE.Box3.prototype, {\n\tempty: function () {\n\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\t},\n\tisIntersectionBox: function ( box ) {\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\t}\n} );\n\nObject.assign( THREE.Matrix3.prototype, {\n\tmultiplyVector3: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\treturn vector.applyMatrix3( this );\n\t},\n\tmultiplyVector3Array: function ( a ) {\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\treturn this.applyToVector3Array( a );\n\t}\n} );\n\nObject.assign( THREE.Matrix4.prototype, {\n\textractPosition: function ( m ) {\n\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\treturn this.copyPosition( m );\n\t},\n\tsetRotationFromQuaternion: function ( q ) {\n\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\treturn this.makeRotationFromQuaternion( q );\n\t},\n\tmultiplyVector3: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n\t\treturn vector.applyProjection( this );\n\t},\n\tmultiplyVector4: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\t},\n\tmultiplyVector3Array: function ( a ) {\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\treturn this.applyToVector3Array( a );\n\t},\n\trotateAxis: function ( v ) {\n\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\tv.transformDirection( this );\n\t},\n\tcrossVector: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\t},\n\ttranslate: function ( v ) {\n\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\t},\n\trotateX: function ( angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\t},\n\trotateY: function ( angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\t},\n\trotateZ: function ( angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\t},\n\trotateByAxis: function ( axis, angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\t}\n} );\n\nObject.assign( THREE.Plane.prototype, {\n\tisIntersectionLine: function ( line ) {\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\t}\n} );\n\nObject.assign( THREE.Quaternion.prototype, {\n\tmultiplyVector3: function ( vector ) {\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\t}\n} );\n\nObject.assign( THREE.Ray.prototype, {\n\tisIntersectionBox: function ( box ) {\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\t},\n\tisIntersectionPlane: function ( plane ) {\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\treturn this.intersectsPlane( plane );\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\t}\n} );\n\nObject.assign( THREE.Vector3.prototype, {\n\tsetEulerFromRotationMatrix: function () {\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\t},\n\tsetEulerFromQuaternion: function () {\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\t},\n\tgetPositionFromMatrix: function ( m ) {\n\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\treturn this.setFromMatrixPosition( m );\n\t},\n\tgetScaleFromMatrix: function ( m ) {\n\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\treturn this.setFromMatrixScale( m );\n\t},\n\tgetColumnFromMatrix: function ( index, matrix ) {\n\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\treturn this.setFromMatrixColumn( matrix, index );\n\t}\n} );\n\n//\n\nObject.assign( THREE.Object3D.prototype, {\n\tgetChildByName: function ( name ) {\n\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\treturn this.getObjectByName( name );\n\t},\n\trenderDepth: function ( value ) {\n\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\t},\n\ttranslate: function ( distance, axis ) {\n\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\treturn this.translateOnAxis( axis, distance );\n\t}\n} );\n\nObject.defineProperties( THREE.Object3D.prototype, {\n\teulerOrder: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\treturn this.rotation.order;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\tthis.rotation.order = value;\n\t\t}\n\t},\n\tuseQuaternion: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.LOD.prototype, {\n\tobjects: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\treturn this.levels;\n\t\t}\n\t}\n} );\n\n//\n\nTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\tthis.setFocalLength( focalLength );\n\n};\n\n//\n\nObject.defineProperties( THREE.Light.prototype, {\n\tonlyShadow: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\t\t}\n\t},\n\tshadowCameraFov: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\tthis.shadow.camera.fov = value;\n\t\t}\n\t},\n\tshadowCameraLeft: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\tthis.shadow.camera.left = value;\n\t\t}\n\t},\n\tshadowCameraRight: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\tthis.shadow.camera.right = value;\n\t\t}\n\t},\n\tshadowCameraTop: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\tthis.shadow.camera.top = value;\n\t\t}\n\t},\n\tshadowCameraBottom: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\tthis.shadow.camera.bottom = value;\n\t\t}\n\t},\n\tshadowCameraNear: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\tthis.shadow.camera.near = value;\n\t\t}\n\t},\n\tshadowCameraFar: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\tthis.shadow.camera.far = value;\n\t\t}\n\t},\n\tshadowCameraVisible: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\t\t}\n\t},\n\tshadowBias: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\tthis.shadow.bias = value;\n\t\t}\n\t},\n\tshadowDarkness: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\t\t}\n\t},\n\tshadowMapWidth: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\tthis.shadow.mapSize.width = value;\n\t\t}\n\t},\n\tshadowMapHeight: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\tthis.shadow.mapSize.height = value;\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( THREE.BufferAttribute.prototype, {\n\tlength: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\t\treturn this.array.length;\n\t\t}\n\t}\n} );\n\nObject.assign( THREE.BufferGeometry.prototype, {\n\taddIndex: function ( index ) {\n\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\tthis.setIndex( index );\n\t},\n\taddDrawCall: function ( start, count, indexOffset ) {\n\t\tif ( indexOffset !== undefined ) {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\t\t}\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\tthis.addGroup( start, count );\n\t},\n\tclearDrawCalls: function () {\n\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\tthis.clearGroups();\n\t},\n\tcomputeTangents: function () {\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\t},\n\tcomputeOffsets: function () {\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\t}\n} );\n\nObject.defineProperties( THREE.BufferGeometry.prototype, {\n\tdrawcalls: {\n\t\tget: function () {\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\t\t}\n\t},\n\toffsets: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( THREE.Material.prototype, {\n\twrapAround: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t}\n\t},\n\twrapRGB: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n\t\t\treturn new THREE.Color();\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.MeshPhongMaterial.prototype, {\n\tmetal: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\treturn false;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.ShaderMaterial.prototype, {\n\tderivatives: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\treturn this.extensions.derivatives;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\tthis.extensions.derivatives = value;\n\t\t}\n\t}\n} );\n\n//\n\nTHREE.EventDispatcher.prototype = Object.assign( Object.create( {\n\n\t// Note: Extra base ensures these properties are not 'assign'ed.\n\n\tconstructor: THREE.EventDispatcher,\n\n\tapply: function ( target ) {\n\n\t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n\t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\n\t\tObject.assign( target, this );\n\n\t}\n\n} ), THREE.EventDispatcher.prototype );\n\n//\n\nObject.assign( THREE.WebGLRenderer.prototype, {\n\tsupportsFloatTextures: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_float' );\n\t},\n\tsupportsHalfFloatTextures: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\t},\n\tsupportsStandardDerivatives: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\t},\n\tsupportsCompressedTextureS3TC: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t},\n\tsupportsCompressedTexturePVRTC: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t},\n\tsupportsBlendMinMax: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\t},\n\tsupportsVertexTextures: function () {\n\t\treturn this.capabilities.vertexTextures;\n\t},\n\tsupportsInstancedArrays: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\t},\n\tenableScissorTest: function ( boolean ) {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\tthis.setScissorTest( boolean );\n\t},\n\tinitMaterial: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\t},\n\taddPrePlugin: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\t},\n\taddPostPlugin: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\t},\n\tupdateShadowMap: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\t}\n} );\n\nObject.defineProperties( THREE.WebGLRenderer.prototype, {\n\tshadowMapEnabled: {\n\t\tget: function () {\n\t\t\treturn this.shadowMap.enabled;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\tthis.shadowMap.enabled = value;\n\t\t}\n\t},\n\tshadowMapType: {\n\t\tget: function () {\n\t\t\treturn this.shadowMap.type;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\tthis.shadowMap.type = value;\n\t\t}\n\t},\n\tshadowMapCullFace: {\n\t\tget: function () {\n\t\t\treturn this.shadowMap.cullFace;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t\t\tthis.shadowMap.cullFace = value;\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.WebGLShadowMap.prototype, {\n\tcullFace: {\n\t\tget: function () {\n\t\t\treturn this.renderReverseSided ? THREE.CullFaceFront : THREE.CullFaceBack;\n\t\t},\n\t\tset: function ( cullFace ) {\n\t\t\tvar value = ( cullFace !== THREE.CullFaceBack );\n\t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t\t\tthis.renderReverseSided = value;\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( THREE.WebGLRenderTarget.prototype, {\n\twrapS: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\treturn this.texture.wrapS;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\tthis.texture.wrapS = value;\n\t\t}\n\t},\n\twrapT: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\treturn this.texture.wrapT;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\tthis.texture.wrapT = value;\n\t\t}\n\t},\n\tmagFilter: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\treturn this.texture.magFilter;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\tthis.texture.magFilter = value;\n\t\t}\n\t},\n\tminFilter: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\treturn this.texture.minFilter;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\tthis.texture.minFilter = value;\n\t\t}\n\t},\n\tanisotropy: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\treturn this.texture.anisotropy;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\tthis.texture.anisotropy = value;\n\t\t}\n\t},\n\toffset: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\treturn this.texture.offset;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\tthis.texture.offset = value;\n\t\t}\n\t},\n\trepeat: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\treturn this.texture.repeat;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\tthis.texture.repeat = value;\n\t\t}\n\t},\n\tformat: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\treturn this.texture.format;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\tthis.texture.format = value;\n\t\t}\n\t},\n\ttype: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\treturn this.texture.type;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\tthis.texture.type = value;\n\t\t}\n\t},\n\tgenerateMipmaps: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\treturn this.texture.generateMipmaps;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\tthis.texture.generateMipmaps = value;\n\t\t}\n\t}\n} );\n\n//\n\nObject.assign( THREE.Audio.prototype, {\n\tload: function ( file ) {\n\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n\t\tvar scope = this;\n\t\tvar audioLoader = new THREE.AudioLoader();\n\t\taudioLoader.load( file, function ( buffer ) {\n\t\t\tscope.setBuffer( buffer );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\nObject.assign( THREE.AudioAnalyser.prototype, {\n\tgetData: function ( file ) {\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\t}\n} );\n\n//\n\nTHREE.GeometryUtils = {\n\n\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\n\t\tvar matrix;\n\n\t\tif ( geometry2 instanceof THREE.Mesh ) {\n\n\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\tmatrix = geometry2.matrix;\n\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t}\n\n\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t},\n\n\tcenter: function ( geometry ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\treturn geometry.center();\n\n\t}\n\n};\n\nTHREE.ImageUtils = {\n\n\tcrossOrigin: undefined,\n\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new THREE.TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new THREE.CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadCompressedTexture: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t},\n\n\tloadCompressedTextureCube: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t}\n\n};\n\n//\n\nTHREE.Projector = function () {\n\n\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function ( vector, camera ) {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n};\n\n//\n\nTHREE.CanvasRenderer = function () {\n\n\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\tthis.clear = function () {};\n\tthis.render = function () {};\n\tthis.setClearColor = function () {};\n\tthis.setSize = function () {};\n\n};\n\n// File:src/extras/CurveUtils.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.CurveUtils = {\n\n\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\n\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\n\t},\n\n\t// Puay Bing, thanks for helping with this derivative!\n\n\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\n\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n\t\t\t3 * t * t * p3;\n\n\t},\n\n\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\n\t\t// To check if my formulas are correct\n\n\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\n\t\treturn h00 + h10 + h01 + h11;\n\n\t},\n\n\t// Catmull-Rom\n\n\tinterpolate: function( p0, p1, p2, p3, t ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n};\n\n// File:src/extras/SceneUtils.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SceneUtils = {\n\n\tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n\t\tvar group = new THREE.Group();\n\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\n\n\t\t}\n\n\t\treturn group;\n\n\t},\n\n\tdetach: function ( child, parent, scene ) {\n\n\t\tchild.applyMatrix( parent.matrixWorld );\n\t\tparent.remove( child );\n\t\tscene.add( child );\n\n\t},\n\n\tattach: function ( child, scene, parent ) {\n\n\t\tvar matrixWorldInverse = new THREE.Matrix4();\n\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\t\tchild.applyMatrix( matrixWorldInverse );\n\n\t\tscene.remove( child );\n\t\tparent.add( child );\n\n\t}\n\n};\n\n// File:src/extras/ShapeUtils.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.ShapeUtils = {\n\n\t// calculate area of the contour polygon\n\n\tarea: function ( contour ) {\n\n\t\tvar n = contour.length;\n\t\tvar a = 0.0;\n\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t},\n\n\ttriangulate: ( function () {\n\n\t\t/**\n\t\t * This code is a quick port of code written in C++ which was submitted to\n\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t\t * See original code and more information here:\n\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t\t *\n\t\t * ported to actionscript by Zevan Rosser\n\t\t * www.actionsnippet.com\n\t\t *\n\t\t * ported to javascript by Joshua Koo\n\t\t * http://www.lab4games.net/zz85/blog\n\t\t *\n\t\t */\n\n\t\tfunction snip( contour, u, v, w, n, verts ) {\n\n\t\t\tvar p;\n\t\t\tvar ax, ay, bx, by;\n\t\t\tvar cx, cy, px, py;\n\n\t\t\tax = contour[ verts[ u ] ].x;\n\t\t\tay = contour[ verts[ u ] ].y;\n\n\t\t\tbx = contour[ verts[ v ] ].x;\n\t\t\tby = contour[ verts[ v ] ].y;\n\n\t\t\tcx = contour[ verts[ w ] ].x;\n\t\t\tcy = contour[ verts[ w ] ].y;\n\n\t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\n\t\t\tvar aX, aY, bX, bY, cX, cY;\n\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n\t\t\taX = cx - bx;  aY = cy - by;\n\t\t\tbX = ax - cx;  bY = ay - cy;\n\t\t\tcX = bx - ax;  cY = by - ay;\n\n\t\t\tfor ( p = 0; p < n; p ++ ) {\n\n\t\t\t\tpx = contour[ verts[ p ] ].x;\n\t\t\t\tpy = contour[ verts[ p ] ].y;\n\n\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n\t\t\t\tapx = px - ax;  apy = py - ay;\n\t\t\t\tbpx = px - bx;  bpy = py - by;\n\t\t\t\tcpx = px - cx;  cpy = py - cy;\n\n\t\t\t\t// see if p is inside triangle abc\n\n\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// takes in an contour array and returns\n\n\t\treturn function triangulate( contour, indices ) {\n\n\t\t\tvar n = contour.length;\n\n\t\t\tif ( n < 3 ) return null;\n\n\t\t\tvar result = [],\n\t\t\t\tverts = [],\n\t\t\t\tvertIndices = [];\n\n\t\t\t/* we want a counter-clockwise polygon in verts */\n\n\t\t\tvar u, v, w;\n\n\t\t\tif ( THREE.ShapeUtils.area( contour ) > 0.0 ) {\n\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n\t\t\t} else {\n\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n\t\t\t}\n\n\t\t\tvar nv = n;\n\n\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n\t\t\tvar count = 2 * nv;   /* error detection */\n\n\t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n\t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n\t\t\t\tif ( ( count -- ) <= 0 ) {\n\n\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t\t\t\t\t//return null;\n\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n\t\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\t\treturn result;\n\n\t\t\t\t}\n\n\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n\t\t\t\t\tvar a, b, c, s, t;\n\n\t\t\t\t\t/* true names of the vertices */\n\n\t\t\t\t\ta = verts[ u ];\n\t\t\t\t\tb = verts[ v ];\n\t\t\t\t\tc = verts[ w ];\n\n\t\t\t\t\t/* output Triangle */\n\n\t\t\t\t\tresult.push( [ contour[ a ],\n\t\t\t\t\t\tcontour[ b ],\n\t\t\t\t\t\tcontour[ c ] ] );\n\n\n\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n\t\t\t\t\t/* remove v from the remaining polygon */\n\n\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n\t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnv --;\n\n\t\t\t\t\t/* reset error detection counter */\n\n\t\t\t\t\tcount = 2 * nv;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( indices ) return vertIndices;\n\t\t\treturn result;\n\n\t\t}\n\n\t} )(),\n\n\ttriangulateShape: function ( contour, holes ) {\n\n\t\tfunction removeDupEndPts(points) {\n\n\t\t\tvar l = points.length;\n\n\t\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t\tremoveDupEndPts( contour );\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n\t\t\t// inOtherPt needs to be collinear to the inSegment\n\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n\t\t\t\t// not parallel\n\n\t\t\t\tvar perpSeg2;\n\t\t\t\tif ( limit > 0 ) {\n\n\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n\t\t\t\t}\n\n\t\t\t\t// i.e. to reduce rounding errors\n\t\t\t\t// intersection at endpoint of segment#1?\n\t\t\t\tif ( perpSeg2 === 0 ) {\n\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t}\n\t\t\t\tif ( perpSeg2 === limit ) {\n\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\treturn [ inSeg1Pt2 ];\n\n\t\t\t\t}\n\t\t\t\t// intersection at endpoint of segment#2?\n\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n\t\t\t\t// return real intersection point\n\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n\t\t\t} else {\n\n\t\t\t\t// parallel or collinear\n\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n\t\t\t\t// they are collinear or degenerate\n\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t\t\t\t// both segments are points\n\t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\n\t\t\t\t}\n\t\t\t\t// segment#1  is a single point\n\t\t\t\tif ( seg1Pt ) {\n\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t}\n\t\t\t\t// segment#2  is a single point\n\t\t\t\tif ( seg2Pt ) {\n\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t\t\t\t\treturn [ inSeg2Pt1 ];\n\n\t\t\t\t}\n\n\t\t\t\t// they are collinear segments, which might overlap\n\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t\t\t\tif ( seg1dx !== 0 ) {\n\n\t\t\t\t\t// the segments are NOT on a vertical line\n\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// the segments are on a vertical line\n\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\treturn [ seg2min ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\treturn [ seg1min ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n\t\t\t// The order of legs is important\n\n\t\t\t// translation of all points, so that Vertex is at (0,0)\n\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n\t\t\t\t// angle != 180 deg.\n\n\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n\t\t\t\tif ( from2toAngle > 0 ) {\n\n\t\t\t\t\t// main angle < 180 deg.\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// main angle > 180 deg.\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// angle == 180 deg.\n\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t\t\t\treturn\t( from2otherAngle > 0 );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tfunction removeHoles( contour, holes ) {\n\n\t\t\tvar shape = contour.concat(); // work on this shape\n\t\t\tvar hole;\n\n\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n\t\t\t\t// Check if hole point lies within angle around shape point\n\t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\t// Check if shape point lies within angle around hole point\n\t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\treturn\ttrue;\n\n\t\t\t}\n\n\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t// checks for intersections with shape edges\n\t\t\t\tvar sIdx, nextIdx, intersection;\n\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t}\n\n\t\t\t\treturn\tfalse;\n\n\t\t\t}\n\n\t\t\tvar indepHoles = [];\n\n\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t// checks for intersections with hole edges\n\t\t\t\tvar ihIdx, chkHole,\n\t\t\t\t\thIdx, nextIdx, intersection;\n\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\treturn\tfalse;\n\n\t\t\t}\n\n\t\t\tvar holeIndex, shapeIndex,\n\t\t\t\tshapePt, holePt,\n\t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t\t\t\ttmpShape1, tmpShape2,\n\t\t\t\ttmpHole1, tmpHole2;\n\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tindepHoles.push( h );\n\n\t\t\t}\n\n\t\t\tvar minShapeIndex = 0;\n\t\t\tvar counter = indepHoles.length * 2;\n\t\t\twhile ( indepHoles.length > 0 ) {\n\n\t\t\t\tcounter --;\n\t\t\t\tif ( counter < 0 ) {\n\n\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// search for shape-vertex and hole-vertex,\n\t\t\t\t// which can be connected without intersections\n\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n\t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t\t\t\t\tholeIndex\t= - 1;\n\n\t\t\t\t\t// search for hole which can be reached without intersections\n\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n\t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n\t\t\t\t\t\t// prevent multiple checks\n\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n\t\t\t\t\t\thole = holes[ holeIdx ];\n\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n\t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n\t\t\t\t\t\t\tholeIndex = h2;\n\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n\t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shape; \t\t\t/* shape with no holes */\n\n\t\t}\n\n\n\t\tvar i, il, f, face,\n\t\t\tkey, index,\n\t\t\tallPointsMap = {};\n\n\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n\t\tvar allpoints = contour.concat();\n\n\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n\t\t}\n\n\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n\t\t// prepare all points map\n\n\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n\t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.ShapeUtils: Duplicate point\", key, i );\n\n\t\t\t}\n\n\t\t\tallPointsMap[ key ] = i;\n\n\t\t}\n\n\t\t// remove holes by cutting paths to holes and adding them to the shape\n\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n\t\tvar triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t\t//console.log( \"triangles\",triangles, triangles.length );\n\n\t\t// check all face vertices against all points map\n\n\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n\t\t\tface = triangles[ i ];\n\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n\t\t\t\tindex = allPointsMap[ key ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tface[ f ] = index;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn triangles.concat();\n\n\t},\n\n\tisClockWise: function ( pts ) {\n\n\t\treturn THREE.ShapeUtils.area( pts ) < 0;\n\n\t},\n\n\t// Bezier Curves formulas obtained from\n\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n\t// Quad Bezier Functions\n\n\tb2: ( function () {\n\n\t\tfunction b2p0( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn k * k * p;\n\n\t\t}\n\n\t\tfunction b2p1( t, p ) {\n\n\t\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t\t}\n\n\t\tfunction b2p2( t, p ) {\n\n\t\t\treturn t * t * p;\n\n\t\t}\n\n\t\treturn function b2( t, p0, p1, p2 ) {\n\n\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\n\t\t};\n\n\t} )(),\n\n\t// Cubic Bezier Functions\n\n\tb3: ( function () {\n\n\t\tfunction b3p0( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn k * k * k * p;\n\n\t\t}\n\n\t\tfunction b3p1( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn 3 * k * k * t * p;\n\n\t\t}\n\n\t\tfunction b3p2( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn 3 * k * t * t * p;\n\n\t\t}\n\n\t\tfunction b3p3( t, p ) {\n\n\t\t\treturn t * t * t * p;\n\n\t\t}\n\n\t\treturn function b3( t, p0, p1, p2, p3 ) {\n\n\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\n\t\t};\n\n\t} )()\n\n};\n\n// File:src/extras/core/Curve.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Extensible curve object\n *\n * Some common of Curve methods\n * .getPoint(t), getTangent(t)\n * .getPointAt(u), getTagentAt(u)\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following classes subclasses THREE.Curve:\n *\n * -- 2d classes --\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.CubicBezierCurve\n * THREE.SplineCurve\n * THREE.ArcCurve\n * THREE.EllipseCurve\n *\n * -- 3d classes --\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n * THREE.CubicBezierCurve3\n * THREE.SplineCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath\n *\n **/\n\n/**************************************************************\n *\tAbstract Curve base class\n **************************************************************/\n\nTHREE.Curve = function () {\n\n};\n\nTHREE.Curve.prototype = {\n\n\tconstructor: THREE.Curve,\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint: function ( t ) {\n\n\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n\t\treturn null;\n\n\t},\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt: function ( u ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t );\n\n\t},\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = 5;\n\n\t\tvar points = [];\n\n\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = 5;\n\n\t\tvar points = [];\n\n\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\t// Get total curve arc length\n\n\tgetLength: function () {\n\n\t\tvar lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t},\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\n\t\tif ( this.cacheArcLengths\n\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n\t\t\t&& ! this.needsUpdate ) {\n\n\t\t\t//console.log( \"cached\", this.cacheArcLengths );\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tvar cache = [];\n\t\tvar current, last = this.getPoint( 0 );\n\t\tvar p, sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint ( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\n\t},\n\n\tupdateArcLengths: function() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t},\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping: function ( u, distance ) {\n\n\t\tvar arcLengths = this.getLengths();\n\n\t\tvar i = 0, il = arcLengths.length;\n\n\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t//var time = Date.now();\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tvar low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\t//console.log('b' , i, low, high, Date.now()- time);\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\tvar t = i / ( il - 1 );\n\t\t\treturn t;\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tvar lengthBefore = arcLengths[ i ];\n\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t},\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent: function( t ) {\n\n\t\tvar delta = 0.0001;\n\t\tvar t1 = t - delta;\n\t\tvar t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tvar pt1 = this.getPoint( t1 );\n\t\tvar pt2 = this.getPoint( t2 );\n\n\t\tvar vec = pt2.clone().sub( pt1 );\n\t\treturn vec.normalize();\n\n\t},\n\n\tgetTangentAt: function ( u ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t );\n\n\t}\n\n};\n\n// TODO: Transformation for Curves?\n\n/**************************************************************\n *\t3D Curves\n **************************************************************/\n\n// A Factory method for creating new curve subclasses\n\nTHREE.Curve.create = function ( constructor, getPointFunc ) {\n\n\tconstructor.prototype = Object.create( THREE.Curve.prototype );\n\tconstructor.prototype.constructor = constructor;\n\tconstructor.prototype.getPoint = getPointFunc;\n\n\treturn constructor;\n\n};\n\n// File:src/extras/core/CurvePath.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n **/\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nTHREE.CurvePath = function () {\n\n\tthis.curves = [];\n\n\tthis.autoClose = false; // Automatically closes the path\n\n};\n\nTHREE.CurvePath.prototype = Object.assign( Object.create( THREE.Curve.prototype ), {\n\n\tconstructor: THREE.CurvePath,\n\n\tadd: function ( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t},\n\n\tclosePath: function () {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tthis.curves.push( new THREE.LineCurve( endPoint, startPoint ) );\n\n\t\t}\n\n\t},\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint: function ( t ) {\n\n\t\tvar d = t * this.getLength();\n\t\tvar curveLengths = this.getCurveLengths();\n\t\tvar i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t},\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength: function () {\n\n\t\tvar lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t},\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths: function () {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getLengths();\n\n\t},\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths: function () {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tvar lengths = [], sums = 0;\n\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t},\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = 40;\n\n\t\tvar points = [];\n\n\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\tgetPoints: function ( divisions ) {\n\n\t\tdivisions = divisions || 12;\n\n\t\tvar points = [], last;\n\n\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tvar curve = curves[ i ];\n\t\t\tvar resolution = curve instanceof THREE.EllipseCurve ? divisions * 2\n\t\t\t\t: curve instanceof THREE.LineCurve ? 1\n\t\t\t\t: curve instanceof THREE.SplineCurve ? divisions * curve.points.length\n\t\t\t\t: divisions;\n\n\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\tfor ( var j = 0; j < pts.length; j++ ) {\n\n\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\t/**************************************************************\n\t *\tCreate Geometries Helpers\n\t **************************************************************/\n\n\t/// Generate geometry from path points (for Line or Points objects)\n\n\tcreatePointsGeometry: function ( divisions ) {\n\n\t\tvar pts = this.getPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\t// Generate geometry from equidistant sampling along the path\n\n\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\tvar pts = this.getSpacedPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\tcreateGeometry: function ( points ) {\n\n\t\tvar geometry = new THREE.Geometry();\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tgeometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\n// File:src/extras/core/Font.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Font = function ( data ) {\n\n\tthis.data = data;\n\n};\n\nObject.assign( THREE.Font.prototype, {\n\n\tgenerateShapes: function ( text, size, divisions ) {\n\n\t\tfunction createPaths( text ) {\n\n\t\t\tvar chars = String( text ).split( '' );\n\t\t\tvar scale = size / data.resolution;\n\t\t\tvar offset = 0;\n\n\t\t\tvar paths = [];\n\n\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n\t\t\t\toffset += ret.offset;\n\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t\treturn paths;\n\n\t\t}\n\n\t\tfunction createPath( c, scale, offset ) {\n\n\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n\t\t\tif ( ! glyph ) return;\n\n\t\t\tvar path = new THREE.ShapePath();\n\n\t\t\tvar pts = [], b2 = THREE.ShapeUtils.b2, b3 = THREE.ShapeUtils.b3;\n\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n\t\t\tif ( glyph.o ) {\n\n\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n\t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn { offset: glyph.ha * scale, path: path };\n\n\t\t}\n\n\t\t//\n\n\t\tif ( size === undefined ) size = 100;\n\t\tif ( divisions === undefined ) divisions = 4;\n\n\t\tvar data = this.data;\n\n\t\tvar paths = createPaths( text );\n\t\tvar shapes = [];\n\n\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\n// File:src/extras/core/Path.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Creates free form 2d path using series of points, lines or curves.\n *\n **/\n\nTHREE.Path = function ( points ) {\n\n\tTHREE.CurvePath.call( this );\n\tthis.currentPoint = new THREE.Vector2();\n\n\tif ( points ) {\n\n\t\tthis.fromPoints( points );\n\n\t}\n\n};\n\nTHREE.Path.prototype = Object.assign( Object.create( THREE.CurvePath.prototype ), {\n\n\tconstructor: THREE.Path,\n\n\t// Create path using straight lines to connect all points\n\t// - vectors: array of Vector2\n\tfromPoints: function ( vectors ) {\n\n\t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n\t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\n\t\t}\n\n\t},\n\n\tmoveTo: function ( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t},\n\n\tlineTo: function ( x, y ) {\n\n\t\tvar curve = new THREE.LineCurve( this.currentPoint.clone(), new THREE.Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t},\n\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\tvar curve = new THREE.QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew THREE.Vector2( aCPx, aCPy ),\n\t\t\tnew THREE.Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t},\n\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tvar curve = new THREE.CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew THREE.Vector2( aCP1x, aCP1y ),\n\t\t\tnew THREE.Vector2( aCP2x, aCP2y ),\n\t\t\tnew THREE.Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t},\n\n\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tvar curve = new THREE.SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t},\n\n\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tvar x0 = this.currentPoint.x;\n\t\tvar y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar x0 = this.currentPoint.x;\n\t\tvar y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t},\n\n\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tvar lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t}\n\n} );\n\n\n// minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\nTHREE.ShapePath = function() {\n\tthis.subPaths = [];\n\tthis.currentPath = null;\n}\n\nTHREE.ShapePath.prototype = {\n\tmoveTo: function ( x, y ) {\n\t\tthis.currentPath = new THREE.Path();\n\t\tthis.subPaths.push(this.currentPath);\n\t\tthis.currentPath.moveTo( x, y );\n\t},\n\tlineTo: function ( x, y ) {\n\t\tthis.currentPath.lineTo( x, y );\n\t},\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\t},\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\t},\n\tsplineThru: function ( pts ) {\n\t\tthis.currentPath.splineThru( pts );\n\t},\n\n\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tvar shapes = [];\n\n\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\tvar tmpShape = new THREE.Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tvar inside = false;\n\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tvar isClockWise = THREE.ShapeUtils.isClockWise;\n\n\t\tvar subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new THREE.Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tvar betterShapeHoles = [];\n\t\tvar newShapes = [];\n\t\tvar newShapeHoles = [];\n\t\tvar mainIdx = 0;\n\t\tvar tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tvar ambiguous = false;\n\t\t\tvar toChange = [];\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmpHoles;\n\n\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n}\n\n// File:src/extras/core/Shape.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Defines a 2d shape plane using paths.\n **/\n\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\n\nTHREE.Shape = function () {\n\n\tTHREE.Path.apply( this, arguments );\n\n\tthis.holes = [];\n\n};\n\nTHREE.Shape.prototype = Object.assign( Object.create( THREE.Path.prototype ), {\n\n\tconstructor: THREE.Shape,\n\n\t// Convenience method to return ExtrudeGeometry\n\n\textrude: function ( options ) {\n\n\t\treturn new THREE.ExtrudeGeometry( this, options );\n\n\t},\n\n\t// Convenience method to return ShapeGeometry\n\n\tmakeGeometry: function ( options ) {\n\n\t\treturn new THREE.ShapeGeometry( this, options );\n\n\t},\n\n\tgetPointsHoles: function ( divisions ) {\n\n\t\tvar holesPts = [];\n\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t},\n\n\t// Get points of shape and holes (keypoints based on segments parameter)\n\n\textractAllPoints: function ( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t},\n\n\textractPoints: function ( divisions ) {\n\n\t\treturn this.extractAllPoints( divisions );\n\n\t}\n\n} );\n\n// File:src/extras/curves/LineCurve.js\n\n/**************************************************************\n *\tLine\n **************************************************************/\n\nTHREE.LineCurve = function ( v1, v2 ) {\n\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\n};\n\nTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.LineCurve.prototype.constructor = THREE.LineCurve;\n\nTHREE.LineCurve.prototype.getPoint = function ( t ) {\n\n\tif ( t === 1 ) {\n\n\t\treturn this.v2.clone();\n\n\t}\n\n\tvar point = this.v2.clone().sub( this.v1 );\n\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nTHREE.LineCurve.prototype.getPointAt = function ( u ) {\n\n\treturn this.getPoint( u );\n\n};\n\nTHREE.LineCurve.prototype.getTangent = function( t ) {\n\n\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\treturn tangent.normalize();\n\n};\n\n// File:src/extras/curves/QuadraticBezierCurve.js\n\n/**************************************************************\n *\tQuadratic Bezier curve\n **************************************************************/\n\n\nTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\n\n\tthis.v0 = v0;\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\n};\n\nTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\n\n\nTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n\tvar b2 = THREE.ShapeUtils.b2;\n\n\treturn new THREE.Vector2(\n\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n\t);\n\n};\n\n\nTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\n\tvar tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\n\n\treturn new THREE.Vector2(\n\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n\t).normalize();\n\n};\n\n// File:src/extras/curves/CubicBezierCurve.js\n\n/**************************************************************\n *\tCubic Bezier curve\n **************************************************************/\n\nTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\n\n\tthis.v0 = v0;\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\tthis.v3 = v3;\n\n};\n\nTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\n\nTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\n\n\tvar b3 = THREE.ShapeUtils.b3;\n\n\treturn new THREE.Vector2( \n\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t);\n\n};\n\nTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\n\n\tvar tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\n\n\treturn new THREE.Vector2( \n\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t).normalize();\n\n};\n\n// File:src/extras/curves/SplineCurve.js\n\n/**************************************************************\n *\tSpline curve\n **************************************************************/\n\nTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\n\n\tthis.points = ( points == undefined ) ? [] : points;\n\n};\n\nTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\n\nTHREE.SplineCurve.prototype.getPoint = function ( t ) {\n\n\tvar points = this.points;\n\tvar point = ( points.length - 1 ) * t;\n\n\tvar intPoint = Math.floor( point );\n\tvar weight = point - intPoint;\n\n\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\tvar point1 = points[ intPoint ];\n\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\tvar interpolate = THREE.CurveUtils.interpolate;\n\n\treturn new THREE.Vector2(\n\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n\t);\n\n};\n\n// File:src/extras/curves/EllipseCurve.js\n\n/**************************************************************\n *\tEllipse curve\n **************************************************************/\n\nTHREE.EllipseCurve = function( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\tthis.aX = aX;\n\tthis.aY = aY;\n\n\tthis.xRadius = xRadius;\n\tthis.yRadius = yRadius;\n\n\tthis.aStartAngle = aStartAngle;\n\tthis.aEndAngle = aEndAngle;\n\n\tthis.aClockwise = aClockwise;\n\n\tthis.aRotation = aRotation || 0;\n\n};\n\nTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\n\nTHREE.EllipseCurve.prototype.getPoint = function( t ) {\n\n\tvar twoPi = Math.PI * 2;\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t// ensures that deltaAngle is 0 .. 2 PI\n\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\tif ( samePoints ) {\n\n\t\t\tdeltaAngle = 0;\n\n\t\t} else {\n\n\t\t\tdeltaAngle = twoPi;\n\n\t\t}\n\n\t}\n\n\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\tdeltaAngle = - twoPi;\n\n\t\t} else {\n\n\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t}\n\n\t}\n\n\tvar angle = this.aStartAngle + t * deltaAngle;\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\tif ( this.aRotation !== 0 ) {\n\n\t\tvar cos = Math.cos( this.aRotation );\n\t\tvar sin = Math.sin( this.aRotation );\n\n\t\tvar tx = x - this.aX;\n\t\tvar ty = y - this.aY;\n\n\t\t// Rotate the point about the center of the ellipse.\n\t\tx = tx * cos - ty * sin + this.aX;\n\t\ty = tx * sin + ty * cos + this.aY;\n\n\t}\n\n\treturn new THREE.Vector2( x, y );\n\n};\n\n// File:src/extras/curves/ArcCurve.js\n\n/**************************************************************\n *\tArc curve\n **************************************************************/\n\nTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n};\n\nTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\nTHREE.ArcCurve.prototype.constructor = THREE.ArcCurve;\n\n// File:src/extras/curves/LineCurve3.js\n\n/**************************************************************\n *\tLine3D\n **************************************************************/\n\nTHREE.LineCurve3 = THREE.Curve.create(\n\n\tfunction ( v1, v2 ) {\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tif ( t === 1 ) {\n\n\t\t\treturn this.v2.clone();\n\n\t\t}\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t\tvector.multiplyScalar( t );\n\t\tvector.add( this.v1 );\n\n\t\treturn vector;\n\n\t}\n\n);\n\n// File:src/extras/curves/QuadraticBezierCurve3.js\n\n/**************************************************************\n *\tQuadratic Bezier 3D curve\n **************************************************************/\n\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\n\n\tfunction ( v0, v1, v2 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar b2 = THREE.ShapeUtils.b2;\t\t\n\n\t\treturn new THREE.Vector3(\n\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/CubicBezierCurve3.js\n\n/**************************************************************\n *\tCubic Bezier 3D curve\n **************************************************************/\n\nTHREE.CubicBezierCurve3 = THREE.Curve.create(\n\n\tfunction ( v0, v1, v2, v3 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar b3 = THREE.ShapeUtils.b3;\n\n\t\treturn new THREE.Vector3(\n\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/SplineCurve3.js\n\n/**************************************************************\n *\tSpline 3D curve\n **************************************************************/\n\n\nTHREE.SplineCurve3 = THREE.Curve.create(\n\n\tfunction ( points /* array of Vector3 */ ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n\t\tthis.points = ( points == undefined ) ? [] : points;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar points = this.points;\n\t\tvar point = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\n\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n\t\tvar point1 = points[ intPoint ];\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\n\n\t\treturn new THREE.Vector3(\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/CatmullRomCurve3.js\n\n/**\n * @author zz85 https://github.com/zz85\n *\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\nTHREE.CatmullRomCurve3 = ( function() {\n\n\tvar\n\t\ttmp = new THREE.Vector3(),\n\t\tpx = new CubicPoly(),\n\t\tpy = new CubicPoly(),\n\t\tpz = new CubicPoly();\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t}\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\n\t\tthis.c0 = x0;\n\t\tthis.c1 = t0;\n\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t};\n\n\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t// compute tangents when parameterized in [t1,t2]\n\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t// rescale tangents for parametrization in [0,1]\n\t\tt1 *= dt1;\n\t\tt2 *= dt1;\n\n\t\t// initCubicPoly\n\t\tthis.init( x1, x2, t1, t2 );\n\n\t};\n\n\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\n\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t};\n\n\tCubicPoly.prototype.calc = function( t ) {\n\n\t\tvar t2 = t * t;\n\t\tvar t3 = t2 * t;\n\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\n\t};\n\n\t// Subclass Three.js curve\n\treturn THREE.Curve.create(\n\n\t\tfunction ( p /* array of Vector3 */ ) {\n\n\t\t\tthis.points = p || [];\n\t\t\tthis.closed = false;\n\n\t\t},\n\n\t\tfunction ( t ) {\n\n\t\t\tvar points = this.points,\n\t\t\t\tpoint, intPoint, weight, l;\n\n\t\t\tl = points.length;\n\n\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\n\t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\t\tintPoint = Math.floor( point );\n\t\t\tweight = point - intPoint;\n\n\t\t\tif ( this.closed ) {\n\n\t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n\t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\t\tintPoint = l - 2;\n\t\t\t\tweight = 1;\n\n\t\t\t}\n\n\t\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t\t} else {\n\n\t\t\t\t// extrapolate first point\n\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\t\tp0 = tmp;\n\n\t\t\t}\n\n\t\t\tp1 = points[ intPoint % l ];\n\t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t\t} else {\n\n\t\t\t\t// extrapolate last point\n\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\t\tp3 = tmp;\n\n\t\t\t}\n\n\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t\t// safety check for repeated points\n\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t\t} else if ( this.type === 'catmullrom' ) {\n\n\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\n\t\t\t}\n\n\t\t\tvar v = new THREE.Vector3(\n\t\t\t\tpx.calc( weight ),\n\t\t\t\tpy.calc( weight ),\n\t\t\t\tpz.calc( weight )\n\t\t\t);\n\n\t\t\treturn v;\n\n\t\t}\n\n\t);\n\n} )();\n\n// File:src/extras/curves/ClosedSplineCurve3.js\n\n/**************************************************************\n *\tClosed Spline 3D curve\n **************************************************************/\n\n\nTHREE.ClosedSplineCurve3 = function ( points ) {\n\n\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\n\tTHREE.CatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\tthis.closed = true;\n\n};\n\nTHREE.ClosedSplineCurve3.prototype = Object.create( THREE.CatmullRomCurve3.prototype );\n\n// File:src/extras/geometries/BoxGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n */\n\nTHREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'BoxGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tthis.fromBufferGeometry( new THREE.BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\n\nTHREE.CubeGeometry = THREE.BoxGeometry;\n\n// File:src/extras/geometries/BoxBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.BoxBufferGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'BoxBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tvar scope = this;\n\n\t// segments\n\twidthSegments = Math.floor( widthSegments ) || 1;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t// these are used to calculate buffer length\n\tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n\tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\n\t// buffers\n\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\tvar vertices = new Float32Array( vertexCount * 3 );\n\tvar normals = new Float32Array( vertexCount * 3 );\n\tvar uvs = new Float32Array( vertexCount * 2 );\n\n\t// offset variables\n\tvar vertexBufferOffset = 0;\n\tvar uvBufferOffset = 0;\n\tvar indexBufferOffset = 0;\n\tvar numberOfVertices = 0;\n\n\t// group variables\n\tvar groupStart = 0;\n\n\t// build each side of the box geometry\n\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n\tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n\tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n\tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n\tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\n\t// build geometry\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\t// helper functions\n\n\tfunction calculateVertexCount ( w, h, d ) {\n\n\t\tvar vertices = 0;\n\n\t\t// calculate the amount of vertices for each side (plane)\n\t\tvertices += (w + 1) * (h + 1) * 2; // xy\n\t\tvertices += (w + 1) * (d + 1) * 2; // xz\n\t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\n\t\treturn vertices;\n\n\t}\n\n\tfunction calculateIndexCount ( w, h, d ) {\n\n\t\tvar index = 0;\n\n\t\t// calculate the amount of squares for each side\n\t\tindex += w * h * 2; // xy\n\t\tindex += w * d * 2; // xz\n\t\tindex += d * h * 2; // zy\n\n\t\treturn index * 6; // two triangles per square => six vertices per square\n\n\t}\n\n\tfunction buildPlane ( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\tvar segmentWidth\t= width / gridX;\n\t\tvar segmentHeight = height / gridY;\n\n\t\tvar widthHalf = width / 2;\n\t\tvar heightHalf = height / 2;\n\t\tvar depthHalf = depth / 2;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar vertexCounter = 0;\n\t\tvar groupCount = 0;\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t// set values to correct vector component\n\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t// now apply vector to vertex buffer\n\t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\n\t\t\t\t// set values to correct vector component\n\t\t\t\tvector[ u ] = 0;\n\t\t\t\tvector[ v ] = 0;\n\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t// now apply vector to normal buffer\n\t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n\t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\n\t\t\t\t// uvs\n\t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n\t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\n\t\t\t\t// update offsets and counters\n\t\t\t\tvertexBufferOffset += 3;\n\t\t\t\tuvBufferOffset += 2;\n\t\t\t\tvertexCounter += 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// 1. you need three indices to draw a single face\n\t\t// 2. a single segment consists of two faces\n\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t// indices\n\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// face one\n\t\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n\t\t\t\t// face two\n\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n\t\t\t\t// update offsets and counters\n\t\t\t\tindexBufferOffset += 6;\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t// calculate new start value for groups\n\t\tgroupStart += groupCount;\n\n\t\t// update total number of vertices\n\t\tnumberOfVertices += vertexCounter;\n\n\t}\n\n};\n\nTHREE.BoxBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.BoxBufferGeometry.prototype.constructor = THREE.BoxBufferGeometry;\n\n// File:src/extras/geometries/CircleGeometry.js\n\n/**\n * @author hughes\n */\n\nTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'CircleGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\n};\n\nTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;\n\n// File:src/extras/geometries/CircleBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'CircleBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 50;\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tvar vertices = segments + 2;\n\n\tvar positions = new Float32Array( vertices * 3 );\n\tvar normals = new Float32Array( vertices * 3 );\n\tvar uvs = new Float32Array( vertices * 2 );\n\n\t// center data is already zero, but need to set a few extras\n\tnormals[ 2 ] = 1.0;\n\tuvs[ 0 ] = 0.5;\n\tuvs[ 1 ] = 0.5;\n\n\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\n\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\tpositions[ i ] = radius * Math.cos( segment );\n\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\n\t\tnormals[ i + 2 ] = 1; // normal z\n\n\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\n\t}\n\n\tvar indices = [];\n\n\tfor ( var i = 1; i <= segments; i ++ ) {\n\n\t\tindices.push( i, i + 1, 0 );\n\n\t}\n\n\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;\n\n// File:src/extras/geometries/CylinderBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.CylinderBufferGeometry = function( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'CylinderBufferGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tvar scope = this;\n\n\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\theight = height !== undefined ? height : 100;\n\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\n\topenEnded = openEnded !== undefined ? openEnded : false;\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\n\t// used to calculate buffer length\n\n\tvar nbCap = 0;\n\n\tif ( openEnded === false ) {\n\n\t\tif ( radiusTop > 0 ) nbCap ++;\n\t\tif ( radiusBottom > 0 ) nbCap ++;\n\n\t}\n\n\tvar vertexCount = calculateVertexCount();\n\tvar indexCount = calculateIndexCount();\n\n\t// buffers\n\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// helper variables\n\n\tvar index = 0,\n\t    indexOffset = 0,\n\t    indexArray = [],\n\t    halfHeight = height / 2;\n\n\t// group variables\n\tvar groupStart = 0;\n\n\t// generate geometry\n\n\tgenerateTorso();\n\n\tif ( openEnded === false ) {\n\n\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n\t// helper functions\n\n\tfunction calculateVertexCount() {\n\n\t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\n\t\t}\n\n\t\treturn count;\n\n\t}\n\n\tfunction calculateIndexCount() {\n\n\t\tvar count = radialSegments * heightSegments * 2 * 3;\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tcount += radialSegments * nbCap * 3;\n\n\t\t}\n\n\t\treturn count;\n\n\t}\n\n\tfunction generateTorso() {\n\n\t\tvar x, y;\n\t\tvar normal = new THREE.Vector3();\n\t\tvar vertex = new THREE.Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\t// this will be used to calculate the normal\n\t\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\tvar indexRow = [];\n\n\t\t\tvar v = y / heightSegments;\n\n\t\t\t// calculate the radius of the current row\n\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\n\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\t\t\t\tnormal.copy( vertex );\n\n\t\t\t\t// handle special case if radiusTop/radiusBottom is zero\n\n\t\t\t\tif ( ( radiusTop === 0 && y === 0 ) || ( radiusBottom === 0 && y === heightSegments ) ) {\n\n\t\t\t\t\tnormal.x = Math.sin( u * thetaLength + thetaStart );\n\t\t\t\t\tnormal.z = Math.cos( u * thetaLength + thetaStart );\n\n\t\t\t\t}\n\n\t\t\t\tnormal.setY( Math.sqrt( normal.x * normal.x + normal.z * normal.z ) * tanTheta ).normalize();\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\t\t\t\tuvs.setXY( index, u, 1 - v );\n\n\t\t\t\t// save index of vertex in respective row\n\t\t\t\tindexRow.push( index );\n\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// now save vertices of the row in our index array\n\t\t\tindexArray.push( indexRow );\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\tvar i1 = indexArray[ y ][ x ];\n\t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n\t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t// face one\n\t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n\t\t\t\t// face two\n\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n\t\t\t\t// update counters\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t// calculate new start value for groups\n\t\tgroupStart += groupCount;\n\n\t}\n\n\tfunction generateCap( top ) {\n\n\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\tvar uv = new THREE.Vector2();\n\t\tvar vertex = new THREE.Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t// save the index of the first center vertex\n\t\tcenterIndexStart = index;\n\n\t\t// first we generate the center vertex data of the cap.\n\t\t// because the geometry needs one set of uvs per face,\n\t\t// we must generate a center vertex per face/segment\n\n\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t// vertex\n\t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\n\t\t\t// normal\n\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n\t\t\t// uv\n\t\t\tuv.x = 0.5;\n\t\t\tuv.y = 0.5;\n\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// save the index of the last center vertex\n\t\tcenterIndexEnd = index;\n\n\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\tvar u = x / radialSegments;\n\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t// vertex\n\t\t\tvertex.x = radius * sinTheta;\n\t\t\tvertex.y = halfHeight * sign;\n\t\t\tvertex.z = radius * cosTheta;\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n\t\t\t// uv\n\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tvar c = centerIndexStart + x;\n\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\tif ( top === true ) {\n\n\t\t\t\t// face top\n\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n\t\t\t} else {\n\n\t\t\t\t// face bottom\n\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n\t\t\t}\n\n\t\t\t// update counters\n\t\t\tgroupCount += 3;\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t// calculate new start value for groups\n\t\tgroupStart += groupCount;\n\n\t}\n\n};\n\nTHREE.CylinderBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.CylinderBufferGeometry.prototype.constructor = THREE.CylinderBufferGeometry;\n\n// File:src/extras/geometries/CylinderGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'CylinderGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;\n\n// File:src/extras/geometries/ConeBufferGeometry.js\n\n/*\n * @author: abelnation / http://github.com/abelnation\n */\n\nTHREE.ConeBufferGeometry = function (\n\tradius, height,\n\tradialSegments, heightSegments,\n\topenEnded, thetaStart, thetaLength ) {\n\n\tTHREE.CylinderBufferGeometry.call( this,\n\t\t0, radius, height,\n\t\tradialSegments, heightSegments,\n\t\topenEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n};\n\nTHREE.ConeBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.ConeBufferGeometry.prototype.constructor = THREE.ConeBufferGeometry;\n\n// File:src/extras/geometries/ConeGeometry.js\n\n/**\n * @author abelnation / http://github.com/abelnation\n */\n\nTHREE.ConeGeometry = function (\n\tradius, height,\n\tradialSegments, heightSegments,\n\topenEnded, thetaStart, thetaLength ) {\n\n\tTHREE.CylinderGeometry.call( this,\n\t\t0, radius, height,\n\t\tradialSegments, heightSegments,\n\t\topenEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n};\n\nTHREE.ConeGeometry.prototype = Object.create( THREE.CylinderGeometry.prototype );\nTHREE.ConeGeometry.prototype.constructor = THREE.ConeGeometry;\n\n// File:src/extras/geometries/EdgesGeometry.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.EdgesGeometry = function ( geometry, thresholdAngle ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\tvar thresholdDot = Math.cos( THREE.Math.DEG2RAD * thresholdAngle );\n\n\tvar edge = [ 0, 0 ], hash = {};\n\n\tfunction sortFunction( a, b ) {\n\n\t\treturn a - b;\n\n\t}\n\n\tvar keys = [ 'a', 'b', 'c' ];\n\n\tvar geometry2;\n\n\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\tgeometry2 = new THREE.Geometry();\n\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t} else {\n\n\t\tgeometry2 = geometry.clone();\n\n\t}\n\n\tgeometry2.mergeVertices();\n\tgeometry2.computeFaceNormals();\n\n\tvar vertices = geometry2.vertices;\n\tvar faces = geometry2.faces;\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tvar face = faces[ i ];\n\n\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\tedge.sort( sortFunction );\n\n\t\t\tvar key = edge.toString();\n\n\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t} else {\n\n\t\t\t\thash[ key ].face2 = i;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tvar coords = [];\n\n\tfor ( var key in hash ) {\n\n\t\tvar h = hash[ key ];\n\n\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\tvar vertex = vertices[ h.vert1 ];\n\t\t\tcoords.push( vertex.x );\n\t\t\tcoords.push( vertex.y );\n\t\t\tcoords.push( vertex.z );\n\n\t\t\tvertex = vertices[ h.vert2 ];\n\t\t\tcoords.push( vertex.x );\n\t\t\tcoords.push( vertex.y );\n\t\t\tcoords.push( vertex.z );\n\n\t\t}\n\n\t}\n\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );\n\n};\n\nTHREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;\n\n// File:src/extras/geometries/ExtrudeGeometry.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  amount: <int>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline is bevel\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n *\n *  uvGenerator: <Object> // object that provides UV generator functions\n *\n * }\n **/\n\nTHREE.ExtrudeGeometry = function ( shapes, options ) {\n\n\tif ( typeof( shapes ) === \"undefined\" ) {\n\n\t\tshapes = [];\n\t\treturn;\n\n\t}\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ExtrudeGeometry';\n\n\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\tthis.addShapeList( shapes, options );\n\n\tthis.computeFaceNormals();\n\n\t// can't really use automatic vertex normals\n\t// as then front and back sides get smoothed too\n\t// should do separate smoothing just for sides\n\n\t//this.computeVertexNormals();\n\n\t//console.log( \"took\", ( Date.now() - startTime ) );\n\n};\n\nTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\n\nTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\tvar sl = shapes.length;\n\n\tfor ( var s = 0; s < sl; s ++ ) {\n\n\t\tvar shape = shapes[ s ];\n\t\tthis.addShape( shape, options );\n\n\t}\n\n};\n\nTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\n\tvar amount = options.amount !== undefined ? options.amount : 100;\n\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\tvar steps = options.steps !== undefined ? options.steps : 1;\n\n\tvar extrudePath = options.extrudePath;\n\tvar extrudePts, extrudeByPath = false;\n\n\t// Use default WorldUVGenerator if no UV generators are specified.\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\n\n\tvar splineTube, binormal, normal, position2;\n\tif ( extrudePath ) {\n\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\textrudeByPath = true;\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t// SETUP TNB variables\n\n\t\t// Reuse TNB from TubeGeomtry for now.\n\t\t// TODO1 - have a .isClosed in spline?\n\n\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\tbinormal = new THREE.Vector3();\n\t\tnormal = new THREE.Vector3();\n\t\tposition2 = new THREE.Vector3();\n\n\t}\n\n\t// Safeguards if bevels are not enabled\n\n\tif ( ! bevelEnabled ) {\n\n\t\tbevelSegments = 0;\n\t\tbevelThickness = 0;\n\t\tbevelSize = 0;\n\n\t}\n\n\t// Variables initialization\n\n\tvar ahole, h, hl; // looping of holes\n\tvar scope = this;\n\n\tvar shapesOffset = this.vertices.length;\n\n\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\tvar vertices = shapePoints.shape;\n\tvar holes = shapePoints.holes;\n\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\n\n\tif ( reverse ) {\n\n\t\tvertices = vertices.reverse();\n\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tif ( THREE.ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\n\t}\n\n\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\n\n\t/* Vertices */\n\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\tvertices = vertices.concat( ahole );\n\n\t}\n\n\n\tfunction scalePt2 ( pt, vec, size ) {\n\n\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t}\n\n\tvar b, bs, t, z,\n\t\tvert, vlen = vertices.length,\n\t\tface, flen = faces.length;\n\n\n\t// Find directions for point movement\n\n\n\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t//\n\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\n\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\n\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t// check for collinear edges\n\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t// not collinear\n\n\t\t\t// length of vectors for normalizing\n\n\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t// vector from inPt to intersection point\n\n\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t//  but prevent crazy spikes\n\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\treturn\tnew THREE.Vector2( v_trans_x, v_trans_y );\n\n\t\t\t} else {\n\n\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// handle special case of collinear edges\n\n\t\t\tvar direction_eq = false;\t\t// assumes: opposite\n\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( direction_eq ) {\n\n\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\tv_trans_y =  v_prev_x;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t} else {\n\n\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn\tnew THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t}\n\n\n\tvar contourMovements = [];\n\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\tif ( j === il ) j = 0;\n\t\tif ( k === il ) k = 0;\n\n\t\t//  (j)---(i)---(k)\n\t\t// console.log('i,j,k', i, j , k)\n\n\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t}\n\n\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\toneHoleMovements = [];\n\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t}\n\n\t\tholesMovements.push( oneHoleMovements );\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t}\n\n\n\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * ( 1 - t );\n\n\t\t//z = bevelThickness * t;\n\t\tbs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved\n\t\t//bs = bevelSize * t; // linear\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tbs = bevelSize;\n\n\t// Back facing vertices\n\n\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\tif ( ! extrudeByPath ) {\n\n\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t} else {\n\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t}\n\n\t}\n\n\t// Add stepped vertices...\n\t// Including front facing vertices\n\n\tvar s;\n\n\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Add bevel segments planes\n\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * ( 1 - t );\n\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\n\t\tbs = bevelSize * Math.sin ( t * Math.PI / 2 );\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* Faces */\n\n\t// Top and bottom faces\n\n\tbuildLidFaces();\n\n\t// Sides faces\n\n\tbuildSideFaces();\n\n\n\t/////  Internal functions\n\n\tfunction buildLidFaces() {\n\n\t\tif ( bevelEnabled ) {\n\n\t\t\tvar layer = 0; // steps + 1\n\t\t\tvar offset = vlen * layer;\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t}\n\n\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\toffset = vlen * layer;\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t}\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Create faces for the z-sides of the shape\n\n\tfunction buildSideFaces() {\n\n\t\tvar layeroffset = 0;\n\t\tsidewalls( contour, layeroffset );\n\t\tlayeroffset += contour.length;\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t//, true\n\t\t\tlayeroffset += ahole.length;\n\n\t\t}\n\n\t}\n\n\tfunction sidewalls( contour, layeroffset ) {\n\n\t\tvar j, k;\n\t\ti = contour.length;\n\n\t\twhile ( -- i >= 0 ) {\n\n\t\t\tj = i;\n\t\t\tk = i - 1;\n\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\tfunction v( x, y, z ) {\n\n\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\n\n\t}\n\n\tfunction f3( a, b, c ) {\n\n\t\ta += shapesOffset;\n\t\tb += shapesOffset;\n\t\tc += shapesOffset;\n\n\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );\n\n\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\n\t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\n\t}\n\n\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n\t\ta += shapesOffset;\n\t\tb += shapesOffset;\n\t\tc += shapesOffset;\n\t\td += shapesOffset;\n\n\t\tscope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );\n\t\tscope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );\n\n\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\n\t}\n\n};\n\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\n\t\tvar vertices = geometry.vertices;\n\n\t\tvar a = vertices[ indexA ];\n\t\tvar b = vertices[ indexB ];\n\t\tvar c = vertices[ indexC ];\n\n\t\treturn [\n\t\t\tnew THREE.Vector2( a.x, a.y ),\n\t\t\tnew THREE.Vector2( b.x, b.y ),\n\t\t\tnew THREE.Vector2( c.x, c.y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\n\t\tvar vertices = geometry.vertices;\n\n\t\tvar a = vertices[ indexA ];\n\t\tvar b = vertices[ indexB ];\n\t\tvar c = vertices[ indexC ];\n\t\tvar d = vertices[ indexD ];\n\n\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\n\t\t\treturn [\n\t\t\t\tnew THREE.Vector2( a.x, 1 - a.z ),\n\t\t\t\tnew THREE.Vector2( b.x, 1 - b.z ),\n\t\t\t\tnew THREE.Vector2( c.x, 1 - c.z ),\n\t\t\t\tnew THREE.Vector2( d.x, 1 - d.z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew THREE.Vector2( a.y, 1 - a.z ),\n\t\t\t\tnew THREE.Vector2( b.y, 1 - b.z ),\n\t\t\t\tnew THREE.Vector2( c.y, 1 - c.z ),\n\t\t\t\tnew THREE.Vector2( d.y, 1 - d.z )\n\t\t\t];\n\n\t\t}\n\n\t}\n};\n\n// File:src/extras/geometries/ShapeGeometry.js\n\n/**\n * @author jonobr1 / http://jonobr1.com\n *\n * Creates a one-sided polygonal geometry from a path shape. Similar to\n * ExtrudeGeometry.\n *\n * parameters = {\n *\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n *\n *\tmaterial: <int> // material index for front and back faces\n *\tuvGenerator: <Object> // object that provides UV generator functions\n *\n * }\n **/\n\nTHREE.ShapeGeometry = function ( shapes, options ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ShapeGeometry';\n\n\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\n\tthis.addShapeList( shapes, options );\n\n\tthis.computeFaceNormals();\n\n};\n\nTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\n\n/**\n * Add an array of shapes to THREE.ShapeGeometry.\n */\nTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\tthis.addShape( shapes[ i ], options );\n\n\t}\n\n\treturn this;\n\n};\n\n/**\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n */\nTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\n\tif ( options === undefined ) options = {};\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\tvar material = options.material;\n\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\n\t//\n\n\tvar i, l, hole;\n\n\tvar shapesOffset = this.vertices.length;\n\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\tvar vertices = shapePoints.shape;\n\tvar holes = shapePoints.holes;\n\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\n\n\tif ( reverse ) {\n\n\t\tvertices = vertices.reverse();\n\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\t\thole = holes[ i ];\n\n\t\t\tif ( THREE.ShapeUtils.isClockWise( hole ) ) {\n\n\t\t\t\tholes[ i ] = hole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t\treverse = false;\n\n\t}\n\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\n\n\t// Vertices\n\n\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\thole = holes[ i ];\n\t\tvertices = vertices.concat( hole );\n\n\t}\n\n\t//\n\n\tvar vert, vlen = vertices.length;\n\tvar face, flen = faces.length;\n\n\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\tvert = vertices[ i ];\n\n\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\n\n\t}\n\n\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\tface = faces[ i ];\n\n\t\tvar a = face[ 0 ] + shapesOffset;\n\t\tvar b = face[ 1 ] + shapesOffset;\n\t\tvar c = face[ 2 ] + shapesOffset;\n\n\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\n\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\n\t}\n\n};\n\n// File:src/extras/geometries/LatheBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n // points - to create a closed torus, one must use a set of points\n //    like so: [ a, b, c, d, a ], see first is the same as last.\n // segments - the number of circumference segments to create\n // phiStart - the starting radian\n // phiLength - the radian (0 to 2PI) range of the lathed section\n //    2PI is a closed lathe, less than 2PI is a portion.\n\nTHREE.LatheBufferGeometry = function ( points, segments, phiStart, phiLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'LatheBufferGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tsegments = Math.floor( segments ) || 12;\n\tphiStart = phiStart || 0;\n\tphiLength = phiLength || Math.PI * 2;\n\n\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\tphiLength = THREE.Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\t// these are used to calculate buffer length\n\tvar vertexCount = ( segments + 1 ) * points.length;\n\tvar indexCount = segments * points.length * 2 * 3;\n\n\t// buffers\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// helper variables\n\tvar index = 0, indexOffset = 0, base;\n\tvar inversePointLength = 1.0 / ( points.length - 1 );\n\tvar inverseSegments = 1.0 / segments;\n\tvar vertex = new THREE.Vector3();\n\tvar uv = new THREE.Vector2();\n\tvar i, j;\n\n\t// generate vertices and uvs\n\n\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\tvar sin = Math.sin( phi );\n\t\tvar cos = Math.cos( phi );\n\n\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t// vertex\n\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\tvertex.y = points[ j ].y;\n\t\t\tvertex.z = points[ j ].x * cos;\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// uv\n\t\t\tuv.x = i / segments;\n\t\t\tuv.y = j / ( points.length - 1 );\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\tbase = j + i * points.length;\n\n\t\t\t// indices\n\t\t\tvar a = base;\n\t\t\tvar b = base + points.length;\n\t\t\tvar c = base + points.length + 1;\n\t\t\tvar d = base + 1;\n\n\t\t\t// face one\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t// face two\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'uv', uvs );\n\n\t// generate normals\n\n\tthis.computeVertexNormals();\n\n\t// if the geometry is closed, we need to average the normals along the seam.\n\t// because the corresponding vertices are identical (but still have different UVs).\n\n\tif( phiLength === Math.PI * 2 ) {\n\n\t\tvar normals = this.attributes.normal.array;\n\t\tvar n1 = new THREE.Vector3();\n\t\tvar n2 = new THREE.Vector3();\n\t\tvar n = new THREE.Vector3();\n\n\t\t// this is the buffer offset for the last line of vertices\n\t\tbase = segments * points.length * 3;\n\n\t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t// select the normal of the vertex in the first line\n\t\t\tn1.x = normals[ j + 0 ];\n\t\t\tn1.y = normals[ j + 1 ];\n\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t// select the normal of the vertex in the last line\n\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t// average normals\n\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t// assign the new values to both normals\n\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t} // next row\n\n\t}\n\n};\n\nTHREE.LatheBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.LatheBufferGeometry.prototype.constructor = THREE.LatheBufferGeometry;\n\n// File:src/extras/geometries/LatheGeometry.js\n\n/**\n * @author astrodud / http://astrodud.isgreat.org/\n * @author zz85 / https://github.com/zz85\n * @author bhouston / http://clara.io\n */\n\n// points - to create a closed torus, one must use a set of points\n//    like so: [ a, b, c, d, a ], see first is the same as last.\n// segments - the number of circumference segments to create\n// phiStart - the starting radian\n// phiLength - the radian (0 to 2PI) range of the lathed section\n//    2PI is a closed lathe, less than 2PI is a portion.\n\nTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'LatheGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;\n\n// File:src/extras/geometries/PlaneGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n */\n\nTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'PlaneGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tthis.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\n};\n\nTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;\n\n// File:src/extras/geometries/PlaneBufferGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n */\n\nTHREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'PlaneBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tvar width_half = width / 2;\n\tvar height_half = height / 2;\n\n\tvar gridX = Math.floor( widthSegments ) || 1;\n\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\tvar gridX1 = gridX + 1;\n\tvar gridY1 = gridY + 1;\n\n\tvar segment_width = width / gridX;\n\tvar segment_height = height / gridY;\n\n\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\n\tvar offset = 0;\n\tvar offset2 = 0;\n\n\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\tvar y = iy * segment_height - height_half;\n\n\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\tvertices[ offset ] = x;\n\t\t\tvertices[ offset + 1 ] = - y;\n\n\t\t\tnormals[ offset + 2 ] = 1;\n\n\t\t\tuvs[ offset2 ] = ix / gridX;\n\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\n\t\t\toffset += 3;\n\t\t\toffset2 += 2;\n\n\t\t}\n\n\t}\n\n\toffset = 0;\n\n\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\n\tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\n\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\tvar a = ix + gridX1 * iy;\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\tindices[ offset ] = a;\n\t\t\tindices[ offset + 1 ] = b;\n\t\t\tindices[ offset + 2 ] = d;\n\n\t\t\tindices[ offset + 3 ] = b;\n\t\t\tindices[ offset + 4 ] = c;\n\t\t\tindices[ offset + 5 ] = d;\n\n\t\t\toffset += 6;\n\n\t\t}\n\n\t}\n\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n};\n\nTHREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;\n\n// File:src/extras/geometries/RingBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.RingBufferGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'RingBufferGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tinnerRadius = innerRadius || 20;\n\touterRadius = outerRadius || 50;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t// these are used to calculate buffer length\n\tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n\tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\n\t// buffers\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// some helper variables\n\tvar index = 0, indexOffset = 0, segment;\n\tvar radius = innerRadius;\n\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\tvar vertex = new THREE.Vector3();\n\tvar uv = new THREE.Vector2();\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\t// values are generate from the inside of the ring to the outside\n\n\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t// vertex\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\n\t\t\t// uv\n\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex++;\n\n\t\t}\n\n\t\t// increase the radius for next row of vertices\n\t\tradius += radiusStep;\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t// indices\n\t\t\tvar a = segment;\n\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\tvar d = segment + 1;\n\n\t\t\t// face one\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\n\t\t\t// face two\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n};\n\nTHREE.RingBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.RingBufferGeometry.prototype.constructor = THREE.RingBufferGeometry;\n\n// File:src/extras/geometries/RingGeometry.js\n\n/**\n * @author Kaleb Murphy\n */\n\nTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'RingGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\n};\n\nTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.RingGeometry.prototype.constructor = THREE.RingGeometry;\n\n// File:src/extras/geometries/SphereGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'SphereGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\n};\n\nTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;\n\n// File:src/extras/geometries/SphereBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n * based on THREE.SphereGeometry\n */\n\nTHREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'SphereBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 50;\n\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\tphiStart = phiStart !== undefined ? phiStart : 0;\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\tvar thetaEnd = thetaStart + thetaLength;\n\n\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\n\tvar positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\tvar index = 0, vertices = [], normal = new THREE.Vector3();\n\n\tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n\t\tvar verticesRow = [];\n\n\t\tvar v = y / heightSegments;\n\n\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\n\t\t\tvar u = x / widthSegments;\n\n\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\tnormal.set( px, py, pz ).normalize();\n\n\t\t\tpositions.setXYZ( index, px, py, pz );\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\t\tuvs.setXY( index, u, 1 - v );\n\n\t\t\tverticesRow.push( index );\n\n\t\t\tindex ++;\n\n\t\t}\n\n\t\tvertices.push( verticesRow );\n\n\t}\n\n\tvar indices = [];\n\n\tfor ( var y = 0; y < heightSegments; y ++ ) {\n\n\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t\t\tvar v2 = vertices[ y ][ x ];\n\t\t\tvar v3 = vertices[ y + 1 ][ x ];\n\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\n\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\n\t\t}\n\n\t}\n\n\tthis.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );\n\tthis.addAttribute( 'position', positions );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;\n\n// File:src/extras/geometries/TextGeometry.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float> // how far from text outline is bevel\n * }\n */\n\nTHREE.TextGeometry = function ( text, parameters ) {\n\n\tparameters = parameters || {};\n\n\tvar font = parameters.font;\n\n\tif ( font instanceof THREE.Font === false ) {\n\n\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\treturn new THREE.Geometry();\n\n\t}\n\n\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n\t// translate parameters to ExtrudeGeometry API\n\n\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n\t// defaults\n\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\tTHREE.ExtrudeGeometry.call( this, shapes, parameters );\n\n\tthis.type = 'TextGeometry';\n\n};\n\nTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\nTHREE.TextGeometry.prototype.constructor = THREE.TextGeometry;\n\n// File:src/extras/geometries/TorusBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.TorusBufferGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'TorusBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tradius = radius || 100;\n\ttube = tube || 40;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\tarc = arc || Math.PI * 2;\n\n\t// used to calculate buffer length\n\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n\t// buffers\n\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\tvar vertices = new Float32Array( vertexCount * 3 );\n\tvar normals = new Float32Array( vertexCount * 3 );\n\tvar uvs = new Float32Array( vertexCount * 2 );\n\n\t// offset variables\n\tvar vertexBufferOffset = 0;\n\tvar uvBufferOffset = 0;\n\tvar indexBufferOffset = 0;\n\n\t// helper variables\n\tvar center = new THREE.Vector3();\n\tvar vertex = new THREE.Vector3();\n\tvar normal = new THREE.Vector3();\n\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tvar u = i / tubularSegments * arc;\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t// vertex\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n\t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n\t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\n\t\t\t// this vector is used to calculate the normal\n\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\tcenter.y = radius * Math.sin( u );\n\n\t\t\t// normal\n\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\tnormals[ vertexBufferOffset ] = normal.x;\n\t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n\t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\n\t\t\t// uv\n\t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n\t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\n\t\t\t// update offsets\n\t\t\tvertexBufferOffset += 3;\n\t\t\tuvBufferOffset += 2;\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t// indices\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t// face one\n\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n\t\t\t// face two\n\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n\t\t\t// update offset\n\t\t\tindexBufferOffset += 6;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n};\n\nTHREE.TorusBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.TorusBufferGeometry.prototype.constructor = THREE.TorusBufferGeometry;\n\n// File:src/extras/geometries/TorusGeometry.js\n\n/**\n * @author oosmoxiecode\n * @author mrdoob / http://mrdoob.com/\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n */\n\nTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TorusGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tthis.fromBufferGeometry( new THREE.TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\n};\n\nTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;\n\n// File:src/extras/geometries/TorusKnotBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * see: http://www.blackpawn.com/texts/pqtorus/\n */\nTHREE.TorusKnotBufferGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'TorusKnotBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tradius = radius || 100;\n\ttube = tube || 40;\n\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\tp = p || 2;\n\tq = q || 3;\n\n\t// used to calculate buffer length\n\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n\t// buffers\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// helper variables\n\tvar i, j, index = 0, indexOffset = 0;\n\n\tvar vertex = new THREE.Vector3();\n\tvar normal = new THREE.Vector3();\n\tvar uv = new THREE.Vector2();\n\n\tvar P1 = new THREE.Vector3();\n\tvar P2 = new THREE.Vector3();\n\n\tvar B = new THREE.Vector3();\n\tvar T = new THREE.Vector3();\n\tvar N = new THREE.Vector3();\n\n\t// generate vertices, normals and uvs\n\n\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t// calculate orthonormal basis\n\n\t\tT.subVectors( P2, P1 );\n\t\tN.addVectors( P2, P1 );\n\t\tB.crossVectors( T, N );\n\t\tN.crossVectors( B, T );\n\n\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\tB.normalize();\n\t\tN.normalize();\n\n\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t// now calculate the final vertex position.\n\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t// vertex\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\t\t\tuv.x = i / tubularSegments;\n\t\t\tuv.y = j / radialSegments;\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t// indices\n\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t// face one\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t// face two\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n\t// this function calculates the current position on the torus curve\n\n\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\tvar cu = Math.cos( u );\n\t\tvar su = Math.sin( u );\n\t\tvar quOverP = q / p * u;\n\t\tvar cs = Math.cos( quOverP );\n\n\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t}\n\n};\n\nTHREE.TorusKnotBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.TorusKnotBufferGeometry.prototype.constructor = THREE.TorusKnotBufferGeometry;\n\n// File:src/extras/geometries/TorusKnotGeometry.js\n\n/**\n * @author oosmoxiecode\n */\n\nTHREE.TorusKnotGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TorusKnotGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\tthis.fromBufferGeometry( new THREE.TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;\n\n// File:src/extras/geometries/TubeGeometry.js\n\n/**\n * @author WestLangley / https://github.com/WestLangley\n * @author zz85 / https://github.com/zz85\n * @author miningold / https://github.com/miningold\n * @author jonobr1 / https://github.com/jonobr1\n *\n * Modified from the TorusKnotGeometry by @oosmoxiecode\n *\n * Creates a tube which extrudes along a 3d spline\n *\n * Uses parallel transport frames as described in\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n */\n\nTHREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TubeGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\tsegments: segments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed,\n\t\ttaper: taper\n\t};\n\n\tsegments = segments || 64;\n\tradius = radius || 1;\n\tradialSegments = radialSegments || 8;\n\tclosed = closed || false;\n\ttaper = taper || THREE.TubeGeometry.NoTaper;\n\n\tvar grid = [];\n\n\tvar scope = this,\n\n\t\ttangent,\n\t\tnormal,\n\t\tbinormal,\n\n\t\tnumpoints = segments + 1,\n\n\t\tu, v, r,\n\n\t\tcx, cy,\n\t\tpos, pos2 = new THREE.Vector3(),\n\t\ti, j,\n\t\tip, jp,\n\t\ta, b, c, d,\n\t\tuva, uvb, uvc, uvd;\n\n\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\n\t\ttangents = frames.tangents,\n\t\tnormals = frames.normals,\n\t\tbinormals = frames.binormals;\n\n\t// proxy internals\n\tthis.tangents = tangents;\n\tthis.normals = normals;\n\tthis.binormals = binormals;\n\n\tfunction vert( x, y, z ) {\n\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\n\n\t}\n\n\t// construct the grid\n\n\tfor ( i = 0; i < numpoints; i ++ ) {\n\n\t\tgrid[ i ] = [];\n\n\t\tu = i / ( numpoints - 1 );\n\n\t\tpos = path.getPointAt( u );\n\n\t\ttangent = tangents[ i ];\n\t\tnormal = normals[ i ];\n\t\tbinormal = binormals[ i ];\n\n\t\tr = radius * taper( u );\n\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n\t\t\tv = j / radialSegments * 2 * Math.PI;\n\n\t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\t\tcy = r * Math.sin( v );\n\n\t\t\tpos2.copy( pos );\n\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\n\t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\n\t\t}\n\n\t}\n\n\n\t// construct the mesh\n\n\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n\t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n\t\t\tjp = ( j + 1 ) % radialSegments;\n\n\t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n\t\t\tb = grid[ ip ][ j ];\n\t\t\tc = grid[ ip ][ jp ];\n\t\t\td = grid[ i ][ jp ];\n\n\t\t\tuva = new THREE.Vector2( i / segments, j / radialSegments );\n\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );\n\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n\t\t\tuvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );\n\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t}\n\n\t}\n\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n};\n\nTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\n\nTHREE.TubeGeometry.NoTaper = function ( u ) {\n\n\treturn 1;\n\n};\n\nTHREE.TubeGeometry.SinusoidalTaper = function ( u ) {\n\n\treturn Math.sin( Math.PI * u );\n\n};\n\n// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\nTHREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\n\tvar\tnormal = new THREE.Vector3(),\n\n\t\ttangents = [],\n\t\tnormals = [],\n\t\tbinormals = [],\n\n\t\tvec = new THREE.Vector3(),\n\t\tmat = new THREE.Matrix4(),\n\n\t\tnumpoints = segments + 1,\n\t\ttheta,\n\t\tsmallest,\n\n\t\ttx, ty, tz,\n\t\ti, u;\n\n\n\t// expose internals\n\tthis.tangents = tangents;\n\tthis.normals = normals;\n\tthis.binormals = binormals;\n\n\t// compute the tangent vectors for each segment on the path\n\n\tfor ( i = 0; i < numpoints; i ++ ) {\n\n\t\tu = i / ( numpoints - 1 );\n\n\t\ttangents[ i ] = path.getTangentAt( u );\n\t\ttangents[ i ].normalize();\n\n\t}\n\n\tinitialNormal3();\n\n\t/*\n\tfunction initialNormal1(lastBinormal) {\n\t\t// fixed start binormal. Has dangers of 0 vectors\n\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t}\n\n\tfunction initialNormal2() {\n\n\t\t// This uses the Frenet-Serret formula for deriving binormal\n\t\tvar t2 = path.getTangentAt( epsilon );\n\n\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\n\t}\n\t*/\n\n\tfunction initialNormal3() {\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the smallest tangent xyz component\n\n\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\tsmallest = Number.MAX_VALUE;\n\t\ttx = Math.abs( tangents[ 0 ].x );\n\t\tty = Math.abs( tangents[ 0 ].y );\n\t\ttz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= smallest ) {\n\n\t\t\tsmallest = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= smallest ) {\n\n\t\t\tsmallest = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= smallest ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\t}\n\n\n\t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\n\tfor ( i = 1; i < numpoints; i ++ ) {\n\n\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\tvec.normalize();\n\n\t\t\ttheta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t}\n\n\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t}\n\n\n\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\tif ( closed ) {\n\n\t\ttheta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n\t\ttheta /= ( numpoints - 1 );\n\n\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\n\t\t\ttheta = - theta;\n\n\t\t}\n\n\t\tfor ( i = 1; i < numpoints; i ++ ) {\n\n\t\t\t// twist a little...\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/extras/geometries/PolyhedronGeometry.js\n\n/**\n * @author clockworkgeek / https://github.com/clockworkgeek\n * @author timothypratley / https://github.com/timothypratley\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'PolyhedronGeometry';\n\n\tthis.parameters = {\n\t\tvertices: vertices,\n\t\tindices: indices,\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tradius = radius || 1;\n\tdetail = detail || 0;\n\n\tvar that = this;\n\n\tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\n\t\tprepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\n\t}\n\n\tvar p = this.vertices;\n\n\tvar faces = [];\n\n\tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\n\t\tvar v1 = p[ indices[ i ] ];\n\t\tvar v2 = p[ indices[ i + 1 ] ];\n\t\tvar v3 = p[ indices[ i + 2 ] ];\n\n\t\tfaces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\n\t}\n\n\tvar centroid = new THREE.Vector3();\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tsubdivide( faces[ i ], detail );\n\n\t}\n\n\n\t// Handle case when face straddles the seam\n\n\tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\n\t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\tvar x0 = uvs[ 0 ].x;\n\t\tvar x1 = uvs[ 1 ].x;\n\t\tvar x2 = uvs[ 2 ].x;\n\n\t\tvar max = Math.max( x0, x1, x2 );\n\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n\t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n\t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\n\t\t}\n\n\t}\n\n\n\t// Apply radius\n\n\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\tthis.vertices[ i ].multiplyScalar( radius );\n\n\t}\n\n\n\t// Merge vertices\n\n\tthis.mergeVertices();\n\n\tthis.computeFaceNormals();\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n\n\t// Project vector onto sphere's surface\n\n\tfunction prepare( vector ) {\n\n\t\tvar vertex = vector.normalize().clone();\n\t\tvertex.index = that.vertices.push( vertex ) - 1;\n\n\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n\t\tvar v = inclination( vector ) / Math.PI + 0.5;\n\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\n\n\t\treturn vertex;\n\n\t}\n\n\n\t// Approximate a curved face with recursively sub-divided triangles.\n\n\tfunction make( v1, v2, v3 ) {\n\n\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t\tthat.faces.push( face );\n\n\t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\n\t\tvar azi = azimuth( centroid );\n\n\t\tthat.faceVertexUvs[ 0 ].push( [\n\t\t\tcorrectUV( v1.uv, v1, azi ),\n\t\t\tcorrectUV( v2.uv, v2, azi ),\n\t\t\tcorrectUV( v3.uv, v3, azi )\n\t\t] );\n\n\t}\n\n\n\t// Analytically subdivide a face to the required detail level.\n\n\tfunction subdivide( face, detail ) {\n\n\t\tvar cols = Math.pow( 2, detail );\n\t\tvar a = prepare( that.vertices[ face.a ] );\n\t\tvar b = prepare( that.vertices[ face.b ] );\n\t\tvar c = prepare( that.vertices[ face.c ] );\n\t\tvar v = [];\n\n\t\t// Construct all of the vertices for this subdivision.\n\n\t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\n\t\t\tv[ i ] = [];\n\n\t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n\t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n\t\t\tvar rows = cols - i;\n\n\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\n\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Construct all of the faces.\n\n\t\tfor ( var i = 0; i < cols ; i ++ ) {\n\n\t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\tmake(\n\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k ],\n\t\t\t\t\t\tv[ i ][ k ]\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmake(\n\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k ]\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\tfunction azimuth( vector ) {\n\n\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t}\n\n\n\t// Angle above the XZ plane.\n\n\tfunction inclination( vector ) {\n\n\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t}\n\n\n\t// Texture fixing helper. Spheres have some odd behaviours.\n\n\tfunction correctUV( uv, vector, azimuth ) {\n\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n\t\treturn uv.clone();\n\n\t}\n\n\n};\n\nTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;\n\n// File:src/extras/geometries/DodecahedronGeometry.js\n\n/**\n * @author Abe Pazos / https://hamoid.com\n */\n\nTHREE.DodecahedronGeometry = function ( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar r = 1 / t;\n\n\tvar vertices = [\n\n\t\t// (±1, ±1, ±1)\n\t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t\t- 1,  1, - 1,    - 1,  1,  1,\n\t\t 1, - 1, - 1,     1, - 1,  1,\n\t\t 1,  1, - 1,     1,  1,  1,\n\n\t\t// (0, ±1/φ, ±φ)\n\t\t 0, - r, - t,     0, - r,  t,\n\t\t 0,  r, - t,     0,  r,  t,\n\n\t\t// (±1/φ, ±φ, 0)\n\t\t- r, - t,  0,    - r,  t,  0,\n\t\t r, - t,  0,     r,  t,  0,\n\n\t\t// (±φ, 0, ±1/φ)\n\t\t- t,  0, - r,     t,  0, - r,\n\t\t- t,  0,  r,     t,  0,  r\n\t];\n\n\tvar indices = [\n\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'DodecahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;\n\n// File:src/extras/geometries/IcosahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.IcosahedronGeometry = function ( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\tvar vertices = [\n\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t];\n\n\tvar indices = [\n\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'IcosahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;\n\n// File:src/extras/geometries/OctahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.OctahedronGeometry = function ( radius, detail ) {\n\n\tvar vertices = [\n\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t];\n\n\tvar indices = [\n\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'OctahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;\n\n// File:src/extras/geometries/TetrahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.TetrahedronGeometry = function ( radius, detail ) {\n\n\tvar vertices = [\n\t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t];\n\n\tvar indices = [\n\t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'TetrahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;\n\n// File:src/extras/geometries/ParametricGeometry.js\n\n/**\n * @author zz85 / https://github.com/zz85\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n *\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n *\n */\n\nTHREE.ParametricGeometry = function ( func, slices, stacks ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ParametricGeometry';\n\n\tthis.parameters = {\n\t\tfunc: func,\n\t\tslices: slices,\n\t\tstacks: stacks\n\t};\n\n\tvar verts = this.vertices;\n\tvar faces = this.faces;\n\tvar uvs = this.faceVertexUvs[ 0 ];\n\n\tvar i, j, p;\n\tvar u, v;\n\n\tvar sliceCount = slices + 1;\n\n\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\tv = i / stacks;\n\n\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\tu = j / slices;\n\n\t\t\tp = func( u, v );\n\t\t\tverts.push( p );\n\n\t\t}\n\n\t}\n\n\tvar a, b, c, d;\n\tvar uva, uvb, uvc, uvd;\n\n\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\ta = i * sliceCount + j;\n\t\t\tb = i * sliceCount + j + 1;\n\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n\t\t\td = ( i + 1 ) * sliceCount + j;\n\n\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\n\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\n\t\t\tuvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n\t\t\tuvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\n\n\t\t\tfaces.push( new THREE.Face3( a, b, d ) );\n\t\t\tuvs.push( [ uva, uvb, uvd ] );\n\n\t\t\tfaces.push( new THREE.Face3( b, c, d ) );\n\t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t}\n\n\t}\n\n\t// console.log(this);\n\n\t// magic bullet\n\t// var diff = this.mergeVertices();\n\t// console.log('removed ', diff, ' vertices by merging');\n\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n};\n\nTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;\n\n// File:src/extras/geometries/WireframeGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WireframeGeometry = function ( geometry ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tvar edge = [ 0, 0 ], hash = {};\n\n\tfunction sortFunction( a, b ) {\n\n\t\treturn a - b;\n\n\t}\n\n\tvar keys = [ 'a', 'b', 'c' ];\n\n\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\tvar vertices = geometry.vertices;\n\t\tvar faces = geometry.faces;\n\t\tvar numEdges = 0;\n\n\t\t// allocate maximal size\n\t\tvar edges = new Uint32Array( 6 * faces.length );\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\tvar key = edge.toString();\n\n\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\n\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\tcoords[ index + 0 ] = vertex.x;\n\t\t\t\tcoords[ index + 1 ] = vertex.y;\n\t\t\t\tcoords[ index + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\t// Indexed BufferGeometry\n\n\t\t\tvar indices = geometry.index.array;\n\t\t\tvar vertices = geometry.attributes.position;\n\t\t\tvar groups = geometry.groups;\n\t\t\tvar numEdges = 0;\n\n\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\tgeometry.addGroup( 0, indices.length );\n\n\t\t\t}\n\n\t\t\t// allocate maximal size\n\t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\n\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\tvar start = group.start;\n\t\t\t\tvar count = group.count;\n\n\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n\t\t\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\t\t\tvar key = edge.toString();\n\n\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\n\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t} else {\n\n\t\t\t// non-indexed BufferGeometry\n\n\t\t\tvar vertices = geometry.attributes.position.array;\n\t\t\tvar numEdges = vertices.length / 3;\n\t\t\tvar numTris = numEdges / 3;\n\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tvar index = 18 * i + 6 * j;\n\n\t\t\t\t\tvar index1 = 9 * i + 3 * j;\n\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\n\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;\n\n// File:src/extras/helpers/AxisHelper.js\n\n/**\n * @author sroucheray / http://sroucheray.org/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AxisHelper = function ( size ) {\n\n\tsize = size || 1;\n\n\tvar vertices = new Float32Array( [\n\t\t0, 0, 0,  size, 0, 0,\n\t\t0, 0, 0,  0, size, 0,\n\t\t0, 0, 0,  0, 0, size\n\t] );\n\n\tvar colors = new Float32Array( [\n\t\t1, 0, 0,  1, 0.6, 0,\n\t\t0, 1, 0,  0.6, 1, 0,\n\t\t0, 0, 1,  0, 0.6, 1\n\t] );\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n};\n\nTHREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.AxisHelper.prototype.constructor = THREE.AxisHelper;\n\n// File:src/extras/helpers/ArrowHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author zz85 / http://github.com/zz85\n * @author bhouston / http://clara.io\n *\n * Creates an arrow for visualizing directions\n *\n * Parameters:\n *  dir - Vector3\n *  origin - Vector3\n *  length - Number\n *  color - color in hex value\n *  headLength - Number\n *  headWidth - Number\n */\n\nTHREE.ArrowHelper = ( function () {\n\n\tvar lineGeometry = new THREE.BufferGeometry();\n\tlineGeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\tvar coneGeometry = new THREE.CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\treturn function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\t\tif ( length === undefined ) length = 1;\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t};\n\n}() );\n\nTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\n\nTHREE.ArrowHelper.prototype.setDirection = ( function () {\n\n\tvar axis = new THREE.Vector3();\n\tvar radians;\n\n\treturn function setDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tradians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t}\n\n\t};\n\n}() );\n\nTHREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\tthis.line.updateMatrix();\n\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\tthis.cone.position.y = length;\n\tthis.cone.updateMatrix();\n\n};\n\nTHREE.ArrowHelper.prototype.setColor = function ( color ) {\n\n\tthis.line.material.color.copy( color );\n\tthis.cone.material.color.copy( color );\n\n};\n\n// File:src/extras/helpers/BoxHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BoxHelper = function ( object, color ) {\n\n\tif ( color === undefined ) color = 0xffff00;\n\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\tvar positions = new Float32Array( 8 * 3 );\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ) );\n\n\tif ( object !== undefined ) {\n\n\t\tthis.update( object );\n\n\t}\n\n};\n\nTHREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\n\nTHREE.BoxHelper.prototype.update = ( function () {\n\n\tvar box = new THREE.Box3();\n\n\treturn function update( object ) {\n\n\t\tif ( object instanceof THREE.Box3 ) {\n\n\t\t\tbox.copy( object );\n\n\t\t} else {\n\n\t\t\tbox.setFromObject( object );\n\n\t\t}\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tvar min = box.min;\n\t\tvar max = box.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t};\n\n} )();\n\n// File:src/extras/helpers/BoundingBoxHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\n// a helper to show the world-axis-aligned bounding box for an object\n\nTHREE.BoundingBoxHelper = function ( object, hex ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\n\tthis.object = object;\n\n\tthis.box = new THREE.Box3();\n\n\tTHREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\n\n};\n\nTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\n\nTHREE.BoundingBoxHelper.prototype.update = function () {\n\n\tthis.box.setFromObject( this.object );\n\n\tthis.box.size( this.scale );\n\n\tthis.box.center( this.position );\n\n};\n\n// File:src/extras/helpers/CameraHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n */\n\nTHREE.CameraHelper = function ( camera ) {\n\n\tvar geometry = new THREE.Geometry();\n\tvar material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\n\n\tvar pointMap = {};\n\n\t// colors\n\n\tvar hexFrustum = 0xffaa00;\n\tvar hexCone = 0xff0000;\n\tvar hexUp = 0x00aaff;\n\tvar hexTarget = 0xffffff;\n\tvar hexCross = 0x333333;\n\n\t// near\n\n\taddLine( \"n1\", \"n2\", hexFrustum );\n\taddLine( \"n2\", \"n4\", hexFrustum );\n\taddLine( \"n4\", \"n3\", hexFrustum );\n\taddLine( \"n3\", \"n1\", hexFrustum );\n\n\t// far\n\n\taddLine( \"f1\", \"f2\", hexFrustum );\n\taddLine( \"f2\", \"f4\", hexFrustum );\n\taddLine( \"f4\", \"f3\", hexFrustum );\n\taddLine( \"f3\", \"f1\", hexFrustum );\n\n\t// sides\n\n\taddLine( \"n1\", \"f1\", hexFrustum );\n\taddLine( \"n2\", \"f2\", hexFrustum );\n\taddLine( \"n3\", \"f3\", hexFrustum );\n\taddLine( \"n4\", \"f4\", hexFrustum );\n\n\t// cone\n\n\taddLine( \"p\", \"n1\", hexCone );\n\taddLine( \"p\", \"n2\", hexCone );\n\taddLine( \"p\", \"n3\", hexCone );\n\taddLine( \"p\", \"n4\", hexCone );\n\n\t// up\n\n\taddLine( \"u1\", \"u2\", hexUp );\n\taddLine( \"u2\", \"u3\", hexUp );\n\taddLine( \"u3\", \"u1\", hexUp );\n\n\t// target\n\n\taddLine( \"c\", \"t\", hexTarget );\n\taddLine( \"p\", \"c\", hexCross );\n\n\t// cross\n\n\taddLine( \"cn1\", \"cn2\", hexCross );\n\taddLine( \"cn3\", \"cn4\", hexCross );\n\n\taddLine( \"cf1\", \"cf2\", hexCross );\n\taddLine( \"cf3\", \"cf4\", hexCross );\n\n\tfunction addLine( a, b, hex ) {\n\n\t\taddPoint( a, hex );\n\t\taddPoint( b, hex );\n\n\t}\n\n\tfunction addPoint( id, hex ) {\n\n\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\tgeometry.colors.push( new THREE.Color( hex ) );\n\n\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\tpointMap[ id ] = [];\n\n\t\t}\n\n\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\n\t}\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n\tthis.camera = camera;\n\tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\tthis.matrix = camera.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.pointMap = pointMap;\n\n\tthis.update();\n\n};\n\nTHREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\n\nTHREE.CameraHelper.prototype.update = function () {\n\n\tvar geometry, pointMap;\n\n\tvar vector = new THREE.Vector3();\n\tvar camera = new THREE.Camera();\n\n\tfunction setPoint( point, x, y, z ) {\n\n\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn function update() {\n\n\t\tgeometry = this.geometry;\n\t\tpointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix\n\t\t// world matrix must be identity\n\n\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t// center / target\n\n\t\tsetPoint( \"c\", 0, 0, - 1 );\n\t\tsetPoint( \"t\", 0, 0,  1 );\n\n\t\t// near\n\n\t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( \"f1\", - w, - h, 1 );\n\t\tsetPoint( \"f2\",   w, - h, 1 );\n\t\tsetPoint( \"f3\", - w,   h, 1 );\n\t\tsetPoint( \"f4\",   w,   h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n\t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t};\n\n}();\n\n// File:src/extras/helpers/DirectionalLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.DirectionalLightHelper = function ( light, size ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tif ( size === undefined ) size = 1;\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [\n\t\t- size,   size, 0,\n\t\t  size,   size, 0,\n\t\t  size, - size, 0,\n\t\t- size, - size, 0,\n\t\t- size,   size, 0\n\t], 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\n\n\tthis.add( new THREE.Line( geometry, material ) );\n\n\tgeometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\tthis.add( new THREE.Line( geometry, material ));\n\n\tthis.update();\n\n};\n\nTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\n\nTHREE.DirectionalLightHelper.prototype.dispose = function () {\n\n\tvar lightPlane = this.children[ 0 ];\n\tvar targetLine = this.children[ 1 ];\n\n\tlightPlane.geometry.dispose();\n\tlightPlane.material.dispose();\n\ttargetLine.geometry.dispose();\n\ttargetLine.material.dispose();\n\n};\n\nTHREE.DirectionalLightHelper.prototype.update = function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar v3 = new THREE.Vector3();\n\n\treturn function update() {\n\n\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\tv3.subVectors( v2, v1 );\n\n\t\tvar lightPlane = this.children[ 0 ];\n\t\tvar targetLine = this.children[ 1 ];\n\n\t\tlightPlane.lookAt( v3 );\n\t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\ttargetLine.lookAt( v3 );\n\t\ttargetLine.scale.z = v3.length();\n\n\t};\n\n}();\n\n// File:src/extras/helpers/EdgesHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @param object THREE.Mesh whose geometry will be used\n * @param hex line color\n * @param thresholdAngle the minimum angle (in degrees),\n * between the face normals of adjacent faces,\n * that is required to render an edge. A value of 10 means\n * an edge is only rendered if the angle is at least 10 degrees.\n */\n\nTHREE.EdgesHelper = function ( object, hex, thresholdAngle ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\n\tTHREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n};\n\nTHREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;\n\n// File:src/extras/helpers/FaceNormalsHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\n\n\t// FaceNormalsHelper only supports THREE.Geometry\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\tnNormals = objGeometry.faces.length;\n\n\t} else {\n\n\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t}\n\n\t//\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\tthis.update();\n\n};\n\nTHREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\n\nTHREE.FaceNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar normalMatrix = new THREE.Matrix3();\n\n\treturn function update() {\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tvar vertices = objGeometry.vertices;\n\n\t\tvar faces = objGeometry.faces;\n\n\t\tvar idx = 0;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar normal = face.normal;\n\n\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t.divideScalar( 3 )\n\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t\treturn this;\n\n\t};\n\n}() );\n\n// File:src/extras/helpers/GridHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.GridHelper = function ( size, divisions, color1, color2 ) {\n\n\tdivisions = divisions || 1;\n\tcolor1 = new THREE.Color( color1 !== undefined ? color1 : 0x444444 );\n\tcolor2 = new THREE.Color( color2 !== undefined ? color2 : 0x888888 );\n\n\tvar center = divisions / 2;\n\tvar step = ( size * 2 ) / divisions;\n\tvar vertices = [], colors = [];\n\n\tfor ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {\n\n\t\tvertices.push( - size, 0, k, size, 0, k );\n\t\tvertices.push( k, 0, - size, k, 0, size );\n\n\t\tvar color = i === center ? color1 : color2;\n\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\n\t}\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new THREE.Float32Attribute( colors, 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n};\n\nTHREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.GridHelper.prototype.constructor = THREE.GridHelper;\n\nTHREE.GridHelper.prototype.setColors = function () {\n\n\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n};\n\n// File:src/extras/helpers/HemisphereLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.HemisphereLightHelper = function ( light, sphereSize ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.colors = [ new THREE.Color(), new THREE.Color() ];\n\n\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\n\tgeometry.rotateX( - Math.PI / 2 );\n\n\tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\n\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\n\t}\n\n\tvar material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\n\n\tthis.lightSphere = new THREE.Mesh( geometry, material );\n\tthis.add( this.lightSphere );\n\n\tthis.update();\n\n};\n\nTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\n\nTHREE.HemisphereLightHelper.prototype.dispose = function () {\n\n\tthis.lightSphere.geometry.dispose();\n\tthis.lightSphere.material.dispose();\n\n};\n\nTHREE.HemisphereLightHelper.prototype.update = function () {\n\n\tvar vector = new THREE.Vector3();\n\n\treturn function update() {\n\n\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\n\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\n\t};\n\n}();\n\n// File:src/extras/helpers/PointLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.PointLightHelper = function ( light, sphereSize ) {\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tvar geometry = new THREE.SphereBufferGeometry( sphereSize, 4, 2 );\n\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.matrix = this.light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\t/*\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tvar d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n};\n\nTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\n\nTHREE.PointLightHelper.prototype.dispose = function () {\n\n\tthis.geometry.dispose();\n\tthis.material.dispose();\n\n};\n\nTHREE.PointLightHelper.prototype.update = function () {\n\n\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t/*\n\tvar d = this.light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.visible = true;\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\t*/\n\n};\n\n// File:src/extras/helpers/SkeletonHelper.js\n\n/**\n * @author Sean Griffin / http://twitter.com/sgrif\n * @author Michael Guerrero / http://realitymeltdown.com\n * @author mrdoob / http://mrdoob.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.SkeletonHelper = function ( object ) {\n\n\tthis.bones = this.getBoneList( object );\n\n\tvar geometry = new THREE.Geometry();\n\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\tvar bone = this.bones[ i ];\n\n\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 0, 1 ) );\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 1, 0 ) );\n\n\t\t}\n\n\t}\n\n\tgeometry.dynamic = true;\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n\tthis.root = object;\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n};\n\n\nTHREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\n\nTHREE.SkeletonHelper.prototype.getBoneList = function( object ) {\n\n\tvar boneList = [];\n\n\tif ( object instanceof THREE.Bone ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n};\n\nTHREE.SkeletonHelper.prototype.update = function () {\n\n\tvar geometry = this.geometry;\n\n\tvar matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );\n\n\tvar boneMatrix = new THREE.Matrix4();\n\n\tvar j = 0;\n\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\tvar bone = this.bones[ i ];\n\n\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\n\t\t\tj += 2;\n\n\t\t}\n\n\t}\n\n\tgeometry.verticesNeedUpdate = true;\n\n\tgeometry.computeBoundingSphere();\n\n};\n\n// File:src/extras/helpers/SpotLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.SpotLightHelper = function ( light ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar positions = [\n\t\t0, 0, 0,   0,   0,   1,\n\t\t0, 0, 0,   1,   0,   1,\n\t\t0, 0, 0, - 1,   0,   1,\n\t\t0, 0, 0,   0,   1,   1,\n\t\t0, 0, 0,   0, - 1,   1\n\t];\n\n\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\tpositions.push(\n\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t);\n\n\t}\n\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( positions, 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\n\n\tthis.cone = new THREE.LineSegments( geometry, material );\n\tthis.add( this.cone );\n\n\tthis.update();\n\n};\n\nTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\n\nTHREE.SpotLightHelper.prototype.dispose = function () {\n\n\tthis.cone.geometry.dispose();\n\tthis.cone.material.dispose();\n\n};\n\nTHREE.SpotLightHelper.prototype.update = function () {\n\n\tvar vector = new THREE.Vector3();\n\tvar vector2 = new THREE.Vector3();\n\n\treturn function update() {\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t};\n\n}();\n\n// File:src/extras/helpers/VertexNormalsHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\tnNormals = objGeometry.faces.length * 3;\n\n\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\n\n\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t}\n\n\t//\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n};\n\nTHREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\n\nTHREE.VertexNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar normalMatrix = new THREE.Matrix3();\n\n\treturn function update() {\n\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\tvar idx = 0;\n\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t\treturn this;\n\n\t};\n\n}() );\n\n// File:src/extras/helpers/WireframeHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WireframeHelper = function ( object, hex ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\n\tTHREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n};\n\nTHREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;\n\n// File:src/extras/objects/ImmediateRenderObject.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.ImmediateRenderObject = function ( material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.material = material;\n\tthis.render = function ( renderCallback ) {};\n\n};\n\nTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;\n\n// File:src/extras/objects/MorphBlendMesh.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.MorphBlendMesh = function( geometry, material ) {\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.animationsMap = {};\n\tthis.animationsList = [];\n\n\t// prepare default animation\n\t// (all frames played together in 1 second)\n\n\tvar numFrames = this.geometry.morphTargets.length;\n\n\tvar name = \"__default\";\n\n\tvar startFrame = 0;\n\tvar endFrame = numFrames - 1;\n\n\tvar fps = numFrames / 1;\n\n\tthis.createAnimation( name, startFrame, endFrame, fps );\n\tthis.setAnimationWeight( name, 1 );\n\n};\n\nTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\n\nTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\n\n\tvar animation = {\n\n\t\tstart: start,\n\t\tend: end,\n\n\t\tlength: end - start + 1,\n\n\t\tfps: fps,\n\t\tduration: ( end - start ) / fps,\n\n\t\tlastFrame: 0,\n\t\tcurrentFrame: 0,\n\n\t\tactive: false,\n\n\t\ttime: 0,\n\t\tdirection: 1,\n\t\tweight: 1,\n\n\t\tdirectionBackwards: false,\n\t\tmirroredLoop: false\n\n\t};\n\n\tthis.animationsMap[ name ] = animation;\n\tthis.animationsList.push( animation );\n\n};\n\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\n\n\tvar pattern = /([a-z]+)_?(\\d+)/i;\n\n\tvar firstAnimation, frameRanges = {};\n\n\tvar geometry = this.geometry;\n\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\n\n\t\tvar morph = geometry.morphTargets[ i ];\n\t\tvar chunks = morph.name.match( pattern );\n\n\t\tif ( chunks && chunks.length > 1 ) {\n\n\t\t\tvar name = chunks[ 1 ];\n\n\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\n\n\t\t\tvar range = frameRanges[ name ];\n\n\t\t\tif ( i < range.start ) range.start = i;\n\t\t\tif ( i > range.end ) range.end = i;\n\n\t\t\tif ( ! firstAnimation ) firstAnimation = name;\n\n\t\t}\n\n\t}\n\n\tfor ( var name in frameRanges ) {\n\n\t\tvar range = frameRanges[ name ];\n\t\tthis.createAnimation( name, range.start, range.end, fps );\n\n\t}\n\n\tthis.firstAnimation = firstAnimation;\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.direction = 1;\n\t\tanimation.directionBackwards = false;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.direction = - 1;\n\t\tanimation.directionBackwards = true;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.fps = fps;\n\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.duration = duration;\n\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.weight = weight;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.time = time;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\n\n\tvar time = 0;\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\ttime = animation.time;\n\n\t}\n\n\treturn time;\n\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\n\n\tvar duration = - 1;\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tduration = animation.duration;\n\n\t}\n\n\treturn duration;\n\n};\n\nTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.time = 0;\n\t\tanimation.active = true;\n\n\t} else {\n\n\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.active = false;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\n\n\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\n\n\t\tvar animation = this.animationsList[ i ];\n\n\t\tif ( ! animation.active ) continue;\n\n\t\tvar frameTime = animation.duration / animation.length;\n\n\t\tanimation.time += animation.direction * delta;\n\n\t\tif ( animation.mirroredLoop ) {\n\n\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\n\n\t\t\t\tanimation.direction *= - 1;\n\n\t\t\t\tif ( animation.time > animation.duration ) {\n\n\t\t\t\t\tanimation.time = animation.duration;\n\t\t\t\t\tanimation.directionBackwards = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( animation.time < 0 ) {\n\n\t\t\t\t\tanimation.time = 0;\n\t\t\t\t\tanimation.directionBackwards = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tanimation.time = animation.time % animation.duration;\n\n\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\n\n\t\t}\n\n\t\tvar keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\n\t\tvar weight = animation.weight;\n\n\t\tif ( keyframe !== animation.currentFrame ) {\n\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\n\n\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\n\n\t\t\tanimation.lastFrame = animation.currentFrame;\n\t\t\tanimation.currentFrame = keyframe;\n\n\t\t}\n\n\t\tvar mix = ( animation.time % frameTime ) / frameTime;\n\n\t\tif ( animation.directionBackwards ) mix = 1 - mix;\n\n\t\tif ( animation.currentFrame !== animation.lastFrame ) {\n\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\n\n\t\t} else {\n\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\n\n\t\t}\n\n\t}\n\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/three/build/three.js\n ** module id = 4\n ** module chunks = 0\n **/","export default class ServiceLocator {\r\n  static provide(name, service) {\r\n    if (!this._services) {\r\n      this._services = new Map();\r\n    }\r\n    this._services.set(name, service);\r\n  }\r\n  static get(name) {\r\n    if (this._services.has(name)) {\r\n      return this._services.get(name);\r\n    }\r\n    else {\r\n      throw new ReferenceError(`Service '${name}' not found.`);\r\n    }\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./core/service-locator.js\n **/","import Game from './../core/game';\r\nimport Mouse from './../core/mouse';\r\nimport Touch from './../core/touch';\r\nimport M3Scene from './m3scene';\r\nimport TWEEN from 'tween.js';\r\nimport ServiceLocator from './../core/service-locator';\r\n\r\nexport default class M3Game extends Game {\r\n  constructor(renderer) {\r\n    super(renderer);\r\n    ServiceLocator.provide('Mouse', new Mouse());\r\n    ServiceLocator.provide('Touch', new Touch());\r\n  }\r\n  start() {\r\n    super.start();\r\n    this.scene = new M3Scene(this);\r\n  }\r\n  _update() {\r\n    super._update();\r\n    TWEEN.update();\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./m3/m3game.js\n **/","import THREE from 'three';\r\nimport Stats from 'stats.js';\r\nimport ServiceLocator from './service-locator';\r\n\r\nexport default class Game {\r\n  constructor(engine, width, height, color = 0x0099ff) {\r\n\r\n    this._engine            = engine;\r\n    this._width             = width;\r\n    this._height            = height;\r\n    this._camera            = new THREE.PerspectiveCamera(75, this._width / this._height, 1, 1000);\r\n    this._camera.position.z = 500;\r\n\r\n    this._stats                           = new Stats();\r\n    this._stats.domElement.style.position = 'absolute';\r\n    this._stats.domElement.style.left     = '0px';\r\n    this._stats.domElement.style.top      = '0px';\r\n\r\n    this._engine.renderer.setClearColor(color);\r\n    this._stats.setMode(0);\r\n\r\n    document.body.appendChild( this._stats.domElement );\r\n\r\n    this._animate();\r\n    ServiceLocator.provide('Game', this);\r\n\r\n  }\r\n  start() {\r\n\r\n  }\r\n  set scene(value) {\r\n    this._scene = value;\r\n  }\r\n  get scene() {\r\n    return this._scene;\r\n  }\r\n  get camera() {\r\n    return this._camera;\r\n  }\r\n  get engine() {\r\n    return this._engine;\r\n  }\r\n  resize(width, height) {\r\n    this._width  = width;\r\n    this._height = height;\r\n    this._camera.aspect = this._width / this._height;\r\n    this._camera.updateProjectionMatrix();\r\n    if (this._scene) {\r\n      this._scene.resize(width, height);\r\n    }\r\n  }\r\n  _animate() {\r\n    this._stats.begin();\r\n    this._update();\r\n    this._stats.end();\r\n    window.requestAnimationFrame(this._animate.bind(this));\r\n  }\r\n  _update() {\r\n    if (this._scene) {\r\n      this._scene.update();\r\n      this._render();\r\n    }\r\n  }\r\n  _render() {\r\n    this._engine.renderer.clear();\r\n    this._engine.renderer.clearDepth();\r\n    this._engine.renderer.render(this._scene, this._camera);\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./core/game.js\n **/","// stats.js - http://github.com/mrdoob/stats.js\nvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\nif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\nStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\nv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/stats.js/build/stats.min.js\n ** module id = 8\n ** module chunks = 0\n **/","import THREE from 'three';\r\nimport MouseEvent from './mouse-event';\r\n\r\nexport default class Mouse extends THREE.EventDispatcher {\r\n  constructor(x, y) {\r\n    super();\r\n    this._position = new THREE.Vector2(x, y);\r\n    window.addEventListener('click'    , this.onClick.bind(this)    , false);\r\n    window.addEventListener('mousedown', this.onMouseDown.bind(this), false);\r\n    window.addEventListener('mousemove', this.onMouseMove.bind(this), false);\r\n    window.addEventListener('mouseup'  , this.onMouseUp.bind(this)  , false);\r\n  }\r\n  update(event) {\r\n    this._position.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n    this._position.y = - (event.clientY / window.innerHeight) * 2 + 1;\r\n  }\r\n  onClick(event) {\r\n    this.update(event);\r\n    this.dispatchEvent({ type: MouseEvent.CLICK });\r\n  }\r\n  onMouseMove(event) {\r\n    this.update(event);\r\n    this.dispatchEvent({ type: MouseEvent.MOVE });\r\n  }\r\n  onMouseDown(event) {\r\n    this.update(event);\r\n    this.dispatchEvent({ type: MouseEvent.DOWN });\r\n  }\r\n  onMouseUp(event) {\r\n    this.update(event);\r\n    this.dispatchEvent({ type: MouseEvent.UP });\r\n  }\r\n  get x() {\r\n    return this._position.x;\r\n  }\r\n  get y() {\r\n    return this._position.y;\r\n  }\r\n  get position() {\r\n    return this._position;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./core/mouse.js\n **/","let MouseEvent = {\r\n  DOWN:  'core.MouseEvent.DOWN',\r\n  UP:    'core.MouseEvent.UP',\r\n  CLICK: 'core.MouseEvent.CLICK',\r\n  MOVE:  'core.MouseEvent.MOVE'\r\n};\r\nexport default MouseEvent;\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./core/mouse-event.js\n **/","import THREE from 'three';\r\nimport TouchEvent from './touch-event';\r\n\r\nexport default class Touch extends THREE.EventDispatcher {\r\n  constructor(x, y) {\r\n    super();\r\n    this._position = new THREE.Vector2(x, y);\r\n    window.addEventListener('touchstart',  this.onStart.bind(this),  false);\r\n    window.addEventListener('touchend',    this.onEnd.bind(this),    false);\r\n    window.addEventListener('touchmove',   this.onMove.bind(this),   false);\r\n    window.addEventListener('touchcancel', this.onCancel.bind(this), false);\r\n  }\r\n  update(event) {\r\n    if (event.targetTouches.length > 0) {\r\n      let touchEvent = event.targetTouches.item(0);\r\n      this._position.x = (touchEvent.clientX / window.innerWidth) * 2 - 1;\r\n      this._position.y = - (touchEvent.clientY / window.innerHeight) * 2 + 1;\r\n      console.debug('Touch', this._position);\r\n    }\r\n  }\r\n  onStart(event) {\r\n    this.update(event);\r\n    this.dispatchEvent({ type: TouchEvent.START });\r\n  }\r\n  onEnd(event) {\r\n    this.update(event);\r\n    this.dispatchEvent({ type: TouchEvent.END });\r\n  }\r\n  onMove(event) {\r\n    this.update(event);\r\n    this.dispatchEvent({ type: TouchEvent.MOVE });\r\n  }\r\n  onCancel(event) {\r\n    this.update(event);\r\n    this.dispatchEvent({ type: TouchEvent.CANCEL });\r\n  }\r\n  get x() {\r\n    return this._position.x;\r\n  }\r\n  get y() {\r\n    return this._position.y;\r\n  }\r\n  get position() {\r\n    return this._position;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./core/touch.js\n **/","let TouchEvent = {\r\n  CANCEL: 'core.TouchEvent.CANCEL',\r\n  END:    'core.TouchEvent.END',\r\n  MOVE:   'core.TouchEvent.MOVE',\r\n  START:  'core.TouchEvent.START'\r\n};\r\nexport default TouchEvent;\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./core/touch-event.js\n **/","import Scene from './../core/scene';\r\nimport Model from './../core/mvc/model';\r\nimport GridModel from './models/grid-model';\r\nimport TileModel from './models/tile-model';\r\nimport CellModel from './models/cell-model';\r\nimport TileView from './views/tile-view';\r\nimport GridView from './views/grid-view';\r\nimport GridController from './controllers/grid-controller';\r\nimport ServiceLocator from './../core/service-locator';\r\n\r\nexport default class M3Scene extends Scene {\r\n  constructor(game) {\r\n    super(game);\r\n    this.setupModels();\r\n  }\r\n  setupModels() {\r\n    let gridModel = new GridModel(10, 6, 1);\r\n    let gridView = new GridView(gridModel);\r\n    let gridController = new GridController(gridModel, gridView);\r\n    gridModel.randomize();\r\n    TileView\r\n      .loadTextures()\r\n      .then(((textures) => {\r\n        TileView.createMaterials(textures);\r\n        gridView.createTileViews();\r\n        this._game._engine.resize();\r\n      }).bind(this));\r\n    this.add(gridView);\r\n    document.addEventListener('keydown', (event) => {\r\n      console.log(gridModel.toString());\r\n    });\r\n  }\r\n  update() {\r\n    super.update();\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./m3/m3scene.js\n **/","import THREE from 'three';\r\n\r\nexport default class Scene extends THREE.Scene {\r\n  constructor(game) {\r\n    super();\r\n    this._game = game;\r\n  }\r\n  resize(width = this._game.renderer.domElement.width, height = this._game.renderer.domElement.height) {\r\n    for (let child of this.children) {\r\n      if ('resize' in child) {\r\n        child.resize(width, height);\r\n      }\r\n    }\r\n  }\r\n  update() {\r\n    for (let child of this.children) {\r\n      if ('update' in child) {\r\n        child.update();\r\n      }\r\n    }\r\n  }\r\n  get game() {\r\n    return this._game;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./core/scene.js\n **/","export default class Model {\r\n  constructor() {\r\n    this._onUpdated = null;\r\n  }\r\n  set onUpdated(value) {\r\n    this._onUpdated = value;\r\n  }\r\n  get onUpdated() {\r\n    return this._onUpdated;\r\n  }\r\n  update() {\r\n    if (this._onUpdated) {\r\n      this._onUpdated();\r\n    }\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./core/mvc/model.js\n **/","import Model from './../../core/mvc/model';\r\nimport CellModel from './cell-model';\r\nimport TileModel from './tile-model';\r\n\r\nexport default class GridModel extends Model {\r\n  constructor(width, height, seed) {\r\n    super();\r\n\r\n    this._width         = width;\r\n    this._height        = height;\r\n    this._seed          = seed;\r\n    this._vector        = [];\r\n    this._vector.length = this._width * this._height;\r\n\r\n    this._simulating    = false;\r\n    this._tilesFalling  = 0;\r\n\r\n    this._swappedCell1  = null;\r\n    this._swappedCell2  = null;\r\n\r\n    this._onTileMoved   = null;\r\n    this._onTileAdded   = null;\r\n    this._onTileRemoved = null;\r\n\r\n    this._onRandomized  = null;\r\n    this._onChecked     = null;\r\n    this._onSwapped     = null;\r\n    this._onSimulated   = null;\r\n  }\r\n\r\n  beginSimulation() {\r\n    console.log(\"simulate\");\r\n    if (this._simulating) {\r\n      return;\r\n    }\r\n    this._simulating = true;\r\n    this.check();\r\n  }\r\n\r\n  check() {\r\n    console.log(\"check\");\r\n    var matches = this.getMatches();\r\n    if (this._onChecked) {\r\n      this._onChecked(matches);\r\n    }\r\n    if (matches.length > 0) {\r\n      this.remove(matches);\r\n    } else {\r\n      if (!this.fill()) {\r\n        this.endSimulation();\r\n      }\r\n    }\r\n  }\r\n\r\n  remove(matches) {\r\n    console.log(\"remove\");\r\n    for (var i = 0; i < matches.length; i++) {\r\n      var match = matches[i];\r\n      this.removeTile(match);\r\n    }\r\n    this.gravity();\r\n  }\r\n\r\n  gravity() {\r\n    console.log(\"gravity\");\r\n    var movedTile = false;\r\n    for (var i = 0; i < this._width; i++) {\r\n      var drop = 0;\r\n      var cell = this.transformIndexToCellModel(i);\r\n      while (cell.y <= this._height - 1) {\r\n        if (!this.getTileModel(cell)) {\r\n          drop++;\r\n        } else if (drop) {\r\n          this._tilesFalling++;\r\n          this.moveTile(cell, new CellModel(cell.x, cell.y - drop), this.onTileFallen.bind(this));\r\n          movedTile = true;\r\n        }\r\n        cell.y++;\r\n      }\r\n    }\r\n    if (!movedTile) {\r\n      if (!this.fill()) {\r\n        this.check();\r\n      }\r\n    }\r\n  }\r\n\r\n  onTileFallen() {\r\n    this._tilesFalling--;\r\n    if (this._tilesFalling === 0) {\r\n      if (!this.fill()) {\r\n        this.check();\r\n      }\r\n    }\r\n  }\r\n\r\n  fill() {\r\n    console.log(\"fill\");\r\n    let filled = false;\r\n    for (var i = this._width * this._height - this._width * 2; i < this._width * this._height - this._width; i++) {\r\n      let cell = this.transformIndexToCellModel(i);\r\n      if (!this.getTileModel(cell)) {\r\n        this.addTile(this.createRandomTileModel(new CellModel(cell.x, cell.y + 1)));\r\n        filled = true;\r\n      }\r\n    }\r\n    if (filled) {\r\n      this.gravity();\r\n    }\r\n    return filled;\r\n  }\r\n\r\n  endSimulation() {\r\n    console.log(\"simulated\");\r\n    if (this._onSimulated) {\r\n      this._onSimulated();\r\n    }\r\n    this._simulating = false;\r\n  }\r\n\r\n  swapCells(cell1, cell2) {\r\n\r\n    var tile1 = this.getTileModel(cell1);\r\n    var tile2 = this.getTileModel(cell2);\r\n\r\n    if (!tile1 || !tile2 || this._simulating) {\r\n      return false;\r\n    }\r\n\r\n    // After first swap remove matches.\r\n    this._swappedCell1 = tile1.cell;\r\n    this._swappedCell2 = tile2.cell;\r\n    this.swapTiles(tile1, tile2);\r\n    return true;\r\n  }\r\n\r\n  swapTiles(tile1, tile2) {\r\n    tile1.swap(tile2, this.onSwapped.bind(this));\r\n    this.setTileModel(tile1.cell, tile1);\r\n    this.setTileModel(tile2.cell, tile2);\r\n  }\r\n\r\n  onSwapped(tile1, tile2) {\r\n    if (!tile1.cell.equals(this._swappedCell1) && !tile2.cell.equals(this._swappedCell2)) {\r\n      this._onChecked = ((matches) => {\r\n        if (!matches) {\r\n          this.swapTiles(tile1, tile2);\r\n        } else {\r\n          if (this._onSwapped) {\r\n            this._onSwapped();\r\n          }\r\n        }\r\n        this._onChecked = null;\r\n      }).bind(this);\r\n      this.beginSimulation();\r\n    } else {\r\n      if (this._onSwapped) {\r\n        this._onSwapped();\r\n      }\r\n    }\r\n  }\r\n\r\n  moveTile(fromCell, toCell, onMoved) {\r\n    var movingTile = this.getTileModel(fromCell);\r\n    if (movingTile) {\r\n      this.removeTile(toCell);\r\n      this.setTileModel(toCell, movingTile);\r\n      movingTile.move(toCell, onMoved);\r\n      this.setTileModel(fromCell, null);\r\n      if (this._onTileMoved) {\r\n        this._onTileMoved(fromCell, toCell);\r\n      }\r\n    }\r\n  }\r\n\r\n  addTile(tileModel) {\r\n    if (tileModel) {\r\n      this.setTileModel(tileModel.cell, tileModel);\r\n      if (this._onTileAdded) {\r\n        this._onTileAdded(tileModel);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeTile(fromCell) {\r\n    var removedModel = this.getTileModel(fromCell);\r\n    if (removedModel) {\r\n      removedModel.onRemoved();\r\n      this.setTileModel(fromCell, null);\r\n      if (this._onTileRemoved) {\r\n        this._onTileRemoved(removedModel);\r\n      }\r\n    }\r\n  }\r\n\r\n  setTileModel(p, v) {\r\n    var i = this.transformCellModelToIndex(p);\r\n    if (i < 0 && i > this._vector.length - 1) {\r\n      return false;\r\n    }\r\n    this._vector[i] = v;\r\n    return true;\r\n  }\r\n\r\n  getTileModel(p) {\r\n    var i = this.transformCellModelToIndex(p);\r\n    if (!(i in this._vector)) {\r\n      return null;\r\n    }\r\n    return this._vector[i];\r\n  }\r\n\r\n  randomize(seed) {\r\n    for (var i = 0; i < this._vector.length - this._width; i++) {\r\n      var currentCell;\r\n      do {\r\n        currentCell = this.transformIndexToCellModel(i);\r\n        this._vector[i] = this.createRandomTileModel(currentCell);\r\n      } while (this.getVerticalMatches(currentCell).length > 2 || this.getHorizontalMatches(currentCell).length > 2);\r\n    }\r\n    if (this._onRandomized) {\r\n      this._onRandomized();\r\n    }\r\n  }\r\n\r\n  random() {\r\n    var max = 1;\r\n    var min = 0;\r\n    this._seed = (this._seed * 9301 + 49297) % 233280;\r\n    var rnd = this._seed / 233280;\r\n    return min + rnd * (max - min);\r\n  }\r\n\r\n  createRandomTileModel(cell) {\r\n    return new TileModel(this.randomTileValue(0, 4), cell, this);\r\n  }\r\n\r\n  randomTileValue(min, max) {\r\n    return Math.floor(this.random() * (1 + max - min)) + min;\r\n  }\r\n\r\n  transformIndexToCellModel(i) {\r\n    if (i < 0 || i > (this._vector.length - 1)) {\r\n      return null;\r\n    }\r\n    return new CellModel(i % this._width, Math.floor(i / this._width));\r\n  }\r\n\r\n  transformCellModelToIndex(tile) {\r\n    if (!tile || tile.x < 0 || tile.x > (this._width - 1) || tile.y < 0 || tile.y > (this._height - 1)) {\r\n      return -1;\r\n    }\r\n    return tile.x + tile.y * this._width;\r\n  }\r\n\r\n  unique(cells) {\r\n    var unique = cells.concat();\r\n    for (var i = 0; i < unique.length; ++i) {\r\n      for (var j = i + 1; j < unique.length; ++j) {\r\n        if (unique[i].equals(unique[j])) {\r\n          unique.splice(j--, 1);\r\n        }\r\n      }\r\n    }\r\n    return unique;\r\n  }\r\n\r\n  getMatches() {\r\n    var matches = [];\r\n    for (var i = 0; i < this._vector.length; ++i) {\r\n      var cursorCellModel = this.transformIndexToCellModel(i);\r\n      var horizontalMatches = this.getHorizontalMatches(cursorCellModel);\r\n      if (horizontalMatches.length > 2) {\r\n        matches = matches.concat(horizontalMatches);\r\n      }\r\n      var verticalMatches = this.getVerticalMatches(cursorCellModel);\r\n      if (verticalMatches.length > 2) {\r\n        matches = matches.concat(verticalMatches);\r\n      }\r\n    }\r\n    return this.unique(matches);\r\n  }\r\n\r\n  getVerticalMatches(originCellModel) {\r\n    var matches = [];\r\n    var originTileModel = this.getTileModel(originCellModel);\r\n    if (!originTileModel) {\r\n      return matches;\r\n    }\r\n    matches.push(originCellModel);\r\n    var cursorCellModel = originCellModel.copy();\r\n    cursorCellModel.y--;\r\n    while(GridModel.tilesMatch(originTileModel, this.getTileModel(cursorCellModel))) {\r\n      matches.push(new CellModel(cursorCellModel.x, cursorCellModel.y));\r\n      cursorCellModel.y--;\r\n    }\r\n    cursorCellModel.y = originCellModel.y + 1;\r\n    while (GridModel.tilesMatch(originTileModel, this.getTileModel(cursorCellModel))) {\r\n      matches.push(new CellModel(cursorCellModel.x, cursorCellModel.y));\r\n      cursorCellModel.y++;\r\n    }\r\n    return matches;\r\n  }\r\n\r\n  getHorizontalMatches(originCellModel) {\r\n    var matches = [];\r\n    var originTileModel = this.getTileModel(originCellModel);\r\n    if (!originTileModel) {\r\n      return matches;\r\n    }\r\n    matches.push(originCellModel);\r\n    var cursorCellModel = originCellModel.copy();\r\n    cursorCellModel.x--;\r\n    while(GridModel.tilesMatch(originTileModel, this.getTileModel(cursorCellModel))) {\r\n      matches.push(new CellModel(cursorCellModel.x, cursorCellModel.y));\r\n      cursorCellModel.x--;\r\n    }\r\n    cursorCellModel.x = originCellModel.x + 1;\r\n    while (GridModel.tilesMatch(originTileModel, this.getTileModel(cursorCellModel))) {\r\n      matches.push(new CellModel(cursorCellModel.x, cursorCellModel.y));\r\n      cursorCellModel.x++;\r\n    }\r\n    return matches;\r\n  }\r\n\r\n  static tilesMatch(tileModel1, tileModel2) {\r\n    if (!tileModel1 || !tileModel2) {\r\n      return false;\r\n    }\r\n    return tileModel1.value === tileModel2.value;\r\n  }\r\n\r\n  toString() {\r\n    let string = \"\";\r\n    for (let y = this._height - 1; y >= 0; y--) {\r\n      for (let x = 0; x < this._width; x++) {\r\n        let cellModel = new CellModel(x, y);\r\n        let tileModel = this.getTileModel(cellModel);\r\n        string += (tileModel ? tileModel.value : 'X'); //+ cellModel.toString() + '[' + this._vector.indexOf(tileModel) + ']';\r\n        if (x === this._width - 1) {\r\n          string += \"\\n\";\r\n        }\r\n      }\r\n    }\r\n    return string;\r\n  }\r\n\r\n  set onRandomized(value) {\r\n    this._onRandomized = value;\r\n  }\r\n\r\n  get onRandomized() {\r\n    return this._onRandomized;\r\n  }\r\n\r\n  get size() {\r\n    return this._vector.length;\r\n  }\r\n\r\n  get width() {\r\n    return this._width;\r\n  }\r\n\r\n  get height() {\r\n    return this._height;\r\n  }\r\n\r\n  get onTileAdded() {\r\n    return this._onTileAdded;\r\n  }\r\n\r\n  set onTileAdded(value) {\r\n    return this._onTileAdded = value;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./m3/models/grid-model.js\n **/","import Model from './../../core/mvc/model';\r\n\r\nexport default class CellModel extends Model {\r\n  constructor(x, y) {\r\n    super();\r\n    this._x = x;\r\n    this._y = y;\r\n    this.update();\r\n  }\r\n\r\n  distance(cell) {\r\n    return (Math.sqrt(Math.pow(cell.x - this._x, 2) + Math.pow(cell.y - this._y, 2)));\r\n  }\r\n\r\n  equals(cell) {\r\n    return (this._x === cell.x && this._y === cell.y);\r\n  }\r\n\r\n  difference(cell) {\r\n    return (new CellModel(this._x - cell.x, this._y - cell.y));\r\n  }\r\n\r\n  copy() {\r\n    return (new CellModel(this._x, this._y));\r\n  }\r\n\r\n  toString() {\r\n    return '('+this._x+','+this._y+')';\r\n  }\r\n\r\n  get x() {\r\n    return this._x;\r\n  }\r\n\r\n  set x(value) {\r\n    this._x = value;\r\n    this.update();\r\n  }\r\n\r\n  get y() {\r\n    return this._y;\r\n  }\r\n\r\n  set y(value) {\r\n    this._y = value;\r\n    this.update();\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./m3/models/cell-model.js\n **/","import Model from './../../core/mvc/model';\r\n\r\nexport default class TileModel extends Model {\r\n  constructor(value, cell, gridModel) {\r\n    super();\r\n\r\n    this._value         = value;\r\n    this._cell          = cell;\r\n    this._gridModel     = gridModel;\r\n\r\n    this._highlight     = false;\r\n    this._onMoved       = null;\r\n    this._onRemoved     = null;\r\n    this._onSwapped     = null;\r\n    this._swapTile      = null;\r\n    this._swapMovements = 0;\r\n  }\r\n\r\n  swap(tile, onSwapped) {\r\n    if (onSwapped) {\r\n      this._onSwapped = onSwapped;\r\n    }\r\n    this._swapTile = tile;\r\n    var cell = this._cell;\r\n    this.move(this._swapTile.cell, this.onSwapMovement.bind(this));\r\n    this._swapTile.move(cell, this.onSwapMovement.bind(this));\r\n  }\r\n\r\n  onSwapMovement() {\r\n    this._swapMovements++;\r\n    if (this._swapMovements == 2)\r\n    {\r\n      this._swapMovements = 0;\r\n      if (this._onSwapped) {\r\n        this._onSwapped(this, this._swapTile);\r\n      }\r\n    }\r\n  }\r\n\r\n  move(cell, onMovedCallback) {\r\n    var time = Math.sqrt((2 * this._cell.distance(cell)) / 64) * 1000;\r\n    this._cell = cell;\r\n    if (this._onMoved) {\r\n      this._onMoved(this._cell, time, onMovedCallback);\r\n    }\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  get cell() {\r\n    return this._cell;\r\n  }\r\n\r\n  get onRemoved() {\r\n    return this._onRemoved;\r\n  }\r\n\r\n  get onMoved() {\r\n    return this._onMoved;\r\n  }\r\n\r\n  get highlight() {\r\n    return this._highlight;\r\n  }\r\n\r\n  get gridModel() {\r\n    return this._gridModel;\r\n  }\r\n\r\n  set highlight(value) {\r\n    this._highlight = value;\r\n    this.update();\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./m3/models/tile-model.js\n **/","import THREE from 'three';\r\nimport TWEEN from 'tween.js';\r\nimport View from './../../core/mvc/view';\r\n\r\nexport default class TileView extends View {\r\n  constructor(model) {\r\n    super(model);\r\n    if (!TileView.MATERIALS.length) {\r\n      throw new Error('Missing materials please create them with `TileView.createMaterials(textures)`.');\r\n    }\r\n    if (model.value > TileView.MATERIALS.length - 1) {\r\n      throw new Error(`No material exists for tile value \\`${model.value}\\`.`);\r\n    }\r\n    this._plane            = new THREE.Mesh(TileView.GEOMETRY, TileView.MATERIALS[this._model.value]);\r\n    this._plane.position.x = TileView.GEOMETRY.parameters.width / 2;\r\n    this._plane.position.y = TileView.GEOMETRY.parameters.height / 2;\r\n\r\n    this._tweenQueue       = [];\r\n    this._callbackQueue    = [];\r\n\r\n    this._model._onMoved   = this.onMoved.bind(this);\r\n    this._model._onRemoved = this.onRemoved.bind(this);\r\n\r\n    this._highlight        = false;\r\n\r\n    this._outlineMaterial    = new THREE.MeshBasicMaterial({color: 0xffffff, side: THREE.FrontSide});\r\n    this._outline            = new THREE.Mesh(TileView.GEOMETRY, this._outlineMaterial);\r\n    this._outline.position.x = TileView.GEOMETRY.parameters.width / 2;\r\n    this._outline.position.y = TileView.GEOMETRY.parameters.height / 2;\r\n    this._outline.visible    = false;\r\n\r\n    this.add(this._outline);\r\n    this.add(this._plane);\r\n\r\n    // this._sprite.scale.set(\r\n    //   this._sprite.material.map.image.width,\r\n    //   this._sprite.material.map.image.height,\r\n    //   1\r\n    // );\r\n    //\r\n    // this._sprite.position.set(\r\n    //   this._model.cell.x * this._sprite.scale.x,\r\n    //   this._model.cell.y * this._sprite.scale.y,\r\n    //   1\r\n    // );\r\n  }\r\n  static loadTextures() {\r\n    let loader = new THREE.TextureLoader();\r\n    let textures = [];\r\n    return new Promise((resolve, reject) => {\r\n      function onLoad(texture) {\r\n        textures.push(texture);\r\n        if (textures.length === Object.keys(TileView.IMAGES).length) {\r\n          resolve(textures);\r\n        }\r\n      }\r\n      function onProgress(event) {\r\n        console.debug(`${((event.loaded/event.total)*100).toFixed()}% ${event.currentTarget.responseURL}`);\r\n      }\r\n      for (let key in TileView.IMAGES) {\r\n        let url = TileView.IMAGES[key];\r\n        loader.load(url, onLoad, onProgress, reject);\r\n      }\r\n    });\r\n  }\r\n  static createOutline() {\r\n    let outlineMaterial = new THREE.MeshBasicMaterial({color: 0xffffff, side: THREE.BackSide});\r\n    let outlineMesh = new THREE.Mesh(TileView.GEOMETRY, outlineMaterial);\r\n    outlineMesh.scale.multiplyScale(1.05);\r\n    this.add(outlineMesh);\r\n  }\r\n  static createMaterials(textures) {\r\n    for (let texture of textures) {\r\n      TileView.MATERIALS.push(new THREE.MeshBasicMaterial({\r\n        map: texture,\r\n        side: THREE.DoubleSide,\r\n        transparent: true,\r\n        depthWrite: false,\r\n        depthTest: false\r\n      }));\r\n    }\r\n  }\r\n  onMoved(cell, time, onFinished) {\r\n    let size = this.size;\r\n    let tween = new TWEEN.Tween(this.position).to({ x: cell.x * this.width, y: cell.y * this.height }, time);\r\n    tween.onComplete(this.onTweened.bind(this));\r\n    tween.easing(TWEEN.Easing.Quadratic.InOut);\r\n\r\n    if (this._tweenQueue.length > 0) {\r\n      this._tweenQueue[this._tweenQueue.length - 1].nextTween = tween;\r\n    }\r\n    else {\r\n      tween.start();\r\n    }\r\n\r\n    this._tweenQueue.push(tween);\r\n    this._callbackQueue.push(onFinished);\r\n  }\r\n  update() {\r\n    // this._plane.rotation.x += Math.random() * .05;\r\n    // let time    = new Date(Date.now()).getMilliseconds() / 1000;\r\n    // let circle  = Math.PI * 2 * time;\r\n    // let offsetX = this.model.cell.x / this.model.gridModel.width * Math.PI * 1;\r\n    // let offsetY = this.model.cell.y / this.model.gridModel.height * Math.PI * 1;\r\n    // this._plane.rotation.y = circle + offsetX + offsetY;\r\n  }\r\n  onRemoved() {\r\n    this.parent.remove(this);\r\n  }\r\n  onTweened() {\r\n    this._tweenQueue.splice(0, 1);\r\n    let onFinished = this._callbackQueue[0];\r\n    if (onFinished) {\r\n      onFinished();\r\n    }\r\n    this._callbackQueue.splice(0, 1);\r\n  }\r\n  onUpdated() {\r\n    super.onUpdated();\r\n    // TODO: Highlight here relative to this._model.highlight\r\n  }\r\n  set highlight(value) {\r\n    this._outline.visible = value;\r\n  }\r\n  get highlight() {\r\n    return this._outline.visible;\r\n  }\r\n  get wireframe() {\r\n    return this._material.wireframe;\r\n  }\r\n  set wireframe(value) {\r\n    this._material.wireframe = value;\r\n  }\r\n  get moving() {\r\n    return this._tweenQueue.length > 0;\r\n  }\r\n  get model() {\r\n    return this._model;\r\n  }\r\n  get sprite() {\r\n    return this._sprite;\r\n  }\r\n  get width() {\r\n    return this._plane.geometry.parameters.width;\r\n  }\r\n  get height() {\r\n    return this._plane.geometry.parameters.height;\r\n  }\r\n}\r\nTileView.GEOMETRY  = new THREE.PlaneGeometry(48, 46);\r\nTileView.MATERIALS = [];\r\nTileView.IMAGES = {\r\n  tile_blue:   require('assets/textures/tile_blue.png'),\r\n  tile_green:  require('assets/textures/tile_green.png'),\r\n  tile_purple: require('assets/textures/tile_purple.png'),\r\n  tile_red:    require('assets/textures/tile_red.png'),\r\n  tile_yellow: require('assets/textures/tile_yellow.png')\r\n};\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./m3/views/tile-view.js\n **/","/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\n\n// Include a performance.now polyfill\n(function () {\n\n\tif ('performance' in window === false) {\n\t\twindow.performance = {};\n\t}\n\n\t// IE 8\n\tDate.now = (Date.now || function () {\n\t\treturn new Date().getTime();\n\t});\n\n\tif ('now' in window.performance === false) {\n\t\tvar offset = window.performance.timing && window.performance.timing.navigationStart ? window.performance.timing.navigationStart\n\t\t                                                                                    : Date.now();\n\n\t\twindow.performance.now = function () {\n\t\t\treturn Date.now() - offset;\n\t\t};\n\t}\n\n})();\n\nvar TWEEN = TWEEN || (function () {\n\n\tvar _tweens = [];\n\n\treturn {\n\n\t\tgetAll: function () {\n\n\t\t\treturn _tweens;\n\n\t\t},\n\n\t\tremoveAll: function () {\n\n\t\t\t_tweens = [];\n\n\t\t},\n\n\t\tadd: function (tween) {\n\n\t\t\t_tweens.push(tween);\n\n\t\t},\n\n\t\tremove: function (tween) {\n\n\t\t\tvar i = _tweens.indexOf(tween);\n\n\t\t\tif (i !== -1) {\n\t\t\t\t_tweens.splice(i, 1);\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function (time) {\n\n\t\t\tif (_tweens.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar i = 0;\n\n\t\t\ttime = time !== undefined ? time : window.performance.now();\n\n\t\t\twhile (i < _tweens.length) {\n\n\t\t\t\tif (_tweens[i].update(time)) {\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\t_tweens.splice(i, 1);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\t};\n\n})();\n\nTWEEN.Tween = function (object) {\n\n\tvar _object = object;\n\tvar _valuesStart = {};\n\tvar _valuesEnd = {};\n\tvar _valuesStartRepeat = {};\n\tvar _duration = 1000;\n\tvar _repeat = 0;\n\tvar _yoyo = false;\n\tvar _isPlaying = false;\n\tvar _reversed = false;\n\tvar _delayTime = 0;\n\tvar _startTime = null;\n\tvar _easingFunction = TWEEN.Easing.Linear.None;\n\tvar _interpolationFunction = TWEEN.Interpolation.Linear;\n\tvar _chainedTweens = [];\n\tvar _onStartCallback = null;\n\tvar _onStartCallbackFired = false;\n\tvar _onUpdateCallback = null;\n\tvar _onCompleteCallback = null;\n\tvar _onStopCallback = null;\n\n\t// Set all starting values present on the target object\n\tfor (var field in object) {\n\t\t_valuesStart[field] = parseFloat(object[field], 10);\n\t}\n\n\tthis.to = function (properties, duration) {\n\n\t\tif (duration !== undefined) {\n\t\t\t_duration = duration;\n\t\t}\n\n\t\t_valuesEnd = properties;\n\n\t\treturn this;\n\n\t};\n\n\tthis.start = function (time) {\n\n\t\tTWEEN.add(this);\n\n\t\t_isPlaying = true;\n\n\t\t_onStartCallbackFired = false;\n\n\t\t_startTime = time !== undefined ? time : window.performance.now();\n\t\t_startTime += _delayTime;\n\n\t\tfor (var property in _valuesEnd) {\n\n\t\t\t// Check if an Array was provided as property value\n\t\t\tif (_valuesEnd[property] instanceof Array) {\n\n\t\t\t\tif (_valuesEnd[property].length === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Create a local copy of the Array with the start value at the front\n\t\t\t\t_valuesEnd[property] = [_object[property]].concat(_valuesEnd[property]);\n\n\t\t\t}\n\n\t\t\t// If `to()` specifies a property that doesn't exist in the source object,\n\t\t\t// we should not set that property in the object\n\t\t\tif (_valuesStart[property] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t_valuesStart[property] = _object[property];\n\n\t\t\tif ((_valuesStart[property] instanceof Array) === false) {\n\t\t\t\t_valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n\t\t\t}\n\n\t\t\t_valuesStartRepeat[property] = _valuesStart[property] || 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tthis.stop = function () {\n\n\t\tif (!_isPlaying) {\n\t\t\treturn this;\n\t\t}\n\n\t\tTWEEN.remove(this);\n\t\t_isPlaying = false;\n\n\t\tif (_onStopCallback !== null) {\n\t\t\t_onStopCallback.call(_object);\n\t\t}\n\n\t\tthis.stopChainedTweens();\n\t\treturn this;\n\n\t};\n\n\tthis.stopChainedTweens = function () {\n\n\t\tfor (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t_chainedTweens[i].stop();\n\t\t}\n\n\t};\n\n\tthis.delay = function (amount) {\n\n\t\t_delayTime = amount;\n\t\treturn this;\n\n\t};\n\n\tthis.repeat = function (times) {\n\n\t\t_repeat = times;\n\t\treturn this;\n\n\t};\n\n\tthis.yoyo = function (yoyo) {\n\n\t\t_yoyo = yoyo;\n\t\treturn this;\n\n\t};\n\n\n\tthis.easing = function (easing) {\n\n\t\t_easingFunction = easing;\n\t\treturn this;\n\n\t};\n\n\tthis.interpolation = function (interpolation) {\n\n\t\t_interpolationFunction = interpolation;\n\t\treturn this;\n\n\t};\n\n\tthis.chain = function () {\n\n\t\t_chainedTweens = arguments;\n\t\treturn this;\n\n\t};\n\n\tthis.onStart = function (callback) {\n\n\t\t_onStartCallback = callback;\n\t\treturn this;\n\n\t};\n\n\tthis.onUpdate = function (callback) {\n\n\t\t_onUpdateCallback = callback;\n\t\treturn this;\n\n\t};\n\n\tthis.onComplete = function (callback) {\n\n\t\t_onCompleteCallback = callback;\n\t\treturn this;\n\n\t};\n\n\tthis.onStop = function (callback) {\n\n\t\t_onStopCallback = callback;\n\t\treturn this;\n\n\t};\n\n\tthis.update = function (time) {\n\n\t\tvar property;\n\t\tvar elapsed;\n\t\tvar value;\n\n\t\tif (time < _startTime) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (_onStartCallbackFired === false) {\n\n\t\t\tif (_onStartCallback !== null) {\n\t\t\t\t_onStartCallback.call(_object);\n\t\t\t}\n\n\t\t\t_onStartCallbackFired = true;\n\n\t\t}\n\n\t\telapsed = (time - _startTime) / _duration;\n\t\telapsed = elapsed > 1 ? 1 : elapsed;\n\n\t\tvalue = _easingFunction(elapsed);\n\n\t\tfor (property in _valuesEnd) {\n\n\t\t\t// Don't update properties that do not exist in the source object\n\t\t\tif (_valuesStart[property] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar start = _valuesStart[property] || 0;\n\t\t\tvar end = _valuesEnd[property];\n\n\t\t\tif (end instanceof Array) {\n\n\t\t\t\t_object[property] = _interpolationFunction(end, value);\n\n\t\t\t} else {\n\n\t\t\t\t// Parses relative end values with start as base (e.g.: +10, -3)\n\t\t\t\tif (typeof (end) === 'string') {\n\n\t\t\t\t\tif (end.startsWith('+') || end.startsWith('-')) {\n\t\t\t\t\t\tend = start + parseFloat(end, 10);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tend = parseFloat(end, 10);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Protect against non numeric properties.\n\t\t\t\tif (typeof (end) === 'number') {\n\t\t\t\t\t_object[property] = start + (end - start) * value;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif (_onUpdateCallback !== null) {\n\t\t\t_onUpdateCallback.call(_object, value);\n\t\t}\n\n\t\tif (elapsed === 1) {\n\n\t\t\tif (_repeat > 0) {\n\n\t\t\t\tif (isFinite(_repeat)) {\n\t\t\t\t\t_repeat--;\n\t\t\t\t}\n\n\t\t\t\t// Reassign starting values, restart by making startTime = now\n\t\t\t\tfor (property in _valuesStartRepeat) {\n\n\t\t\t\t\tif (typeof (_valuesEnd[property]) === 'string') {\n\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property], 10);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_yoyo) {\n\t\t\t\t\t\tvar tmp = _valuesStartRepeat[property];\n\n\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesEnd[property];\n\t\t\t\t\t\t_valuesEnd[property] = tmp;\n\t\t\t\t\t}\n\n\t\t\t\t\t_valuesStart[property] = _valuesStartRepeat[property];\n\n\t\t\t\t}\n\n\t\t\t\tif (_yoyo) {\n\t\t\t\t\t_reversed = !_reversed;\n\t\t\t\t}\n\n\t\t\t\t_startTime = time + _delayTime;\n\n\t\t\t\treturn true;\n\n\t\t\t} else {\n\n\t\t\t\tif (_onCompleteCallback !== null) {\n\t\t\t\t\t_onCompleteCallback.call(_object);\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t\t\t// Make the chained tweens start exactly at the time they should,\n\t\t\t\t\t// even if the `update()` method was called way past the duration of the tween\n\t\t\t\t\t_chainedTweens[i].start(_startTime + _duration);\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n};\n\n\nTWEEN.Easing = {\n\n\tLinear: {\n\n\t\tNone: function (k) {\n\n\t\t\treturn k;\n\n\t\t}\n\n\t},\n\n\tQuadratic: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k * k;\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn k * (2 - k);\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k;\n\t\t\t}\n\n\t\t\treturn - 0.5 * (--k * (k - 2) - 1);\n\n\t\t}\n\n\t},\n\n\tCubic: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k * k * k;\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn --k * k * k + 1;\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k + 2);\n\n\t\t}\n\n\t},\n\n\tQuartic: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k * k * k * k;\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn 1 - (--k * k * k * k);\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn - 0.5 * ((k -= 2) * k * k * k - 2);\n\n\t\t}\n\n\t},\n\n\tQuintic: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k * k * k * k * k;\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn --k * k * k * k * k + 1;\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k * k * k + 2);\n\n\t\t}\n\n\t},\n\n\tSinusoidal: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn 1 - Math.cos(k * Math.PI / 2);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn Math.sin(k * Math.PI / 2);\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\treturn 0.5 * (1 - Math.cos(Math.PI * k));\n\n\t\t}\n\n\t},\n\n\tExponential: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k === 0 ? 0 : Math.pow(1024, k - 1);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn k === 1 ? 1 : 1 - Math.pow(2, - 10 * k);\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * Math.pow(1024, k - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (- Math.pow(2, - 10 * (k - 1)) + 2);\n\n\t\t}\n\n\t},\n\n\tCircular: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn 1 - Math.sqrt(1 - k * k);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn Math.sqrt(1 - (--k * k));\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn - 0.5 * (Math.sqrt(1 - k * k) - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n\n\t\t}\n\n\t},\n\n\tElastic: {\n\n\t\tIn: function (k) {\n\n\t\t\tvar s;\n\t\t\tvar a = 0.1;\n\t\t\tvar p = 0.4;\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif (!a || a < 1) {\n\t\t\t\ta = 1;\n\t\t\t\ts = p / 4;\n\t\t\t} else {\n\t\t\t\ts = p * Math.asin(1 / a) / (2 * Math.PI);\n\t\t\t}\n\n\t\t\treturn - (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\tvar s;\n\t\t\tvar a = 0.1;\n\t\t\tvar p = 0.4;\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif (!a || a < 1) {\n\t\t\t\ta = 1;\n\t\t\t\ts = p / 4;\n\t\t\t} else {\n\t\t\t\ts = p * Math.asin(1 / a) / (2 * Math.PI);\n\t\t\t}\n\n\t\t\treturn (a * Math.pow(2, - 10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1);\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tvar s;\n\t\t\tvar a = 0.1;\n\t\t\tvar p = 0.4;\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif (!a || a < 1) {\n\t\t\t\ta = 1;\n\t\t\t\ts = p / 4;\n\t\t\t} else {\n\t\t\t\ts = p * Math.asin(1 / a) / (2 * Math.PI);\n\t\t\t}\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn - 0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\n\t\t\t}\n\n\t\t\treturn a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\n\t\t}\n\n\t},\n\n\tBack: {\n\n\t\tIn: function (k) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn k * k * ((s + 1) * k - s);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn --k * k * ((s + 1) * k + s) + 1;\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tvar s = 1.70158 * 1.525;\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * (k * k * ((s + 1) * k - s));\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n\n\t\t}\n\n\t},\n\n\tBounce: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn 1 - TWEEN.Easing.Bounce.Out(1 - k);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\tif (k < (1 / 2.75)) {\n\t\t\t\treturn 7.5625 * k * k;\n\t\t\t} else if (k < (2 / 2.75)) {\n\t\t\t\treturn 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\n\t\t\t} else if (k < (2.5 / 2.75)) {\n\t\t\t\treturn 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\n\t\t\t} else {\n\t\t\t\treturn 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\n\t\t\t}\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif (k < 0.5) {\n\t\t\t\treturn TWEEN.Easing.Bounce.In(k * 2) * 0.5;\n\t\t\t}\n\n\t\t\treturn TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\n\n\t\t}\n\n\t}\n\n};\n\nTWEEN.Interpolation = {\n\n\tLinear: function (v, k) {\n\n\t\tvar m = v.length - 1;\n\t\tvar f = m * k;\n\t\tvar i = Math.floor(f);\n\t\tvar fn = TWEEN.Interpolation.Utils.Linear;\n\n\t\tif (k < 0) {\n\t\t\treturn fn(v[0], v[1], f);\n\t\t}\n\n\t\tif (k > 1) {\n\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t}\n\n\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\n\t},\n\n\tBezier: function (v, k) {\n\n\t\tvar b = 0;\n\t\tvar n = v.length - 1;\n\t\tvar pw = Math.pow;\n\t\tvar bn = TWEEN.Interpolation.Utils.Bernstein;\n\n\t\tfor (var i = 0; i <= n; i++) {\n\t\t\tb += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n\t\t}\n\n\t\treturn b;\n\n\t},\n\n\tCatmullRom: function (v, k) {\n\n\t\tvar m = v.length - 1;\n\t\tvar f = m * k;\n\t\tvar i = Math.floor(f);\n\t\tvar fn = TWEEN.Interpolation.Utils.CatmullRom;\n\n\t\tif (v[0] === v[m]) {\n\n\t\t\tif (k < 0) {\n\t\t\t\ti = Math.floor(f = m * (1 + k));\n\t\t\t}\n\n\t\t\treturn fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n\n\t\t} else {\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n\t\t\t}\n\n\t\t\treturn fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n\n\t\t}\n\n\t},\n\n\tUtils: {\n\n\t\tLinear: function (p0, p1, t) {\n\n\t\t\treturn (p1 - p0) * t + p0;\n\n\t\t},\n\n\t\tBernstein: function (n, i) {\n\n\t\t\tvar fc = TWEEN.Interpolation.Utils.Factorial;\n\n\t\t\treturn fc(n) / fc(i) / fc(n - i);\n\n\t\t},\n\n\t\tFactorial: (function () {\n\n\t\t\tvar a = [1];\n\n\t\t\treturn function (n) {\n\n\t\t\t\tvar s = 1;\n\n\t\t\t\tif (a[n]) {\n\t\t\t\t\treturn a[n];\n\t\t\t\t}\n\n\t\t\t\tfor (var i = n; i > 1; i--) {\n\t\t\t\t\ts *= i;\n\t\t\t\t}\n\n\t\t\t\ta[n] = s;\n\t\t\t\treturn s;\n\n\t\t\t};\n\n\t\t})(),\n\n\t\tCatmullRom: function (p0, p1, p2, p3, t) {\n\n\t\t\tvar v0 = (p2 - p0) * 0.5;\n\t\t\tvar v1 = (p3 - p1) * 0.5;\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t * t2;\n\n\t\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (- 3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\n\t\t}\n\n\t}\n\n};\n\n// UMD (Universal Module Definition)\n(function (root) {\n\n\tif (typeof define === 'function' && define.amd) {\n\n\t\t// AMD\n\t\tdefine([], function () {\n\t\t\treturn TWEEN;\n\t\t});\n\n\t} else if (typeof module !== 'undefined' && typeof exports === 'object') {\n\n\t\t// Node.js\n\t\tmodule.exports = TWEEN;\n\n\t} else if (root !== undefined) {\n\n\t\t// Global variable\n\t\troot.TWEEN = TWEEN;\n\n\t}\n\n})(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/tween.js/src/Tween.js\n ** module id = 20\n ** module chunks = 0\n **/","import THREE from 'three';\r\n\r\nexport default class View extends THREE.Object3D {\r\n  constructor(model) {\r\n    if (!model) {\r\n      throw new ReferenceError('View requires a model to be passed.');\r\n    }\r\n    super();\r\n    this._model = model;\r\n    this._model.onUpdated = this.onUpdated;\r\n  }\r\n  resize(width, height) {\r\n    for (let child of this.children) {\r\n      if ('resize' in child) {\r\n        child.resize(width, height);\r\n      }\r\n    }\r\n  }\r\n  update() {\r\n    for (let child of this.children) {\r\n      if ('update' in child) {\r\n        child.update();\r\n      }\r\n    }\r\n  }\r\n  onUpdated() {\r\n    // Abstract\r\n  }\r\n  get model() {\r\n    return this._model;\r\n  }\r\n  get size() {\r\n    return new THREE.Box3().setFromObject(this).size();\r\n  }\r\n  get screen() {\r\n    // return {\r\n    //   position:\r\n    //   size:\r\n    // };\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./core/mvc/view.js\n **/","module.exports = __webpack_public_path__ + \"679cf6466579db86f3a526972f9f8f0a.png\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./assets/textures/tile_blue.png\n ** module id = 22\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"837c823272fbcab78d7a5679d2e45b3b.png\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./assets/textures/tile_green.png\n ** module id = 23\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"28cde9f210d6682bc3fd7c1d79588c6f.png\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./assets/textures/tile_purple.png\n ** module id = 24\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"b570fae677b988bd68ce1ec5f4c510ac.png\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./assets/textures/tile_red.png\n ** module id = 25\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"7e473ce7b20cb31cb11b31da756cb6ae.png\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./assets/textures/tile_yellow.png\n ** module id = 26\n ** module chunks = 0\n **/","import THREE from 'three';\r\nimport View from './../../core/mvc/view';\r\nimport TileView from './tile-view';\r\nimport ServiceLocator from './../../core/service-locator';\r\nimport MouseEvent from './../../core/mouse-event';\r\n\r\nexport default class GridView extends View {\r\n  constructor(model) {\r\n    super(model);\r\n    this._camera = ServiceLocator.get('Game').camera;\r\n    this._dimensions = new THREE.Vector2();\r\n\r\n    this._model.onTileAdded = this.onTileAdded.bind(this);\r\n  }\r\n  onTileAdded(tileModel) {\r\n    this.createTileView(tileModel);\r\n  }\r\n  getWorldDimensions(width, height) {\r\n    let dimensions = new THREE.Vector2();\r\n    let vFOV = this._camera.fov * Math.PI / 180;\r\n    dimensions.y = 2 * Math.tan(vFOV / 2) * this._camera.position.z;\r\n    let aspect = width / height;\r\n    dimensions.x = dimensions.y * aspect;\r\n    return dimensions;\r\n  }\r\n  update() {\r\n    super.update();\r\n  }\r\n  resize(width, height) {\r\n    this._dimensions = this.getWorldDimensions(width, height);\r\n    let size = this.size;\r\n    let scale = 1;\r\n\r\n    if (height / width < size.y / size.x) {\r\n      scale = this._dimensions.y / size.y;\r\n    } else {\r\n      scale = this._dimensions.x / size.x;\r\n    }\r\n\r\n    // Scaling\r\n    this.scale.x *= scale;\r\n    this.scale.y *= scale;\r\n\r\n    // Centering\r\n    size = this.size;\r\n    this.position.x = -size.x / 2;\r\n    this.position.y = -size.y / 2;\r\n  }\r\n  createTileView(tileModel) {\r\n    let tileView = new TileView(tileModel);\r\n    tileView.position.x = tileModel.cell.x * tileView.width;\r\n    tileView.position.y = tileModel.cell.y * tileView.height;\r\n    this.add(tileView);\r\n    this._tileViews.push(tileView);\r\n  }\r\n  createTileViews() {\r\n    this.children.length = 0;\r\n    this._tileViews = [];\r\n    for (let i = 0; i < this._model.size; i++) {\r\n      let tileCell = this._model.transformIndexToCellModel(i);\r\n      let tileModel = this._model.getTileModel(tileCell);\r\n      if (!tileModel) {\r\n        this._tileViews.push(null);\r\n        continue;\r\n      }\r\n      this.createTileView(tileModel);\r\n    }\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./m3/views/grid-view.js\n **/","import THREE from 'three';\r\nimport feature from 'feature.js';\r\nimport Controller from './../../core/mvc/controller';\r\nimport ServiceLocator from './../../core/service-locator';\r\nimport TouchEvent from './../../core/touch-event';\r\nimport MouseEvent from './../../core/mouse-event';\r\nimport TileView from './../views/tile-view';\r\n\r\nexport default class GridController extends Controller {\r\n  constructor(gridModel, gridView) {\r\n    super(gridModel, gridView);\r\n    this._camera = ServiceLocator.get('Game').camera;\r\n\r\n    if (feature.touch) {\r\n      this._input = ServiceLocator.get('Touch');\r\n      this._input.addEventListener(TouchEvent.START, this.onMouseDown.bind(this));\r\n      this._input.addEventListener(TouchEvent.END,   this.onMouseUp.bind(this));\r\n    }\r\n    else {\r\n      this._input = ServiceLocator.get('Mouse');\r\n      this._input.addEventListener(MouseEvent.DOWN, this.onMouseDown.bind(this));\r\n      this._input.addEventListener(MouseEvent.UP,   this.onMouseUp.bind(this));\r\n    }\r\n\r\n    this._raycaster = new THREE.Raycaster();\r\n    this._selected = [];\r\n  }\r\n  getIntersects() {\r\n    this._raycaster.setFromCamera(this._input.position, this._camera);\r\n    let intersects = this._raycaster.intersectObjects(this.view.children, true);\r\n    return intersects;\r\n  }\r\n  selectTileView(view) {\r\n    if (view instanceof TileView) {\r\n      if (this._selected.length) {\r\n        let last = this._selected[0];\r\n        if (last.model.cell.distance(view.model.cell) !== 1) {\r\n          this._selected[this._selected.length-1].highlight = false;\r\n          this._selected = [];\r\n          return;\r\n        }\r\n      }\r\n      this._selected.push(view);\r\n      view.highlight = true;\r\n    }\r\n  }\r\n  swapSelectedTiles() {\r\n      this.model.swapCells(this._selected[0].model.cell, this._selected[1].model.cell);\r\n      for (let selected of this._selected) {\r\n        selected.highlight = false;\r\n      }\r\n      this._selected = [];\r\n  }\r\n  onMouseDown(event) {\r\n    console.debug('onMouseDown', event);\r\n    let intersects = this.getIntersects();\r\n    if (intersects.length) {\r\n      this.selectTileView(intersects[0].object.parent);\r\n    }\r\n  }\r\n  onMouseUp(event) {\r\n    console.debug('onMouseUp', event);\r\n    if (this._selected.length === 2) {\r\n      this.swapSelectedTiles();\r\n    }\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./m3/controllers/grid-controller.js\n **/","/*!\n * FEATURE.JS 1.0.0, A Fast, simple and lightweight browser feature\n * detection library in just 1kb.\n *\n * http://featurejs.com\n *\n * CSS 3D Transform, CSS Transform, CSS Transition, Canvas, SVG,\n * addEventListener, querySelectorAll, matchMedia, classList API,\n * placeholder, localStorage, History API, Viewport Units, REM Units,\n * CORS, WebGL, Service Worker, Context Menu, Geolocation,\n * Device Motion, Device Orientation, Touch, Async, Defer,\n * Srcset, Sizes & Picture Element.\n *\n *\n * USAGE EXAMPLE:\n * if (feature.webGL) {\n *   console.log(\"webGL supported!\");\n * }\n *\n * Author: @viljamis, https://viljamis.com\n */\n\n/* globals DocumentTouch */\n;(function (window, document, undefined) {\n  \"use strict\";\n\n  // For minification only\n  var docEl = document.documentElement;\n\n\n  /**\n   * Utilities\n   */\n  var util = {\n\n    /**\n     * Simple create element method\n     */\n    create : function(el) {\n      return document.createElement(el);\n    },\n\n    /**\n     * Test if it's an old device that we want to filter out\n     */\n    old : !!(/(Android\\s(1.|2.))|(Silk\\/1.)/i.test(navigator.userAgent)),\n\n    /**\n     * Function that takes a standard CSS property name as a parameter and\n     * returns it's prefixed version valid for current browser it runs in\n     */\n    pfx : (function() {\n      var style = document.createElement(\"dummy\").style;\n      var prefixes = [\"Webkit\", \"Moz\", \"O\", \"ms\"];\n      var memory = {};\n      return function(prop) {\n        if (typeof memory[prop] === \"undefined\") {\n          var ucProp = prop.charAt(0).toUpperCase() + prop.substr(1),\n            props = (prop + \" \" + prefixes.join(ucProp + \" \") + ucProp).split(\" \");\n            memory[prop] = null;\n          for (var i in props) {\n            if (style[props[i]] !== undefined) {\n              memory[prop] = props[i];\n              break;\n            }\n          }\n        }\n        return memory[prop];\n      };\n    })()\n\n  };\n\n\n  /**\n   * The Feature.js object\n   */\n\n  var Feature = {\n    // Test if CSS 3D transforms are supported\n    css3Dtransform : (function() {\n      var test = (!util.old && util.pfx(\"perspective\") !== null);\n      return !!test;\n    })(),\n\n    // Test if CSS transforms are supported\n    cssTransform : (function() {\n      var test = (!util.old && util.pfx(\"transformOrigin\") !== null);\n      return !!test;\n    })(),\n\n    // Test if CSS transitions are supported\n    cssTransition : (function() {\n      var test = util.pfx(\"transition\") !== null;\n      return !!test;\n    })(),\n\n    // Test if addEventListener is supported\n    addEventListener : !!window.addEventListener,\n\n    // Test if querySelectorAll is supported\n    querySelectorAll : !!document.querySelectorAll,\n\n    // Test if matchMedia is supported\n    matchMedia : !!window.matchMedia,\n\n    // Test if Device Motion is supported\n    deviceMotion : (\"DeviceMotionEvent\" in window),\n\n    // Test if Device Orientation is supported\n    deviceOrientation : (\"DeviceOrientationEvent\" in window),\n\n    // Test if Context Menu is supported\n    contextMenu : (\"contextMenu\" in docEl && \"HTMLMenuItemElement\" in window),\n\n    // Test if classList API is supported\n    classList : (\"classList\" in docEl),\n\n    // Test if placeholder attribute is supported\n    placeholder : (\"placeholder\" in util.create(\"input\")),\n\n    // Test if localStorage is supported\n    localStorage : (function() {\n      var test = \"x\";\n      try {\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n        return true;\n      } catch(err) {\n        return false;\n      }\n    })(),\n\n    // Test if History API is supported\n    historyAPI : (window.history && \"pushState\" in window.history),\n\n    // Test if ServiceWorkers are supported\n    serviceWorker : (\"serviceWorker\" in navigator),\n\n    // Test if viewport units are supported\n    viewportUnit : (function(el) {\n      try {\n        el.style.width = \"1vw\";\n        var test = el.style.width !== \"\";\n        return !!test;\n      } catch(err) {\n        return false;\n      }\n    })(util.create(\"dummy\")),\n\n    // Test if REM units are supported\n    remUnit : (function(el) {\n      try {\n        el.style.width = \"1rem\";\n        var test = el.style.width !== \"\";\n        return !!test;\n      } catch(err) {\n        return false;\n      }\n    })(util.create(\"dummy\")),\n\n    // Test if Canvas is supported\n    canvas : (function(el) {\n      return !!(el.getContext && el.getContext(\"2d\"));\n    })(util.create(\"canvas\")),\n\n    // Test if SVG is supported\n    svg : !!document.createElementNS && !!document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGRect,\n\n    // Test if WebGL is supported\n    webGL : (function(el) {\n      try {\n        return !!(window.WebGLRenderingContext && (el.getContext(\"webgl\") || el.getContext(\"experimental-webgl\")));\n      } catch(err) {\n        return false;\n      }\n    })(util.create(\"canvas\")),\n\n    // Test if cors is supported\n    cors : (\"XMLHttpRequest\" in window && \"withCredentials\" in new XMLHttpRequest()),\n\n    // Tests if touch events are supported, but doesn't necessarily reflect a touchscreen device\n    touch : !!((\"ontouchstart\" in window) || window.navigator && window.navigator.msPointerEnabled && window.MSGesture || window.DocumentTouch && document instanceof DocumentTouch),\n\n    // Test if async attribute is supported\n    async : (\"async\" in util.create(\"script\")),\n\n    // Test if defer attribute is supported\n    defer : (\"defer\" in util.create(\"script\")),\n\n    // Test if Geolocation is supported\n    geolocation : (\"geolocation\" in navigator),\n\n    // Test if img srcset attribute is supported\n    srcset : (\"srcset\" in util.create(\"img\")),\n\n    // Test if img sizes attribute is supported\n    sizes : (\"sizes\" in util.create(\"img\")),\n\n    // Test if Picture element is supported\n    pictureElement : (\"HTMLPictureElement\" in window),\n\n    // Run all the tests and add supported classes\n    testAll : function() {\n      var classes = \" js\";\n      for (var test in this) {\n        if (test !== \"testAll\" && test !== \"constructor\" && this[test]) {\n          classes += \" \" + test;\n        }\n      }\n      docEl.className += classes.toLowerCase();\n    }\n\n  };\n\n  /**\n   * Expose a public-facing API\n   */\n  window.feature = Feature;\n\n}(window, document));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/feature.js/feature.js\n ** module id = 29\n ** module chunks = 0\n **/","export default class Controller {\r\n  constructor(model, view) {\r\n    this._model = model;\r\n    this._view = view;\r\n  }\r\n  get view() {\r\n    return this._view;\r\n  }\r\n  get model() {\r\n    return this._model;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./core/mvc/controller.js\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../node_modules/css-loader/index.js!./index.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../node_modules/css-loader/index.js!./index.css\", function() {\n\t\t\tvar newContent = require(\"!!./../node_modules/css-loader/index.js!./index.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.css\n ** module id = 31\n ** module chunks = 0\n **/","exports = module.exports = require(\"./../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"*{margin:0;padding:0;-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-touch-callout:none;-webkit-text-size-adjust:none;-webkit-user-select:none}body{overflow:hidden}canvas{cursor:default}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/css-loader!./index.css\n ** module id = 32\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/css-loader/lib/css-base.js\n ** module id = 33\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tlinkElement.rel = \"stylesheet\";\r\n\tinsertStyleElement(options, linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement(options);\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/style-loader/addStyles.js\n ** module id = 34\n ** module chunks = 0\n **/"],"sourceRoot":""}